
projecto3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d58c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cbc  0800d69c  0800d69c  0000e69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e358  0800e358  0001091c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e358  0800e358  0001091c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e358  0800e358  0001091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e358  0800e358  0000f358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e35c  0800e35c  0000f35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000091c  20000000  0800e360  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000306c  2000091c  0800ec7c  0001091c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003988  0800ec7c  00010988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001091c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f17c  00000000  00000000  00010945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f5  00000000  00000000  0002fac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  000342b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001495  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c33c  00000000  00000000  000371a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000202c8  00000000  00000000  000534e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d445  00000000  00000000  000737a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007834  00000000  00000000  00110c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00118468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000091c 	.word	0x2000091c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d684 	.word	0x0800d684

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000920 	.word	0x20000920
 800014c:	0800d684 	.word	0x0800d684

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpun>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f80:	d102      	bne.n	8000f88 <__aeabi_fcmpun+0x14>
 8000f82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f86:	d108      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_fcmpun+0x20>
 8000f8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f92:	d102      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0001 	mov.w	r0, #1
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2iz>:
 8000fa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fa8:	d30f      	bcc.n	8000fca <__aeabi_f2iz+0x2a>
 8000faa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d90d      	bls.n	8000fd0 <__aeabi_f2iz+0x30>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fbc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	bf18      	it	ne
 8000fc6:	4240      	negne	r0, r0
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2iz+0x3a>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d105      	bne.n	8000fe6 <__aeabi_f2iz+0x46>
 8000fda:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fde:	bf08      	it	eq
 8000fe0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr

08000fec <__aeabi_f2uiz>:
 8000fec:	0042      	lsls	r2, r0, #1
 8000fee:	d20e      	bcs.n	800100e <__aeabi_f2uiz+0x22>
 8000ff0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ff4:	d30b      	bcc.n	800100e <__aeabi_f2uiz+0x22>
 8000ff6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ffa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffe:	d409      	bmi.n	8001014 <__aeabi_f2uiz+0x28>
 8001000:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001008:	fa23 f002 	lsr.w	r0, r3, r2
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2uiz+0x32>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d102      	bne.n	8001024 <__aeabi_f2uiz+0x38>
 800101e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001022:	4770      	bx	lr
 8001024:	f04f 0000 	mov.w	r0, #0
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <AN_init>:
static triangle_data_t triangle_config =
  { 4, 6, 10, 14, 12, 10, 5, 102 };

void
AN_init (UART_HandleTypeDef *uart_fm)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < FFT_MAX / 2; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e034      	b.n	80010a4 <AN_init+0x78>
    {
      buffer_fft_data[11 * i + 3] = ',';
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	3303      	adds	r3, #3
 8001048:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <AN_init+0x90>)
 800104a:	212c      	movs	r1, #44	@ 0x2c
 800104c:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 5] = '.';
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	3305      	adds	r3, #5
 800105c:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <AN_init+0x90>)
 800105e:	212e      	movs	r1, #46	@ 0x2e
 8001060:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 8] = ',';
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	3308      	adds	r3, #8
 8001070:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <AN_init+0x90>)
 8001072:	212c      	movs	r1, #44	@ 0x2c
 8001074:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 9] = '\r';
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	3309      	adds	r3, #9
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <AN_init+0x90>)
 8001086:	210d      	movs	r1, #13
 8001088:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 10] = '\n';
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	330a      	adds	r3, #10
 8001098:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <AN_init+0x90>)
 800109a:	210a      	movs	r1, #10
 800109c:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < FFT_MAX / 2; i++)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80010a8:	ddc7      	ble.n	800103a <AN_init+0xe>
    }
  uart_sender = uart_fm;
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <AN_init+0x94>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000d38 	.word	0x20000d38
 80010c0:	200012b8 	.word	0x200012b8
 80010c4:	00000000 	.word	0x00000000

080010c8 <AN_send_uart>:

void
AN_send_uart ()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  for (uint16_t i = 0; i < FFT_MAX / 2; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	e114      	b.n	80012fe <AN_send_uart+0x236>
    {
      buffer_fft_data[11 * i] = '0' + (uint16_t) (i * 3.9025) / 100;
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f98c 	bl	80003f4 <__aeabi_i2d>
 80010dc:	a390      	add	r3, pc, #576	@ (adr r3, 8001320 <AN_send_uart+0x258>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff f9f1 	bl	80004c8 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fbfd 	bl	80008ec <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4a8c      	ldr	r2, [pc, #560]	@ (8001328 <AN_send_uart+0x260>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2d9      	uxtb	r1, r3
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 8001112:	b2d1      	uxtb	r1, r2
 8001114:	4a85      	ldr	r2, [pc, #532]	@ (800132c <AN_send_uart+0x264>)
 8001116:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 1] = '0' + ((uint16_t) (i * 3.9025) / 10) % 10;
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f96a 	bl	80003f4 <__aeabi_i2d>
 8001120:	a37f      	add	r3, pc, #508	@ (adr r3, 8001320 <AN_send_uart+0x258>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff f9cf 	bl	80004c8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fbdb 	bl	80008ec <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	b29b      	uxth	r3, r3
 800113a:	4a7d      	ldr	r2, [pc, #500]	@ (8001330 <AN_send_uart+0x268>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b7a      	ldr	r3, [pc, #488]	@ (8001330 <AN_send_uart+0x268>)
 8001146:	fba3 1302 	umull	r1, r3, r3, r2
 800114a:	08d9      	lsrs	r1, r3, #3
 800114c:	460b      	mov	r3, r1
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	b2d9      	uxtb	r1, r3
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	3301      	adds	r3, #1
 8001168:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800116c:	b2d1      	uxtb	r1, r2
 800116e:	4a6f      	ldr	r2, [pc, #444]	@ (800132c <AN_send_uart+0x264>)
 8001170:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 2] = '0' + (uint16_t) (i * 3.9025) % 10;
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f93d 	bl	80003f4 <__aeabi_i2d>
 800117a:	a369      	add	r3, pc, #420	@ (adr r3, 8001320 <AN_send_uart+0x258>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff f9a2 	bl	80004c8 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fbae 	bl	80008ec <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b66      	ldr	r3, [pc, #408]	@ (8001330 <AN_send_uart+0x268>)
 8001196:	fba3 1302 	umull	r1, r3, r3, r2
 800119a:	08d9      	lsrs	r1, r3, #3
 800119c:	460b      	mov	r3, r1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b2d9      	uxtb	r1, r3
 80011aa:	88fa      	ldrh	r2, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	3302      	adds	r3, #2
 80011b8:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80011bc:	b2d1      	uxtb	r1, r2
 80011be:	4a5b      	ldr	r2, [pc, #364]	@ (800132c <AN_send_uart+0x264>)
 80011c0:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 3] = ',';
 80011c2:	88fa      	ldrh	r2, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	3303      	adds	r3, #3
 80011d0:	4a56      	ldr	r2, [pc, #344]	@ (800132c <AN_send_uart+0x264>)
 80011d2:	212c      	movs	r1, #44	@ 0x2c
 80011d4:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 4] = '0'
	  + (uint16_t) (fft_screen_points[i].real);
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4a56      	ldr	r2, [pc, #344]	@ (8001334 <AN_send_uart+0x26c>)
 80011da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff04 	bl	8000fec <__aeabi_f2uiz>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b2d9      	uxtb	r1, r3
      buffer_fft_data[11 * i + 4] = '0'
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	3304      	adds	r3, #4
	  + (uint16_t) (fft_screen_points[i].real);
 80011f8:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80011fc:	b2d1      	uxtb	r1, r2
      buffer_fft_data[11 * i + 4] = '0'
 80011fe:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <AN_send_uart+0x264>)
 8001200:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 5] = '.';
 8001202:	88fa      	ldrh	r2, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	3305      	adds	r3, #5
 8001210:	4a46      	ldr	r2, [pc, #280]	@ (800132c <AN_send_uart+0x264>)
 8001212:	212e      	movs	r1, #46	@ 0x2e
 8001214:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 6] = '0'
	  + ((uint16_t) (fft_screen_points[i].real * 10)) % 10;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4a46      	ldr	r2, [pc, #280]	@ (8001334 <AN_send_uart+0x26c>)
 800121a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800121e:	4946      	ldr	r1, [pc, #280]	@ (8001338 <AN_send_uart+0x270>)
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fce1 	bl	8000be8 <__aeabi_fmul>
 8001226:	4603      	mov	r3, r0
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fedf 	bl	8000fec <__aeabi_f2uiz>
 800122e:	4603      	mov	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b3f      	ldr	r3, [pc, #252]	@ (8001330 <AN_send_uart+0x268>)
 8001234:	fba3 1302 	umull	r1, r3, r3, r2
 8001238:	08d9      	lsrs	r1, r3, #3
 800123a:	460b      	mov	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b29b      	uxth	r3, r3
 8001246:	b2d9      	uxtb	r1, r3
      buffer_fft_data[11 * i + 6] = '0'
 8001248:	88fa      	ldrh	r2, [r7, #6]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3306      	adds	r3, #6
	  + ((uint16_t) (fft_screen_points[i].real * 10)) % 10;
 8001256:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 800125a:	b2d1      	uxtb	r1, r2
      buffer_fft_data[11 * i + 6] = '0'
 800125c:	4a33      	ldr	r2, [pc, #204]	@ (800132c <AN_send_uart+0x264>)
 800125e:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 7] = '0'
	  + (((uint16_t) (fft_screen_points[i].real * 100)) % 100) % 10;
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4a34      	ldr	r2, [pc, #208]	@ (8001334 <AN_send_uart+0x26c>)
 8001264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001268:	4934      	ldr	r1, [pc, #208]	@ (800133c <AN_send_uart+0x274>)
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fcbc 	bl	8000be8 <__aeabi_fmul>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff feba 	bl	8000fec <__aeabi_f2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	b29b      	uxth	r3, r3
 800127c:	4a2a      	ldr	r2, [pc, #168]	@ (8001328 <AN_send_uart+0x260>)
 800127e:	fba2 1203 	umull	r1, r2, r2, r3
 8001282:	0952      	lsrs	r2, r2, #5
 8001284:	2164      	movs	r1, #100	@ 0x64
 8001286:	fb01 f202 	mul.w	r2, r1, r2
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <AN_send_uart+0x268>)
 8001290:	fba3 1302 	umull	r1, r3, r3, r2
 8001294:	08d9      	lsrs	r1, r3, #3
 8001296:	460b      	mov	r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b2d9      	uxtb	r1, r3
      buffer_fft_data[11 * i + 7] = '0'
 80012a4:	88fa      	ldrh	r2, [r7, #6]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	3307      	adds	r3, #7
	  + (((uint16_t) (fft_screen_points[i].real * 100)) % 100) % 10;
 80012b2:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 80012b6:	b2d1      	uxtb	r1, r2
      buffer_fft_data[11 * i + 7] = '0'
 80012b8:	4a1c      	ldr	r2, [pc, #112]	@ (800132c <AN_send_uart+0x264>)
 80012ba:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 8] = ',';
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	3308      	adds	r3, #8
 80012ca:	4a18      	ldr	r2, [pc, #96]	@ (800132c <AN_send_uart+0x264>)
 80012cc:	212c      	movs	r1, #44	@ 0x2c
 80012ce:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 9] = '\r';
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	3309      	adds	r3, #9
 80012de:	4a13      	ldr	r2, [pc, #76]	@ (800132c <AN_send_uart+0x264>)
 80012e0:	210d      	movs	r1, #13
 80012e2:	54d1      	strb	r1, [r2, r3]
      buffer_fft_data[11 * i + 10] = '\n';
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	330a      	adds	r3, #10
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <AN_send_uart+0x264>)
 80012f4:	210a      	movs	r1, #10
 80012f6:	54d1      	strb	r1, [r2, r3]
  for (uint16_t i = 0; i < FFT_MAX / 2; i++)
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	3301      	adds	r3, #1
 80012fc:	80fb      	strh	r3, [r7, #6]
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2b7f      	cmp	r3, #127	@ 0x7f
 8001302:	f67f aee7 	bls.w	80010d4 <AN_send_uart+0xc>
    }
  HAL_UART_Transmit (uart_sender, buffer_fft_data, 11 * 128, HAL_MAX_DELAY);
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <AN_send_uart+0x278>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800130e:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001312:	4906      	ldr	r1, [pc, #24]	@ (800132c <AN_send_uart+0x264>)
 8001314:	f007 f844 	bl	80083a0 <HAL_UART_Transmit>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	eb851eb8 	.word	0xeb851eb8
 8001324:	400f3851 	.word	0x400f3851
 8001328:	51eb851f 	.word	0x51eb851f
 800132c:	20000d38 	.word	0x20000d38
 8001330:	cccccccd 	.word	0xcccccccd
 8001334:	20000938 	.word	0x20000938
 8001338:	41200000 	.word	0x41200000
 800133c:	42c80000 	.word	0x42c80000
 8001340:	200012b8 	.word	0x200012b8

08001344 <AN_encoder_setter>:

/* @brief: sets the value of the encoder */
void
AN_encoder_setter ()
{
 8001344:	b598      	push	{r3, r4, r7, lr}
 8001346:	af00      	add	r7, sp, #0
  inputs.encoder = EN_get_value ();
 8001348:	4c02      	ldr	r4, [pc, #8]	@ (8001354 <AN_encoder_setter+0x10>)
 800134a:	f000 ffc3 	bl	80022d4 <EN_get_value>
 800134e:	8020      	strh	r0, [r4, #0]
}
 8001350:	bf00      	nop
 8001352:	bd98      	pop	{r3, r4, r7, pc}
 8001354:	20000000 	.word	0x20000000

08001358 <AN_button_setter>:

/* @brief: sets the value of the buttons */
uint8_t
AN_button_setter ()
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	af00      	add	r7, sp, #0
  EN_button ((switch_t) !HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12),
 800135c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001360:	481d      	ldr	r0, [pc, #116]	@ (80013d8 <AN_button_setter+0x80>)
 8001362:	f004 fa71 	bl	8005848 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	bf0c      	ite	eq
 800136c:	2301      	moveq	r3, #1
 800136e:	2300      	movne	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	491a      	ldr	r1, [pc, #104]	@ (80013dc <AN_button_setter+0x84>)
 8001374:	4618      	mov	r0, r3
 8001376:	f000 ffc3 	bl	8002300 <EN_button>
	     &(inputs.button_encoder));
  EN_button ((switch_t) !HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_1),
 800137a:	2102      	movs	r1, #2
 800137c:	4816      	ldr	r0, [pc, #88]	@ (80013d8 <AN_button_setter+0x80>)
 800137e:	f004 fa63 	bl	8005848 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4914      	ldr	r1, [pc, #80]	@ (80013e0 <AN_button_setter+0x88>)
 8001390:	4618      	mov	r0, r3
 8001392:	f000 ffb5 	bl	8002300 <EN_button>
	     &(inputs.button_sec));
  if ((inputs.button_sec.value != inputs_comp.button_sec.value)
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <AN_button_setter+0x8c>)
 8001398:	7a9a      	ldrb	r2, [r3, #10]
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <AN_button_setter+0x90>)
 800139c:	7a9b      	ldrb	r3, [r3, #10]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d105      	bne.n	80013ae <AN_button_setter+0x56>
      || (inputs.button_encoder.value != inputs_comp.button_encoder.value))
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <AN_button_setter+0x8c>)
 80013a4:	789a      	ldrb	r2, [r3, #2]
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <AN_button_setter+0x90>)
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d009      	beq.n	80013c2 <AN_button_setter+0x6a>
    {
      inputs_comp = inputs;
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <AN_button_setter+0x90>)
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <AN_button_setter+0x8c>)
 80013b2:	4614      	mov	r4, r2
 80013b4:	461d      	mov	r5, r3
 80013b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	8023      	strh	r3, [r4, #0]
      return 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	e008      	b.n	80013d4 <AN_button_setter+0x7c>
    }
  inputs_comp = inputs;
 80013c2:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <AN_button_setter+0x90>)
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <AN_button_setter+0x8c>)
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	8023      	strh	r3, [r4, #0]
  return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}
 80013d8:	40010c00 	.word	0x40010c00
 80013dc:	20000002 	.word	0x20000002
 80013e0:	2000000a 	.word	0x2000000a
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000014 	.word	0x20000014

080013ec <AN_fft_update_setter>:
  current_values.fft_encoder_mode = !current_values.fft_encoder_mode;
}

void
AN_fft_update_setter ()
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  current_values.fft_pass = !current_values.fft_pass;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <AN_fft_update_setter+0x20>)
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	4b02      	ldr	r3, [pc, #8]	@ (800140c <AN_fft_update_setter+0x20>)
 8001402:	731a      	strb	r2, [r3, #12]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000028 	.word	0x20000028

08001410 <AN_inputs_reader>:
/* @brief: returns the current value of the inputs */
inputs_t
AN_inputs_reader ()
{
 8001410:	b4b0      	push	{r4, r5, r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return inputs;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <AN_inputs_reader+0x28>)
 800141c:	461d      	mov	r5, r3
 800141e:	4614      	mov	r4, r2
 8001420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001422:	6028      	str	r0, [r5, #0]
 8001424:	6069      	str	r1, [r5, #4]
 8001426:	60aa      	str	r2, [r5, #8]
 8001428:	60eb      	str	r3, [r5, #12]
 800142a:	8823      	ldrh	r3, [r4, #0]
 800142c:	822b      	strh	r3, [r5, #16]
}
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bcb0      	pop	{r4, r5, r7}
 8001436:	4770      	bx	lr
 8001438:	20000000 	.word	0x20000000

0800143c <AN_config_reader>:

config_disp_t
AN_config_reader ()
{
 800143c:	b490      	push	{r4, r7}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return current_values;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <AN_config_reader+0x20>)
 8001448:	461c      	mov	r4, r3
 800144a:	4613      	mov	r3, r2
 800144c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bc90      	pop	{r4, r7}
 800145a:	4770      	bx	lr
 800145c:	20000028 	.word	0x20000028

08001460 <AN_graph_fft>:
 *   @fft_len: length of the vector
 *   @cursor: position of cursor
 */
void
AN_graph_fft (uint8_t cursor)
{
 8001460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001464:	b08e      	sub	sp, #56	@ 0x38
 8001466:	af04      	add	r7, sp, #16
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  if (cursor < 0 || cursor > FFT_MAX / 2)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b80      	cmp	r3, #128	@ 0x80
 8001470:	f200 816a 	bhi.w	8001748 <AN_graph_fft+0x2e8>
    return;
  char buffer[22];
  SSD1306_Fill (SSD1306_COLOR_BLACK);
 8001474:	2000      	movs	r0, #0
 8001476:	f002 fa4d 	bl	8003914 <SSD1306_Fill>
  for (uint16_t pixelx = 0; pixelx < FFT_MAX / 2; pixelx++)
 800147a:	2300      	movs	r3, #0
 800147c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800147e:	e018      	b.n	80014b2 <AN_graph_fft+0x52>
    {
      SSD1306_DrawLine (pixelx, SSD1306_HEIGHT, pixelx,
      SSD1306_HEIGHT - 2 * (uint16_t) fft_screen_points[pixelx].imag,
 8001480:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001482:	4ab7      	ldr	r2, [pc, #732]	@ (8001760 <AN_graph_fft+0x300>)
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdae 	bl	8000fec <__aeabi_f2uiz>
 8001490:	4603      	mov	r3, r0
 8001492:	b29b      	uxth	r3, r3
 8001494:	f1c3 0320 	rsb	r3, r3, #32
      SSD1306_DrawLine (pixelx, SSD1306_HEIGHT, pixelx,
 8001498:	b29b      	uxth	r3, r3
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	b29b      	uxth	r3, r3
 800149e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80014a0:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80014a2:	2101      	movs	r1, #1
 80014a4:	9100      	str	r1, [sp, #0]
 80014a6:	2140      	movs	r1, #64	@ 0x40
 80014a8:	f002 fb63 	bl	8003b72 <SSD1306_DrawLine>
  for (uint16_t pixelx = 0; pixelx < FFT_MAX / 2; pixelx++)
 80014ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014ae:	3301      	adds	r3, #1
 80014b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80014b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80014b6:	d9e3      	bls.n	8001480 <AN_graph_fft+0x20>
			SSD1306_COLOR_WHITE);
    }
  SSD1306_GotoXY (REC_POS_X + 1, CURSOR_HEIGHT + 1);
 80014b8:	2106      	movs	r1, #6
 80014ba:	200c      	movs	r0, #12
 80014bc:	f002 faa0 	bl	8003a00 <SSD1306_GotoXY>
  switch (current_values.fft_encoder_mode)
 80014c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001764 <AN_graph_fft+0x304>)
 80014c2:	7b5b      	ldrb	r3, [r3, #13]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	f000 80f8 	beq.w	80016ba <AN_graph_fft+0x25a>
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	f300 8134 	bgt.w	8001738 <AN_graph_fft+0x2d8>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <AN_graph_fft+0x7c>
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	f000 8095 	beq.w	8001604 <AN_graph_fft+0x1a4>
 80014da:	e12d      	b.n	8001738 <AN_graph_fft+0x2d8>
    {
    case 0:
      sprintf (
	  buffer,
	  "%d.%.1d;%d|%d.%.1d;%d",
	  (uint16_t) (fft_screen_points[cursor].imag * MAX_V
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4aa0      	ldr	r2, [pc, #640]	@ (8001760 <AN_graph_fft+0x300>)
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe ff96 	bl	8000418 <__aeabi_f2d>
 80014ec:	a39a      	add	r3, pc, #616	@ (adr r3, 8001758 <AN_graph_fft+0x2f8>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe ffe9 	bl	80004c8 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
	      / (float) (SSD1306_HEIGHT - CURSOR_HEIGHT)),
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b99      	ldr	r3, [pc, #612]	@ (8001768 <AN_graph_fft+0x308>)
 8001504:	f7ff f90a 	bl	800071c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
	  (uint16_t) (fft_screen_points[cursor].imag * MAX_V
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff f9ec 	bl	80008ec <__aeabi_d2uiz>
 8001514:	4603      	mov	r3, r0
 8001516:	b29b      	uxth	r3, r3
      sprintf (
 8001518:	461e      	mov	r6, r3
	  (uint16_t) (fft_screen_points[cursor].imag * MAX_V * 10
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4a90      	ldr	r2, [pc, #576]	@ (8001760 <AN_graph_fft+0x300>)
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff77 	bl	8000418 <__aeabi_f2d>
 800152a:	a38b      	add	r3, pc, #556	@ (adr r3, 8001758 <AN_graph_fft+0x2f8>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe ffca 	bl	80004c8 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b8a      	ldr	r3, [pc, #552]	@ (800176c <AN_graph_fft+0x30c>)
 8001542:	f7fe ffc1 	bl	80004c8 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
	      / (float) (SSD1306_HEIGHT - CURSOR_HEIGHT)) % 10,
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b85      	ldr	r3, [pc, #532]	@ (8001768 <AN_graph_fft+0x308>)
 8001554:	f7ff f8e2 	bl	800071c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
	  (uint16_t) (fft_screen_points[cursor].imag * MAX_V * 10
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff f9c4 	bl	80008ec <__aeabi_d2uiz>
 8001564:	4603      	mov	r3, r0
 8001566:	b29a      	uxth	r2, r3
      sprintf (
 8001568:	4b81      	ldr	r3, [pc, #516]	@ (8001770 <AN_graph_fft+0x310>)
 800156a:	fba3 1302 	umull	r1, r3, r3, r2
 800156e:	08d9      	lsrs	r1, r3, #3
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	4698      	mov	r8, r3
	  (uint16_t) rintf (cursor * (float) FS / 256),
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fadd 	bl	8000b40 <__aeabi_i2f>
 8001586:	4603      	mov	r3, r0
 8001588:	497a      	ldr	r1, [pc, #488]	@ (8001774 <AN_graph_fft+0x314>)
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb2c 	bl	8000be8 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fbda 	bl	8000d50 <__aeabi_fdiv>
 800159c:	4603      	mov	r3, r0
 800159e:	4618      	mov	r0, r3
 80015a0:	f00b fa8e 	bl	800cac0 <rintf>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fd20 	bl	8000fec <__aeabi_f2uiz>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29b      	uxth	r3, r3
      sprintf (
 80015b0:	461c      	mov	r4, r3
	  current_values.pwm_state.amp / 10, current_values.pwm_state.amp % 10,
 80015b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001764 <AN_graph_fft+0x304>)
 80015b4:	791b      	ldrb	r3, [r3, #4]
      sprintf (
 80015b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001770 <AN_graph_fft+0x310>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461d      	mov	r5, r3
	  current_values.pwm_state.amp / 10, current_values.pwm_state.amp % 10,
 80015c2:	4b68      	ldr	r3, [pc, #416]	@ (8001764 <AN_graph_fft+0x304>)
 80015c4:	791a      	ldrb	r2, [r3, #4]
      sprintf (
 80015c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001770 <AN_graph_fft+0x310>)
 80015c8:	fba3 1302 	umull	r1, r3, r3, r2
 80015cc:	08d9      	lsrs	r1, r3, #3
 80015ce:	460b      	mov	r3, r1
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
	  (int) current_values.pwm_state.freq);
 80015dc:	4b61      	ldr	r3, [pc, #388]	@ (8001764 <AN_graph_fft+0x304>)
 80015de:	681b      	ldr	r3, [r3, #0]
      sprintf (
 80015e0:	f107 000c 	add.w	r0, r7, #12
 80015e4:	9303      	str	r3, [sp, #12]
 80015e6:	9202      	str	r2, [sp, #8]
 80015e8:	9501      	str	r5, [sp, #4]
 80015ea:	9400      	str	r4, [sp, #0]
 80015ec:	4643      	mov	r3, r8
 80015ee:	4632      	mov	r2, r6
 80015f0:	4961      	ldr	r1, [pc, #388]	@ (8001778 <AN_graph_fft+0x318>)
 80015f2:	f00a fc9b 	bl	800bf2c <siprintf>
      AN_set_cursor (cursor, SSD1306_COLOR_WHITE);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	2101      	movs	r1, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fd1d 	bl	800203c <AN_set_cursor>
      break;
 8001602:	e099      	b.n	8001738 <AN_graph_fft+0x2d8>
    case 1:
      uint16_t freq_temp = WRAP_FREQ(
 8001604:	4b5d      	ldr	r3, [pc, #372]	@ (800177c <AN_graph_fft+0x31c>)
 8001606:	891b      	ldrh	r3, [r3, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <AN_graph_fft+0x320>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b5a      	ldr	r3, [pc, #360]	@ (800177c <AN_graph_fft+0x31c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4413      	add	r3, r2
 8001616:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800161a:	4619      	mov	r1, r3
 800161c:	f000 fe38 	bl	8002290 <AN_wrap_value>
 8001620:	4603      	mov	r3, r0
 8001622:	1f19      	subs	r1, r3, #4
 8001624:	4b57      	ldr	r3, [pc, #348]	@ (8001784 <AN_graph_fft+0x324>)
 8001626:	fb83 2301 	smull	r2, r3, r3, r1
 800162a:	11da      	asrs	r2, r3, #7
 800162c:	17cb      	asrs	r3, r1, #31
 800162e:	1ad2      	subs	r2, r2, r3
 8001630:	4613      	mov	r3, r2
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	1aca      	subs	r2, r1, r3
 800163c:	f202 11f1 	addw	r1, r2, #497	@ 0x1f1
 8001640:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <AN_graph_fft+0x324>)
 8001642:	fb83 2301 	smull	r2, r3, r3, r1
 8001646:	11da      	asrs	r2, r3, #7
 8001648:	17cb      	asrs	r3, r1, #31
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	4613      	mov	r3, r2
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	1aca      	subs	r2, r1, r3
 8001658:	b293      	uxth	r3, r2
 800165a:	3304      	adds	r3, #4
 800165c:	847b      	strh	r3, [r7, #34]	@ 0x22
	  AN_wrap_value (pwm_set.option,
			 inputs.encoder.position + pwm_set.pwm_state.freq,
			 501));
      current_values.update_pwm = 0;
 800165e:	4b41      	ldr	r3, [pc, #260]	@ (8001764 <AN_graph_fft+0x304>)
 8001660:	2200      	movs	r2, #0
 8001662:	72da      	strb	r2, [r3, #11]
      if (current_values.pwm_state.freq != freq_temp)
 8001664:	4b3f      	ldr	r3, [pc, #252]	@ (8001764 <AN_graph_fft+0x304>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800166a:	429a      	cmp	r2, r3
 800166c:	d005      	beq.n	800167a <AN_graph_fft+0x21a>
	{
	  current_values.pwm_state.freq = freq_temp;
 800166e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001670:	4a3c      	ldr	r2, [pc, #240]	@ (8001764 <AN_graph_fft+0x304>)
 8001672:	6013      	str	r3, [r2, #0]
	  current_values.update_pwm = 1;
 8001674:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <AN_graph_fft+0x304>)
 8001676:	2201      	movs	r2, #1
 8001678:	72da      	strb	r2, [r3, #11]
	}
      sprintf (buffer, "PWM: %d.%dV %dHz", current_values.pwm_state.amp / 10,
 800167a:	4b3a      	ldr	r3, [pc, #232]	@ (8001764 <AN_graph_fft+0x304>)
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	4a3c      	ldr	r2, [pc, #240]	@ (8001770 <AN_graph_fft+0x310>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	08db      	lsrs	r3, r3, #3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461c      	mov	r4, r3
	       current_values.pwm_state.amp % 10,
 800168a:	4b36      	ldr	r3, [pc, #216]	@ (8001764 <AN_graph_fft+0x304>)
 800168c:	791a      	ldrb	r2, [r3, #4]
      sprintf (buffer, "PWM: %d.%dV %dHz", current_values.pwm_state.amp / 10,
 800168e:	4b38      	ldr	r3, [pc, #224]	@ (8001770 <AN_graph_fft+0x310>)
 8001690:	fba3 1302 	umull	r1, r3, r3, r2
 8001694:	08d9      	lsrs	r1, r3, #3
 8001696:	460b      	mov	r3, r1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
	       (int) current_values.pwm_state.freq);
 80016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <AN_graph_fft+0x304>)
 80016a6:	681b      	ldr	r3, [r3, #0]
      sprintf (buffer, "PWM: %d.%dV %dHz", current_values.pwm_state.amp / 10,
 80016a8:	f107 000c 	add.w	r0, r7, #12
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4613      	mov	r3, r2
 80016b0:	4622      	mov	r2, r4
 80016b2:	4935      	ldr	r1, [pc, #212]	@ (8001788 <AN_graph_fft+0x328>)
 80016b4:	f00a fc3a 	bl	800bf2c <siprintf>
      break;
 80016b8:	e03e      	b.n	8001738 <AN_graph_fft+0x2d8>
    case 2:
      uint16_t amp_temp = AN_wrap_value (
	  pwm_set.option, inputs.encoder.position + pwm_set.pwm_state.amp, 34);
 80016ba:	4b30      	ldr	r3, [pc, #192]	@ (800177c <AN_graph_fft+0x31c>)
 80016bc:	891b      	ldrh	r3, [r3, #8]
      uint16_t amp_temp = AN_wrap_value (
 80016be:	4618      	mov	r0, r3
	  pwm_set.option, inputs.encoder.position + pwm_set.pwm_state.amp, 34);
 80016c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <AN_graph_fft+0x320>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <AN_graph_fft+0x31c>)
 80016c8:	791b      	ldrb	r3, [r3, #4]
 80016ca:	4413      	add	r3, r2
      uint16_t amp_temp = AN_wrap_value (
 80016cc:	2222      	movs	r2, #34	@ 0x22
 80016ce:	4619      	mov	r1, r3
 80016d0:	f000 fdde 	bl	8002290 <AN_wrap_value>
 80016d4:	4603      	mov	r3, r0
 80016d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
      current_values.update_pwm = 0;
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <AN_graph_fft+0x304>)
 80016da:	2200      	movs	r2, #0
 80016dc:	72da      	strb	r2, [r3, #11]
      if (current_values.pwm_state.amp != amp_temp)
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <AN_graph_fft+0x304>)
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	461a      	mov	r2, r3
 80016e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d006      	beq.n	80016f8 <AN_graph_fft+0x298>
	{
	  current_values.pwm_state.amp = amp_temp;
 80016ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <AN_graph_fft+0x304>)
 80016f0:	711a      	strb	r2, [r3, #4]
	  current_values.update_pwm = 1;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <AN_graph_fft+0x304>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	72da      	strb	r2, [r3, #11]
	}
      sprintf (buffer, "PWM: %d.%dV %dHz", current_values.pwm_state.amp / 10,
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <AN_graph_fft+0x304>)
 80016fa:	791b      	ldrb	r3, [r3, #4]
 80016fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <AN_graph_fft+0x310>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461c      	mov	r4, r3
	       current_values.pwm_state.amp % 10,
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <AN_graph_fft+0x304>)
 800170a:	791a      	ldrb	r2, [r3, #4]
      sprintf (buffer, "PWM: %d.%dV %dHz", current_values.pwm_state.amp / 10,
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <AN_graph_fft+0x310>)
 800170e:	fba3 1302 	umull	r1, r3, r3, r2
 8001712:	08d9      	lsrs	r1, r3, #3
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
	       (int) current_values.pwm_state.freq);
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <AN_graph_fft+0x304>)
 8001724:	681b      	ldr	r3, [r3, #0]
      sprintf (buffer, "PWM: %d.%dV %dHz", current_values.pwm_state.amp / 10,
 8001726:	f107 000c 	add.w	r0, r7, #12
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	4622      	mov	r2, r4
 8001730:	4915      	ldr	r1, [pc, #84]	@ (8001788 <AN_graph_fft+0x328>)
 8001732:	f00a fbfb 	bl	800bf2c <siprintf>
      break;
 8001736:	bf00      	nop
    }
  SSD1306_Puts (buffer, &Font_7x10, SSD1306_COLOR_WHITE);
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2201      	movs	r2, #1
 800173e:	4913      	ldr	r1, [pc, #76]	@ (800178c <AN_graph_fft+0x32c>)
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f9f1 	bl	8003b28 <SSD1306_Puts>
 8001746:	e000      	b.n	800174a <AN_graph_fft+0x2ea>
    return;
 8001748:	bf00      	nop
}
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001752:	bf00      	nop
 8001754:	f3af 8000 	nop.w
 8001758:	66666666 	.word	0x66666666
 800175c:	400a6666 	.word	0x400a6666
 8001760:	20000938 	.word	0x20000938
 8001764:	20000028 	.word	0x20000028
 8001768:	404d8000 	.word	0x404d8000
 800176c:	40240000 	.word	0x40240000
 8001770:	cccccccd 	.word	0xcccccccd
 8001774:	447a0000 	.word	0x447a0000
 8001778:	0800d69c 	.word	0x0800d69c
 800177c:	200012cc 	.word	0x200012cc
 8001780:	20000000 	.word	0x20000000
 8001784:	41ee7ca7 	.word	0x41ee7ca7
 8001788:	0800d6b4 	.word	0x0800d6b4
 800178c:	200008ac 	.word	0x200008ac

08001790 <AN_graph_control>:
 * @inputs:
 *  @input: struct with the values of the current inputs
 */
void
AN_graph_control (switch_values_t switches, uint8_t regen)
{
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b092      	sub	sp, #72	@ 0x48
 8001794:	af04      	add	r7, sp, #16
 8001796:	80b8      	strh	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  selected_event_t selected_event = not_pressed;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  char values_str[2][10] =
 80017a2:	4b3a      	ldr	r3, [pc, #232]	@ (800188c <AN_graph_control+0xfc>)
 80017a4:	f107 0420 	add.w	r4, r7, #32
 80017a8:	461d      	mov	r5, r3
 80017aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ae:	682b      	ldr	r3, [r5, #0]
 80017b0:	6023      	str	r3, [r4, #0]
    { "--", "--" };
  regen = regen % 2;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	70fb      	strb	r3, [r7, #3]
  inputs_t input_cp = inputs;
 80017ba:	4b35      	ldr	r3, [pc, #212]	@ (8001890 <AN_graph_control+0x100>)
 80017bc:	f107 040c 	add.w	r4, r7, #12
 80017c0:	461d      	mov	r5, r3
 80017c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c6:	682b      	ldr	r3, [r5, #0]
 80017c8:	8023      	strh	r3, [r4, #0]
  input_cp.button_encoder.value = switches.encoder;
 80017ca:	793b      	ldrb	r3, [r7, #4]
 80017cc:	73bb      	strb	r3, [r7, #14]
  input_cp.button_sec.value = switches.second;
 80017ce:	797b      	ldrb	r3, [r7, #5]
 80017d0:	75bb      	strb	r3, [r7, #22]

  /* Checking for selection */
  if (old_values.option != input_cp.encoder.position)
 80017d2:	4b30      	ldr	r3, [pc, #192]	@ (8001894 <AN_graph_control+0x104>)
 80017d4:	891a      	ldrh	r2, [r3, #8]
 80017d6:	89bb      	ldrh	r3, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d002      	beq.n	80017e2 <AN_graph_control+0x52>
    selected_event = not_change;
 80017dc:	2303      	movs	r3, #3
 80017de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (input_cp.button_encoder.value == on)
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d10a      	bne.n	80017fe <AN_graph_control+0x6e>
    {
      selected_event = pressed;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (old_values.option != input_cp.encoder.position)
 80017ee:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <AN_graph_control+0x104>)
 80017f0:	891a      	ldrh	r2, [r3, #8]
 80017f2:	89bb      	ldrh	r3, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d002      	beq.n	80017fe <AN_graph_control+0x6e>
	selected_event = pressed_change;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

  AN_fsm_config (&selected_state, selected_event, input_cp);
 80017fe:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8001802:	466b      	mov	r3, sp
 8001804:	f107 0214 	add.w	r2, r7, #20
 8001808:	ca07      	ldmia	r2, {r0, r1, r2}
 800180a:	c303      	stmia	r3!, {r0, r1}
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	cb0c      	ldmia	r3, {r2, r3}
 8001814:	4621      	mov	r1, r4
 8001816:	4820      	ldr	r0, [pc, #128]	@ (8001898 <AN_graph_control+0x108>)
 8001818:	f000 f848 	bl	80018ac <AN_fsm_config>

  /*Draws the boxes and part of the text */
  sprintf (values_str[0], "| %d.%dV", current_values.pwm_state.amp / 10,
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <AN_graph_control+0x10c>)
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	4a1f      	ldr	r2, [pc, #124]	@ (80018a0 <AN_graph_control+0x110>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461c      	mov	r4, r3
	   current_values.pwm_state.amp % 10);
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <AN_graph_control+0x10c>)
 800182e:	791a      	ldrb	r2, [r3, #4]
  sprintf (values_str[0], "| %d.%dV", current_values.pwm_state.amp / 10,
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <AN_graph_control+0x110>)
 8001832:	fba3 1302 	umull	r1, r3, r3, r2
 8001836:	08d9      	lsrs	r1, r3, #3
 8001838:	460b      	mov	r3, r1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f107 0020 	add.w	r0, r7, #32
 8001848:	4622      	mov	r2, r4
 800184a:	4916      	ldr	r1, [pc, #88]	@ (80018a4 <AN_graph_control+0x114>)
 800184c:	f00a fb6e 	bl	800bf2c <siprintf>
  sprintf (values_str[1], "| %3dHz", (int) current_values.pwm_state.freq);
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <AN_graph_control+0x10c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	330a      	adds	r3, #10
 800185c:	4912      	ldr	r1, [pc, #72]	@ (80018a8 <AN_graph_control+0x118>)
 800185e:	4618      	mov	r0, r3
 8001860:	f00a fb64 	bl	800bf2c <siprintf>

  AN_draw_menu (current_values.option, current_values.fill, regen,
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <AN_graph_control+0x10c>)
 8001866:	891b      	ldrh	r3, [r3, #8]
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <AN_graph_control+0x10c>)
 800186c:	7a99      	ldrb	r1, [r3, #10]
 800186e:	f107 0420 	add.w	r4, r7, #32
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	330a      	adds	r3, #10
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4623      	mov	r3, r4
 800187e:	f000 f91d 	bl	8001abc <AN_draw_menu>
		values_str[0], values_str[1]);
}
 8001882:	bf00      	nop
 8001884:	3738      	adds	r7, #56	@ 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	bf00      	nop
 800188c:	0800d6dc 	.word	0x0800d6dc
 8001890:	20000000 	.word	0x20000000
 8001894:	200012bc 	.word	0x200012bc
 8001898:	20000026 	.word	0x20000026
 800189c:	20000028 	.word	0x20000028
 80018a0:	cccccccd 	.word	0xcccccccd
 80018a4:	0800d6c8 	.word	0x0800d6c8
 80018a8:	0800d6d4 	.word	0x0800d6d4

080018ac <AN_fsm_config>:
 *   @selected_event: current event for the display
 */
void
AN_fsm_config (selected_state_t *selected_state,
	       selected_event_t selected_event, inputs_t inputs_cp)
{
 80018ac:	b082      	sub	sp, #8
 80018ae:	b590      	push	{r4, r7, lr}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	f107 0018 	add.w	r0, r7, #24
 80018ba:	e880 000c 	stmia.w	r0, {r2, r3}
 80018be:	460b      	mov	r3, r1
 80018c0:	70fb      	strb	r3, [r7, #3]

  switch (*selected_state)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	f200 80df 	bhi.w	8001a8a <AN_fsm_config+0x1de>
 80018cc:	a201      	add	r2, pc, #4	@ (adr r2, 80018d4 <AN_fsm_config+0x28>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	08001a39 	.word	0x08001a39
 80018d8:	08001947 	.word	0x08001947
 80018dc:	080018e5 	.word	0x080018e5
 80018e0:	08001913 	.word	0x08001913
    {
    case not_off:
      current_values.option = inputs_cp.encoder.position;
 80018e4:	8b3a      	ldrh	r2, [r7, #24]
 80018e6:	4b70      	ldr	r3, [pc, #448]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 80018e8:	811a      	strh	r2, [r3, #8]
      current_values.update_pwm = 0;
 80018ea:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	72da      	strb	r2, [r3, #11]
      current_values.uart_send = 0;
 80018f0:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	739a      	strb	r2, [r3, #14]
      switch (selected_event)
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <AN_fsm_config+0x56>
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 80c6 	bne.w	8001a8e <AN_fsm_config+0x1e2>
	{
	case pressed_change:
	case pressed:
	  *selected_state = not_on;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	701a      	strb	r2, [r3, #0]
	  current_values.fill = 1;
 8001908:	4b67      	ldr	r3, [pc, #412]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 800190a:	2201      	movs	r2, #1
 800190c:	729a      	strb	r2, [r3, #10]
	  break;
 800190e:	bf00      	nop
	}
      break;
 8001910:	e0bd      	b.n	8001a8e <AN_fsm_config+0x1e2>
    case not_on:
      current_values.option = inputs_cp.encoder.position;
 8001912:	8b3a      	ldrh	r2, [r7, #24]
 8001914:	4b64      	ldr	r3, [pc, #400]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001916:	811a      	strh	r2, [r3, #8]
      switch (selected_event)
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d002      	beq.n	8001924 <AN_fsm_config+0x78>
 800191e:	2b03      	cmp	r3, #3
 8001920:	f040 80b7 	bne.w	8001a92 <AN_fsm_config+0x1e6>
	{
	case not_change:
	case not_pressed:
	  current_values.fill = 0;
 8001924:	4b60      	ldr	r3, [pc, #384]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001926:	2200      	movs	r2, #0
 8001928:	729a      	strb	r2, [r3, #10]
	  *selected_state = sel_off;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
	  old_values.option = inputs_cp.encoder.position;
 8001930:	8b3a      	ldrh	r2, [r7, #24]
 8001932:	4b5e      	ldr	r3, [pc, #376]	@ (8001aac <AN_fsm_config+0x200>)
 8001934:	811a      	strh	r2, [r3, #8]
	  old_values.pwm_state = current_values.pwm_state;
 8001936:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <AN_fsm_config+0x200>)
 8001938:	4a5b      	ldr	r2, [pc, #364]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 800193a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800193e:	e883 0003 	stmia.w	r3, {r0, r1}
	  break;
 8001942:	bf00      	nop
	}
      break;
 8001944:	e0a5      	b.n	8001a92 <AN_fsm_config+0x1e6>
    case sel_off:
      current_values.option = old_values.option;
 8001946:	4b59      	ldr	r3, [pc, #356]	@ (8001aac <AN_fsm_config+0x200>)
 8001948:	891a      	ldrh	r2, [r3, #8]
 800194a:	4b57      	ldr	r3, [pc, #348]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 800194c:	811a      	strh	r2, [r3, #8]
      switch (selected_event)
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b03      	cmp	r3, #3
 8001952:	f200 80a0 	bhi.w	8001a96 <AN_fsm_config+0x1ea>
 8001956:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <AN_fsm_config+0xb0>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	0800196d 	.word	0x0800196d
 8001960:	08001975 	.word	0x08001975
 8001964:	0800196d 	.word	0x0800196d
 8001968:	08001975 	.word	0x08001975
	{
	case pressed_change:
	case pressed:
	  *selected_state = sel_on;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	  break;
 8001972:	e060      	b.n	8001a36 <AN_fsm_config+0x18a>
	case not_change:
	case not_pressed:
	  switch (current_values.option % 4)
 8001974:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001976:	891b      	ldrh	r3, [r3, #8]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b03      	cmp	r3, #3
 800197e:	d046      	beq.n	8001a0e <AN_fsm_config+0x162>
 8001980:	2b03      	cmp	r3, #3
 8001982:	f300 8088 	bgt.w	8001a96 <AN_fsm_config+0x1ea>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <AN_fsm_config+0xe4>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d011      	beq.n	80019b2 <AN_fsm_config+0x106>
	      break;
	    default:
	    }
	default:
	}
      break;
 800198e:	e082      	b.n	8001a96 <AN_fsm_config+0x1ea>
		  old_values.option,
 8001990:	4b46      	ldr	r3, [pc, #280]	@ (8001aac <AN_fsm_config+0x200>)
 8001992:	891b      	ldrh	r3, [r3, #8]
	      current_values.pwm_state.amp = AN_wrap_value (
 8001994:	4618      	mov	r0, r3
		  inputs_cp.encoder.position + old_values.pwm_state.amp, 34);
 8001996:	8b3b      	ldrh	r3, [r7, #24]
 8001998:	461a      	mov	r2, r3
 800199a:	4b44      	ldr	r3, [pc, #272]	@ (8001aac <AN_fsm_config+0x200>)
 800199c:	791b      	ldrb	r3, [r3, #4]
 800199e:	4413      	add	r3, r2
	      current_values.pwm_state.amp = AN_wrap_value (
 80019a0:	2222      	movs	r2, #34	@ 0x22
 80019a2:	4619      	mov	r1, r3
 80019a4:	f000 fc74 	bl	8002290 <AN_wrap_value>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 80019ae:	711a      	strb	r2, [r3, #4]
	      break;
 80019b0:	e041      	b.n	8001a36 <AN_fsm_config+0x18a>
	      current_values.pwm_state.freq = WRAP_FREQ(
 80019b2:	4b3e      	ldr	r3, [pc, #248]	@ (8001aac <AN_fsm_config+0x200>)
 80019b4:	891b      	ldrh	r3, [r3, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	8b3b      	ldrh	r3, [r7, #24]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aac <AN_fsm_config+0x200>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80019c6:	4619      	mov	r1, r3
 80019c8:	f000 fc62 	bl	8002290 <AN_wrap_value>
 80019cc:	4603      	mov	r3, r0
 80019ce:	1f19      	subs	r1, r3, #4
 80019d0:	4b37      	ldr	r3, [pc, #220]	@ (8001ab0 <AN_fsm_config+0x204>)
 80019d2:	fb83 2301 	smull	r2, r3, r3, r1
 80019d6:	11da      	asrs	r2, r3, #7
 80019d8:	17cb      	asrs	r3, r1, #31
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	4613      	mov	r3, r2
 80019de:	015b      	lsls	r3, r3, #5
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4413      	add	r3, r2
 80019e6:	1aca      	subs	r2, r1, r3
 80019e8:	f202 11f1 	addw	r1, r2, #497	@ 0x1f1
 80019ec:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <AN_fsm_config+0x204>)
 80019ee:	fb83 2301 	smull	r2, r3, r3, r1
 80019f2:	11da      	asrs	r2, r3, #7
 80019f4:	17cb      	asrs	r3, r1, #31
 80019f6:	1ad2      	subs	r2, r2, r3
 80019f8:	4613      	mov	r3, r2
 80019fa:	015b      	lsls	r3, r3, #5
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	1aca      	subs	r2, r1, r3
 8001a04:	1d13      	adds	r3, r2, #4
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a0a:	601a      	str	r2, [r3, #0]
	      break;
 8001a0c:	e013      	b.n	8001a36 <AN_fsm_config+0x18a>
	      current_values.fft_encoder_mode++;
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a18:	735a      	strb	r2, [r3, #13]
	      current_values.fft_encoder_mode = current_values.fft_encoder_mode
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a1c:	7b5a      	ldrb	r2, [r3, #13]
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <AN_fsm_config+0x208>)
 8001a20:	fba3 1302 	umull	r1, r3, r3, r2
 8001a24:	0859      	lsrs	r1, r3, #1
 8001a26:	460b      	mov	r3, r1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a32:	735a      	strb	r2, [r3, #13]
	      break;
 8001a34:	bf00      	nop
      break;
 8001a36:	e02e      	b.n	8001a96 <AN_fsm_config+0x1ea>
    case sel_on:
      current_values.fill = 0;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	729a      	strb	r2, [r3, #10]
      current_values.option = old_values.option;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <AN_fsm_config+0x200>)
 8001a40:	891a      	ldrh	r2, [r3, #8]
 8001a42:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a44:	811a      	strh	r2, [r3, #8]
      switch (selected_event)
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <AN_fsm_config+0x1a4>
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d11c      	bne.n	8001a8a <AN_fsm_config+0x1de>
	{
	case not_change:
	case not_pressed:
	  *selected_state = not_off;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
	  current_values.update_pwm = 1;
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	72da      	strb	r2, [r3, #11]
	  current_values.fill = 1;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	729a      	strb	r2, [r3, #10]
	  if (current_values.option % 4 == 2)
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a64:	891b      	ldrh	r3, [r3, #8]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d101      	bne.n	8001a74 <AN_fsm_config+0x1c8>
	    AN_send_uart ();
 8001a70:	f7ff fb2a 	bl	80010c8 <AN_send_uart>
	  if (current_values.fft_encoder_mode != 0)
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a76:	7b5b      	ldrb	r3, [r3, #13]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <AN_fsm_config+0x1dc>
	    pwm_set = current_values;
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab8 <AN_fsm_config+0x20c>)
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <AN_fsm_config+0x1fc>)
 8001a80:	4614      	mov	r4, r2
 8001a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  break;
 8001a88:	bf00      	nop
	default:
	}
    default:
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e004      	b.n	8001a98 <AN_fsm_config+0x1ec>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e002      	b.n	8001a98 <AN_fsm_config+0x1ec>
      break;
 8001a92:	bf00      	nop
 8001a94:	e000      	b.n	8001a98 <AN_fsm_config+0x1ec>
      break;
 8001a96:	bf00      	nop
    }
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001aa2:	b002      	add	sp, #8
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000028 	.word	0x20000028
 8001aac:	200012bc 	.word	0x200012bc
 8001ab0:	41ee7ca7 	.word	0x41ee7ca7
 8001ab4:	aaaaaaab 	.word	0xaaaaaaab
 8001ab8:	200012cc 	.word	0x200012cc

08001abc <AN_draw_menu>:
 *   @filled: determines if the arrow will be filled or not (0-1)
 */
void
AN_draw_menu (uint8_t pos, uint8_t filled, uint8_t regen, char *str_element_0,
	      char *str_element_1)
{
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af04      	add	r7, sp, #16
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	71bb      	strb	r3, [r7, #6]
 8001acc:	4613      	mov	r3, r2
 8001ace:	717b      	strb	r3, [r7, #5]
  pos = pos % 4;
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	71fb      	strb	r3, [r7, #7]
  filled = filled % 2;
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	71bb      	strb	r3, [r7, #6]
  SSD1306_DrawFilledRectangle (
      0, 0, triangle_config.padding_x + triangle_config.offset_x - 1,
 8001ae0:	4b79      	ldr	r3, [pc, #484]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b78      	ldr	r3, [pc, #480]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
  SSD1306_DrawFilledRectangle (
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2340      	movs	r3, #64	@ 0x40
 8001af8:	2100      	movs	r1, #0
 8001afa:	2000      	movs	r0, #0
 8001afc:	f002 f99e 	bl	8003e3c <SSD1306_DrawFilledRectangle>
      SSD1306_HEIGHT,
      SSD1306_COLOR_BLACK);
  if (filled == 1)
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d138      	bne.n	8001b78 <AN_draw_menu+0xbc>
    {
      SSD1306_DrawFilledTriangle (
	  triangle_config.offset_x,
 8001b06:	4b70      	ldr	r3, [pc, #448]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b08:	789b      	ldrb	r3, [r3, #2]
      SSD1306_DrawFilledTriangle (
 8001b0a:	461e      	mov	r6, r3
	  triangle_config.padding_y + 1 + pos * triangle_config.size_rec,
 8001b0c:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	496c      	ldr	r1, [pc, #432]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b16:	78c9      	ldrb	r1, [r1, #3]
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
      SSD1306_DrawFilledTriangle (
 8001b1c:	18d0      	adds	r0, r2, r3
	  triangle_config.offset_x,
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b20:	789b      	ldrb	r3, [r3, #2]
      SSD1306_DrawFilledTriangle (
 8001b22:	469c      	mov	ip, r3
	  triangle_config.padding_y + 1 + triangle_config.width_arrow
 8001b24:	4b68      	ldr	r3, [pc, #416]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	4a67      	ldr	r2, [pc, #412]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b2c:	7952      	ldrb	r2, [r2, #5]
 8001b2e:	441a      	add	r2, r3
	      + pos * triangle_config.size_rec,
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4965      	ldr	r1, [pc, #404]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b34:	78c9      	ldrb	r1, [r1, #3]
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
      SSD1306_DrawFilledTriangle (
 8001b3a:	18d4      	adds	r4, r2, r3
	  triangle_config.padding_x + triangle_config.offset_x - 1,
 8001b3c:	4b62      	ldr	r3, [pc, #392]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b61      	ldr	r3, [pc, #388]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b44:	789b      	ldrb	r3, [r3, #2]
 8001b46:	4413      	add	r3, r2
      SSD1306_DrawFilledTriangle (
 8001b48:	3b01      	subs	r3, #1
	  triangle_config.padding_y + 1 + triangle_config.heigth_arrow
 8001b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	3201      	adds	r2, #1
 8001b50:	495d      	ldr	r1, [pc, #372]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b52:	7989      	ldrb	r1, [r1, #6]
 8001b54:	4411      	add	r1, r2
	      + pos * triangle_config.size_rec,
 8001b56:	79fa      	ldrb	r2, [r7, #7]
 8001b58:	4d5b      	ldr	r5, [pc, #364]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b5a:	78ed      	ldrb	r5, [r5, #3]
 8001b5c:	fb05 f202 	mul.w	r2, r5, r2
      SSD1306_DrawFilledTriangle (
 8001b60:	440a      	add	r2, r1
 8001b62:	2101      	movs	r1, #1
 8001b64:	9102      	str	r1, [sp, #8]
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	4662      	mov	r2, ip
 8001b6e:	4601      	mov	r1, r0
 8001b70:	4630      	mov	r0, r6
 8001b72:	f002 f9e1 	bl	8003f38 <SSD1306_DrawFilledTriangle>
 8001b76:	e04a      	b.n	8001c0e <AN_draw_menu+0x152>
	  SSD1306_COLOR_WHITE);
    }
  else
    {
      SSD1306_DrawTriangle (
	  triangle_config.offset_x,
 8001b78:	4b53      	ldr	r3, [pc, #332]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
      SSD1306_DrawTriangle (
 8001b7c:	461e      	mov	r6, r3
	  triangle_config.padding_y + 1 + pos * triangle_config.size_rec,
 8001b7e:	4b52      	ldr	r3, [pc, #328]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b8a:	78d2      	ldrb	r2, [r2, #3]
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	440b      	add	r3, r1
 8001b94:	b29b      	uxth	r3, r3
      SSD1306_DrawTriangle (
 8001b96:	3301      	adds	r3, #1
 8001b98:	b298      	uxth	r0, r3
	  triangle_config.offset_x,
 8001b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001b9c:	789b      	ldrb	r3, [r3, #2]
      SSD1306_DrawTriangle (
 8001b9e:	469c      	mov	ip, r3
	  triangle_config.padding_y + 1 + triangle_config.width_arrow
 8001ba0:	4b49      	ldr	r3, [pc, #292]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b48      	ldr	r3, [pc, #288]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001ba8:	795b      	ldrb	r3, [r3, #5]
 8001baa:	4413      	add	r3, r2
 8001bac:	b29a      	uxth	r2, r3
	      + pos * triangle_config.size_rec,
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4945      	ldr	r1, [pc, #276]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001bb4:	78c9      	ldrb	r1, [r1, #3]
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
      SSD1306_DrawTriangle (
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b29c      	uxth	r4, r3
	  triangle_config.padding_x + triangle_config.offset_x - 1,
 8001bc4:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
      SSD1306_DrawTriangle (
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29b      	uxth	r3, r3
	  triangle_config.padding_y + 1 + triangle_config.heigth_arrow
 8001bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001bde:	7992      	ldrb	r2, [r2, #6]
 8001be0:	440a      	add	r2, r1
 8001be2:	b291      	uxth	r1, r2
	      + pos * triangle_config.size_rec,
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	b292      	uxth	r2, r2
 8001be8:	4d37      	ldr	r5, [pc, #220]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001bea:	78ed      	ldrb	r5, [r5, #3]
 8001bec:	fb05 f202 	mul.w	r2, r5, r2
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	440a      	add	r2, r1
 8001bf4:	b292      	uxth	r2, r2
      SSD1306_DrawTriangle (
 8001bf6:	3201      	adds	r2, #1
 8001bf8:	b292      	uxth	r2, r2
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	9102      	str	r1, [sp, #8]
 8001bfe:	9201      	str	r2, [sp, #4]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4623      	mov	r3, r4
 8001c04:	4662      	mov	r2, ip
 8001c06:	4601      	mov	r1, r0
 8001c08:	4630      	mov	r0, r6
 8001c0a:	f002 f964 	bl	8003ed6 <SSD1306_DrawTriangle>
	  SSD1306_COLOR_WHITE);
    }

  if (regen == 1)
 8001c0e:	797b      	ldrb	r3, [r7, #5]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f040 819b 	bne.w	8001f4c <AN_draw_menu+0x490>
    {
      SSD1306_Fill (SSD1306_COLOR_BLACK);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f001 fe7c 	bl	8003914 <SSD1306_Fill>
      for (uint8_t i = 0; i < 4; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e180      	b.n	8001f24 <AN_draw_menu+0x468>
	{
	  SSD1306_DrawRectangle (
	      triangle_config.padding_x + triangle_config.offset_x,
 8001c22:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c2a:	789b      	ldrb	r3, [r3, #2]
	  SSD1306_DrawRectangle (
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b298      	uxth	r0, r3
	      triangle_config.padding_y + i * triangle_config.size_rec,
 8001c30:	4b25      	ldr	r3, [pc, #148]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4a23      	ldr	r2, [pc, #140]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c3c:	78d2      	ldrb	r2, [r2, #3]
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	b29b      	uxth	r3, r3
	  SSD1306_DrawRectangle (
 8001c44:	440b      	add	r3, r1
 8001c46:	b299      	uxth	r1, r3
	      triangle_config.length_rec, triangle_config.heigth_rec,
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c4a:	79db      	ldrb	r3, [r3, #7]
	  SSD1306_DrawRectangle (
 8001c4c:	461a      	mov	r2, r3
	      triangle_config.length_rec, triangle_config.heigth_rec,
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c50:	791b      	ldrb	r3, [r3, #4]
	  SSD1306_DrawRectangle (
 8001c52:	461c      	mov	r4, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4623      	mov	r3, r4
 8001c5a:	f002 f885 	bl	8003d68 <SSD1306_DrawRectangle>
	      SSD1306_COLOR_WHITE);
	  SSD1306_GotoXY (
	      triangle_config.padding_x + triangle_config.offset_x + 2,
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
	  SSD1306_GotoXY (
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	b29a      	uxth	r2, r3
	      triangle_config.padding_y + i * triangle_config.size_rec + 2);
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4913      	ldr	r1, [pc, #76]	@ (8001cc8 <AN_draw_menu+0x20c>)
 8001c7c:	78c9      	ldrb	r1, [r1, #3]
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4403      	add	r3, r0
 8001c86:	b29b      	uxth	r3, r3
	  SSD1306_GotoXY (
 8001c88:	3302      	adds	r3, #2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f001 feb6 	bl	8003a00 <SSD1306_GotoXY>
	  SSD1306_Puts (strings[i], &Font_7x10, SSD1306_COLOR_WHITE);
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <AN_draw_menu+0x210>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	490a      	ldr	r1, [pc, #40]	@ (8001cd0 <AN_draw_menu+0x214>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 ff3d 	bl	8003b28 <SSD1306_Puts>
	  switch (i)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	f000 80dd 	beq.w	8001e70 <AN_draw_menu+0x3b4>
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	f300 8131 	bgt.w	8001f1e <AN_draw_menu+0x462>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <AN_draw_menu+0x218>
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d06e      	beq.n	8001da2 <AN_draw_menu+0x2e6>
 8001cc4:	e12b      	b.n	8001f1e <AN_draw_menu+0x462>
 8001cc6:	bf00      	nop
 8001cc8:	2000008c 	.word	0x2000008c
 8001ccc:	20000038 	.word	0x20000038
 8001cd0:	200008ac 	.word	0x200008ac
	    {
	    case 0:
	      SSD1306_DrawRectangle (
		  triangle_config.padding_x + triangle_config.offset_x,
 8001cd4:	4b96      	ldr	r3, [pc, #600]	@ (8001f30 <AN_draw_menu+0x474>)
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b95      	ldr	r3, [pc, #596]	@ (8001f30 <AN_draw_menu+0x474>)
 8001cdc:	789b      	ldrb	r3, [r3, #2]
	      SSD1306_DrawRectangle (
 8001cde:	4413      	add	r3, r2
 8001ce0:	b298      	uxth	r0, r3
		  triangle_config.padding_y + i * triangle_config.size_rec,
 8001ce2:	4b93      	ldr	r3, [pc, #588]	@ (8001f30 <AN_draw_menu+0x474>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4a90      	ldr	r2, [pc, #576]	@ (8001f30 <AN_draw_menu+0x474>)
 8001cee:	78d2      	ldrb	r2, [r2, #3]
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	b29b      	uxth	r3, r3
	      SSD1306_DrawRectangle (
 8001cf6:	440b      	add	r3, r1
 8001cf8:	b299      	uxth	r1, r3
		  triangle_config.length_rec, triangle_config.heigth_rec,
 8001cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8001f30 <AN_draw_menu+0x474>)
 8001cfc:	79db      	ldrb	r3, [r3, #7]
	      SSD1306_DrawRectangle (
 8001cfe:	461a      	mov	r2, r3
		  triangle_config.length_rec, triangle_config.heigth_rec,
 8001d00:	4b8b      	ldr	r3, [pc, #556]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d02:	791b      	ldrb	r3, [r3, #4]
	      SSD1306_DrawRectangle (
 8001d04:	461c      	mov	r4, r3
 8001d06:	2301      	movs	r3, #1
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	f002 f82c 	bl	8003d68 <SSD1306_DrawRectangle>
		  SSD1306_COLOR_WHITE);
	      SSD1306_GotoXY (
		  triangle_config.padding_x + triangle_config.offset_x + 2,
 8001d10:	4b87      	ldr	r3, [pc, #540]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b86      	ldr	r3, [pc, #536]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d18:	789b      	ldrb	r3, [r3, #2]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001d1e:	3302      	adds	r3, #2
 8001d20:	b29a      	uxth	r2, r3
		  triangle_config.padding_y + i * triangle_config.size_rec + 2);
 8001d22:	4b83      	ldr	r3, [pc, #524]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4980      	ldr	r1, [pc, #512]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d2e:	78c9      	ldrb	r1, [r1, #3]
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4403      	add	r3, r0
 8001d38:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f001 fe5d 	bl	8003a00 <SSD1306_GotoXY>
	      SSD1306_Puts (strings[i], &Font_7x10, SSD1306_COLOR_WHITE);
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	4a78      	ldr	r2, [pc, #480]	@ (8001f34 <AN_draw_menu+0x478>)
 8001d54:	4413      	add	r3, r2
 8001d56:	2201      	movs	r2, #1
 8001d58:	4977      	ldr	r1, [pc, #476]	@ (8001f38 <AN_draw_menu+0x47c>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 fee4 	bl	8003b28 <SSD1306_Puts>
	      SSD1306_GotoXY (
		  triangle_config.padding_x + triangle_config.offset_x + 2
 8001d60:	4b73      	ldr	r3, [pc, #460]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b72      	ldr	r3, [pc, #456]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d68:	789b      	ldrb	r3, [r3, #2]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001d6e:	332f      	adds	r3, #47	@ 0x2f
 8001d70:	b29a      	uxth	r2, r3
		      + 6 * 7 + 3,
		  triangle_config.padding_y + i * triangle_config.size_rec + 2);
 8001d72:	4b6f      	ldr	r3, [pc, #444]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	496c      	ldr	r1, [pc, #432]	@ (8001f30 <AN_draw_menu+0x474>)
 8001d7e:	78c9      	ldrb	r1, [r1, #3]
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4403      	add	r3, r0
 8001d88:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f001 fe35 	bl	8003a00 <SSD1306_GotoXY>
	      SSD1306_Puts (str_element_0, &Font_7x10, SSD1306_COLOR_WHITE);
 8001d96:	2201      	movs	r2, #1
 8001d98:	4967      	ldr	r1, [pc, #412]	@ (8001f38 <AN_draw_menu+0x47c>)
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f001 fec4 	bl	8003b28 <SSD1306_Puts>
	      break;
 8001da0:	e0bd      	b.n	8001f1e <AN_draw_menu+0x462>
	    case 1:
	      SSD1306_DrawRectangle (
		  triangle_config.padding_x + triangle_config.offset_x,
 8001da2:	4b63      	ldr	r3, [pc, #396]	@ (8001f30 <AN_draw_menu+0x474>)
 8001da4:	785b      	ldrb	r3, [r3, #1]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b61      	ldr	r3, [pc, #388]	@ (8001f30 <AN_draw_menu+0x474>)
 8001daa:	789b      	ldrb	r3, [r3, #2]
	      SSD1306_DrawRectangle (
 8001dac:	4413      	add	r3, r2
 8001dae:	b298      	uxth	r0, r3
		  triangle_config.padding_y + i * triangle_config.size_rec,
 8001db0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f30 <AN_draw_menu+0x474>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4a5d      	ldr	r2, [pc, #372]	@ (8001f30 <AN_draw_menu+0x474>)
 8001dbc:	78d2      	ldrb	r2, [r2, #3]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	b29b      	uxth	r3, r3
	      SSD1306_DrawRectangle (
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b299      	uxth	r1, r3
		  triangle_config.length_rec, triangle_config.heigth_rec,
 8001dc8:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <AN_draw_menu+0x474>)
 8001dca:	79db      	ldrb	r3, [r3, #7]
	      SSD1306_DrawRectangle (
 8001dcc:	461a      	mov	r2, r3
		  triangle_config.length_rec, triangle_config.heigth_rec,
 8001dce:	4b58      	ldr	r3, [pc, #352]	@ (8001f30 <AN_draw_menu+0x474>)
 8001dd0:	791b      	ldrb	r3, [r3, #4]
	      SSD1306_DrawRectangle (
 8001dd2:	461c      	mov	r4, r3
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4623      	mov	r3, r4
 8001dda:	f001 ffc5 	bl	8003d68 <SSD1306_DrawRectangle>
		  SSD1306_COLOR_WHITE);
	      SSD1306_GotoXY (
		  triangle_config.padding_x + triangle_config.offset_x + 2,
 8001dde:	4b54      	ldr	r3, [pc, #336]	@ (8001f30 <AN_draw_menu+0x474>)
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b52      	ldr	r3, [pc, #328]	@ (8001f30 <AN_draw_menu+0x474>)
 8001de6:	789b      	ldrb	r3, [r3, #2]
 8001de8:	4413      	add	r3, r2
 8001dea:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001dec:	3302      	adds	r3, #2
 8001dee:	b29a      	uxth	r2, r3
		  triangle_config.padding_y + i * triangle_config.size_rec + 2);
 8001df0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f30 <AN_draw_menu+0x474>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	494d      	ldr	r1, [pc, #308]	@ (8001f30 <AN_draw_menu+0x474>)
 8001dfc:	78c9      	ldrb	r1, [r1, #3]
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4403      	add	r3, r0
 8001e06:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001e08:	3302      	adds	r3, #2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f001 fdf6 	bl	8003a00 <SSD1306_GotoXY>
	      SSD1306_Puts (strings[i], &Font_7x10, SSD1306_COLOR_WHITE);
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a44      	ldr	r2, [pc, #272]	@ (8001f34 <AN_draw_menu+0x478>)
 8001e22:	4413      	add	r3, r2
 8001e24:	2201      	movs	r2, #1
 8001e26:	4944      	ldr	r1, [pc, #272]	@ (8001f38 <AN_draw_menu+0x47c>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 fe7d 	bl	8003b28 <SSD1306_Puts>
	      SSD1306_GotoXY (
		  triangle_config.padding_x + triangle_config.offset_x + 2
 8001e2e:	4b40      	ldr	r3, [pc, #256]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b3e      	ldr	r3, [pc, #248]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e36:	789b      	ldrb	r3, [r3, #2]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001e3c:	332f      	adds	r3, #47	@ 0x2f
 8001e3e:	b29a      	uxth	r2, r3
		      + 6 * 7 + 3,
		  triangle_config.padding_y + i * triangle_config.size_rec + 2);
 8001e40:	4b3b      	ldr	r3, [pc, #236]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4939      	ldr	r1, [pc, #228]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e4c:	78c9      	ldrb	r1, [r1, #3]
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4403      	add	r3, r0
 8001e56:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001e58:	3302      	adds	r3, #2
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f001 fdce 	bl	8003a00 <SSD1306_GotoXY>
	      SSD1306_Puts (str_element_1, &Font_7x10, SSD1306_COLOR_WHITE);
 8001e64:	2201      	movs	r2, #1
 8001e66:	4934      	ldr	r1, [pc, #208]	@ (8001f38 <AN_draw_menu+0x47c>)
 8001e68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e6a:	f001 fe5d 	bl	8003b28 <SSD1306_Puts>
	      break;
 8001e6e:	e056      	b.n	8001f1e <AN_draw_menu+0x462>
	    case 3:
	      SSD1306_DrawRectangle (
		  triangle_config.padding_x + triangle_config.offset_x,
 8001e70:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e78:	789b      	ldrb	r3, [r3, #2]
	      SSD1306_DrawRectangle (
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b298      	uxth	r0, r3
		  triangle_config.padding_y + i * triangle_config.size_rec,
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	4619      	mov	r1, r3
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4a29      	ldr	r2, [pc, #164]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e8a:	78d2      	ldrb	r2, [r2, #3]
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	b29b      	uxth	r3, r3
	      SSD1306_DrawRectangle (
 8001e92:	440b      	add	r3, r1
 8001e94:	b299      	uxth	r1, r3
		  triangle_config.length_rec, triangle_config.heigth_rec,
 8001e96:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e98:	79db      	ldrb	r3, [r3, #7]
	      SSD1306_DrawRectangle (
 8001e9a:	461a      	mov	r2, r3
		  triangle_config.length_rec, triangle_config.heigth_rec,
 8001e9c:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <AN_draw_menu+0x474>)
 8001e9e:	791b      	ldrb	r3, [r3, #4]
	      SSD1306_DrawRectangle (
 8001ea0:	461c      	mov	r4, r3
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	f001 ff5e 	bl	8003d68 <SSD1306_DrawRectangle>
		  SSD1306_COLOR_WHITE);
	      SSD1306_GotoXY (
		  triangle_config.padding_x + triangle_config.offset_x + 2,
 8001eac:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <AN_draw_menu+0x474>)
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <AN_draw_menu+0x474>)
 8001eb4:	789b      	ldrb	r3, [r3, #2]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001eba:	3302      	adds	r3, #2
 8001ebc:	b29a      	uxth	r2, r3
		  triangle_config.padding_y + i * triangle_config.size_rec + 2);
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <AN_draw_menu+0x474>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4919      	ldr	r1, [pc, #100]	@ (8001f30 <AN_draw_menu+0x474>)
 8001eca:	78c9      	ldrb	r1, [r1, #3]
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4403      	add	r3, r0
 8001ed4:	b29b      	uxth	r3, r3
	      SSD1306_GotoXY (
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f001 fd8f 	bl	8003a00 <SSD1306_GotoXY>
	      switch (current_values.fft_encoder_mode)
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <AN_draw_menu+0x480>)
 8001ee4:	7b5b      	ldrb	r3, [r3, #13]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d012      	beq.n	8001f10 <AN_draw_menu+0x454>
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	dc16      	bgt.n	8001f1c <AN_draw_menu+0x460>
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <AN_draw_menu+0x43c>
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d006      	beq.n	8001f04 <AN_draw_menu+0x448>
		case 2:
		  SSD1306_Puts (cursor_selec_amp, &Font_7x10,
				SSD1306_COLOR_WHITE);
		  break;
		}
	      break;
 8001ef6:	e011      	b.n	8001f1c <AN_draw_menu+0x460>
		  SSD1306_Puts (strings[3], &Font_7x10, SSD1306_COLOR_WHITE);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	490f      	ldr	r1, [pc, #60]	@ (8001f38 <AN_draw_menu+0x47c>)
 8001efc:	4810      	ldr	r0, [pc, #64]	@ (8001f40 <AN_draw_menu+0x484>)
 8001efe:	f001 fe13 	bl	8003b28 <SSD1306_Puts>
		  break;
 8001f02:	e00b      	b.n	8001f1c <AN_draw_menu+0x460>
		  SSD1306_Puts (cursor_selec, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f04:	2201      	movs	r2, #1
 8001f06:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <AN_draw_menu+0x47c>)
 8001f08:	480e      	ldr	r0, [pc, #56]	@ (8001f44 <AN_draw_menu+0x488>)
 8001f0a:	f001 fe0d 	bl	8003b28 <SSD1306_Puts>
		  break;
 8001f0e:	e005      	b.n	8001f1c <AN_draw_menu+0x460>
		  SSD1306_Puts (cursor_selec_amp, &Font_7x10,
 8001f10:	2201      	movs	r2, #1
 8001f12:	4909      	ldr	r1, [pc, #36]	@ (8001f38 <AN_draw_menu+0x47c>)
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <AN_draw_menu+0x48c>)
 8001f16:	f001 fe07 	bl	8003b28 <SSD1306_Puts>
		  break;
 8001f1a:	bf00      	nop
	      break;
 8001f1c:	bf00      	nop
      for (uint8_t i = 0; i < 4; i++)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	3301      	adds	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	f67f ae7b 	bls.w	8001c22 <AN_draw_menu+0x166>
	    default:
	    }
	}
      return;
 8001f2c:	e076      	b.n	800201c <AN_draw_menu+0x560>
 8001f2e:	bf00      	nop
 8001f30:	2000008c 	.word	0x2000008c
 8001f34:	20000038 	.word	0x20000038
 8001f38:	200008ac 	.word	0x200008ac
 8001f3c:	20000028 	.word	0x20000028
 8001f40:	2000005f 	.word	0x2000005f
 8001f44:	2000006c 	.word	0x2000006c
 8001f48:	2000007c 	.word	0x2000007c
    }
  SSD1306_GotoXY (
      triangle_config.padding_x + triangle_config.offset_x + 2 + 6 * 7 + 3,
 8001f4c:	4b35      	ldr	r3, [pc, #212]	@ (8002024 <AN_draw_menu+0x568>)
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <AN_draw_menu+0x568>)
 8001f54:	789b      	ldrb	r3, [r3, #2]
 8001f56:	4413      	add	r3, r2
 8001f58:	b29b      	uxth	r3, r3
  SSD1306_GotoXY (
 8001f5a:	332f      	adds	r3, #47	@ 0x2f
 8001f5c:	b29b      	uxth	r3, r3
      triangle_config.padding_y + 2);
 8001f5e:	4a31      	ldr	r2, [pc, #196]	@ (8002024 <AN_draw_menu+0x568>)
 8001f60:	7812      	ldrb	r2, [r2, #0]
  SSD1306_GotoXY (
 8001f62:	3202      	adds	r2, #2
 8001f64:	b292      	uxth	r2, r2
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 fd49 	bl	8003a00 <SSD1306_GotoXY>
  SSD1306_Puts (str_element_0, &Font_7x10, SSD1306_COLOR_WHITE);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	492d      	ldr	r1, [pc, #180]	@ (8002028 <AN_draw_menu+0x56c>)
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f001 fdd8 	bl	8003b28 <SSD1306_Puts>
  SSD1306_GotoXY (
      triangle_config.padding_x + triangle_config.offset_x + 2 + 6 * 7 + 3,
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <AN_draw_menu+0x568>)
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <AN_draw_menu+0x568>)
 8001f80:	789b      	ldrb	r3, [r3, #2]
 8001f82:	4413      	add	r3, r2
 8001f84:	b29b      	uxth	r3, r3
  SSD1306_GotoXY (
 8001f86:	332f      	adds	r3, #47	@ 0x2f
 8001f88:	b29a      	uxth	r2, r3
      triangle_config.padding_y + triangle_config.size_rec + 2);
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <AN_draw_menu+0x568>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <AN_draw_menu+0x568>)
 8001f92:	78db      	ldrb	r3, [r3, #3]
 8001f94:	440b      	add	r3, r1
 8001f96:	b29b      	uxth	r3, r3
  SSD1306_GotoXY (
 8001f98:	3302      	adds	r3, #2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f001 fd2e 	bl	8003a00 <SSD1306_GotoXY>
  SSD1306_Puts (str_element_1, &Font_7x10, SSD1306_COLOR_WHITE);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4920      	ldr	r1, [pc, #128]	@ (8002028 <AN_draw_menu+0x56c>)
 8001fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001faa:	f001 fdbd 	bl	8003b28 <SSD1306_Puts>
  SSD1306_GotoXY (triangle_config.padding_x + triangle_config.offset_x + 2,
 8001fae:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <AN_draw_menu+0x568>)
 8001fb0:	785b      	ldrb	r3, [r3, #1]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <AN_draw_menu+0x568>)
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	b29a      	uxth	r2, r3
		  triangle_config.padding_y + 3 * triangle_config.size_rec + 2);
 8001fc0:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <AN_draw_menu+0x568>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <AN_draw_menu+0x568>)
 8001fc8:	78db      	ldrb	r3, [r3, #3]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	0040      	lsls	r0, r0, #1
 8001fce:	4403      	add	r3, r0
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	b29b      	uxth	r3, r3
  SSD1306_GotoXY (triangle_config.padding_x + triangle_config.offset_x + 2,
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f001 fd0f 	bl	8003a00 <SSD1306_GotoXY>
 switch(current_values.fft_encoder_mode)
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <AN_draw_menu+0x570>)
 8001fe4:	7b5b      	ldrb	r3, [r3, #13]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d012      	beq.n	8002010 <AN_draw_menu+0x554>
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	dc16      	bgt.n	800201c <AN_draw_menu+0x560>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <AN_draw_menu+0x53c>
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d006      	beq.n	8002004 <AN_draw_menu+0x548>
 8001ff6:	e011      	b.n	800201c <AN_draw_menu+0x560>
  {
    case 0:
    SSD1306_Puts (strings[3], &Font_7x10, SSD1306_COLOR_WHITE);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	490b      	ldr	r1, [pc, #44]	@ (8002028 <AN_draw_menu+0x56c>)
 8001ffc:	480c      	ldr	r0, [pc, #48]	@ (8002030 <AN_draw_menu+0x574>)
 8001ffe:	f001 fd93 	bl	8003b28 <SSD1306_Puts>
    break;
 8002002:	e00b      	b.n	800201c <AN_draw_menu+0x560>
    case 1:
    SSD1306_Puts (cursor_selec, &Font_7x10, SSD1306_COLOR_WHITE);
 8002004:	2201      	movs	r2, #1
 8002006:	4908      	ldr	r1, [pc, #32]	@ (8002028 <AN_draw_menu+0x56c>)
 8002008:	480a      	ldr	r0, [pc, #40]	@ (8002034 <AN_draw_menu+0x578>)
 800200a:	f001 fd8d 	bl	8003b28 <SSD1306_Puts>
    break;
 800200e:	e005      	b.n	800201c <AN_draw_menu+0x560>
    case 2:
    SSD1306_Puts (cursor_selec_amp, &Font_7x10, SSD1306_COLOR_WHITE);
 8002010:	2201      	movs	r2, #1
 8002012:	4905      	ldr	r1, [pc, #20]	@ (8002028 <AN_draw_menu+0x56c>)
 8002014:	4808      	ldr	r0, [pc, #32]	@ (8002038 <AN_draw_menu+0x57c>)
 8002016:	f001 fd87 	bl	8003b28 <SSD1306_Puts>
    break;
 800201a:	bf00      	nop
  }
}
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002022:	bf00      	nop
 8002024:	2000008c 	.word	0x2000008c
 8002028:	200008ac 	.word	0x200008ac
 800202c:	20000028 	.word	0x20000028
 8002030:	2000005f 	.word	0x2000005f
 8002034:	2000006c 	.word	0x2000006c
 8002038:	2000007c 	.word	0x2000007c

0800203c <AN_set_cursor>:
 *   @cursor: Position to display arrow in x axis
 *   @color: Color to display the arrow
 */
void
AN_set_cursor (uint16_t cursor, SSD1306_COLOR_t color)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af02      	add	r7, sp, #8
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	80fb      	strh	r3, [r7, #6]
 8002048:	4613      	mov	r3, r2
 800204a:	717b      	strb	r3, [r7, #5]
uint16_t posx;
if (cursor >= SSD1306_WIDTH)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002050:	d902      	bls.n	8002058 <AN_set_cursor+0x1c>
posx = SSD1306_WIDTH - 2;
 8002052:	237e      	movs	r3, #126	@ 0x7e
 8002054:	81fb      	strh	r3, [r7, #14]
 8002056:	e007      	b.n	8002068 <AN_set_cursor+0x2c>
else if (cursor == 0)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <AN_set_cursor+0x28>
posx = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	81fb      	strh	r3, [r7, #14]
 8002062:	e001      	b.n	8002068 <AN_set_cursor+0x2c>
else
posx = cursor;
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	81fb      	strh	r3, [r7, #14]

SSD1306_DrawLine (posx, 0, posx, CURSOR_HEIGHT - 1, SSD1306_COLOR_WHITE);
 8002068:	89fa      	ldrh	r2, [r7, #14]
 800206a:	89f8      	ldrh	r0, [r7, #14]
 800206c:	2301      	movs	r3, #1
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2304      	movs	r3, #4
 8002072:	2100      	movs	r1, #0
 8002074:	f001 fd7d 	bl	8003b72 <SSD1306_DrawLine>
SSD1306_DrawPixel (posx - 1, CURSOR_HEIGHT - 2, SSD1306_COLOR_WHITE);
 8002078:	89fb      	ldrh	r3, [r7, #14]
 800207a:	3b01      	subs	r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	2201      	movs	r2, #1
 8002080:	2103      	movs	r1, #3
 8002082:	4618      	mov	r0, r3
 8002084:	f001 fc5e 	bl	8003944 <SSD1306_DrawPixel>
SSD1306_DrawPixel (posx + 1, CURSOR_HEIGHT - 2, SSD1306_COLOR_WHITE);
 8002088:	89fb      	ldrh	r3, [r7, #14]
 800208a:	3301      	adds	r3, #1
 800208c:	b29b      	uxth	r3, r3
 800208e:	2201      	movs	r2, #1
 8002090:	2103      	movs	r1, #3
 8002092:	4618      	mov	r0, r3
 8002094:	f001 fc56 	bl	8003944 <SSD1306_DrawPixel>

for (uint8_t posy = CURSOR_HEIGHT; posy < SSD1306_HEIGHT; posy = posy + 2)
 8002098:	2305      	movs	r3, #5
 800209a:	737b      	strb	r3, [r7, #13]
 800209c:	e009      	b.n	80020b2 <AN_set_cursor+0x76>
{
  SSD1306_DrawPixel (posx, posy, SSD1306_COLOR_WHITE);
 800209e:	7b7b      	ldrb	r3, [r7, #13]
 80020a0:	b299      	uxth	r1, r3
 80020a2:	89fb      	ldrh	r3, [r7, #14]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 fc4c 	bl	8003944 <SSD1306_DrawPixel>
for (uint8_t posy = CURSOR_HEIGHT; posy < SSD1306_HEIGHT; posy = posy + 2)
 80020ac:	7b7b      	ldrb	r3, [r7, #13]
 80020ae:	3302      	adds	r3, #2
 80020b0:	737b      	strb	r3, [r7, #13]
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80020b6:	d9f2      	bls.n	800209e <AN_set_cursor+0x62>
}
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	0000      	movs	r0, r0
 80020c4:	0000      	movs	r0, r0
	...

080020c8 <AN_pixel>:
 *   @value: fft value to be displayed on screen
 *   @fft_len: points of the fft used
 */
uint8_t
AN_pixel (complex_t value, uint16_t fft_len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
uint8_t pixely = (uint8_t) ((FFT_mod (value, fft_len) * DIS_HEIGHT) / MAX_V);
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	461a      	mov	r2, r3
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020e6:	f000 fc07 	bl	80028f8 <FFT_mod>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4912      	ldr	r1, [pc, #72]	@ (8002138 <AN_pixel+0x70>)
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fd7a 	bl	8000be8 <__aeabi_fmul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f98e 	bl	8000418 <__aeabi_f2d>
 80020fc:	a30c      	add	r3, pc, #48	@ (adr r3, 8002130 <AN_pixel+0x68>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fb0b 	bl	800071c <__aeabi_ddiv>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fbed 	bl	80008ec <__aeabi_d2uiz>
 8002112:	4603      	mov	r3, r0
 8002114:	75fb      	strb	r3, [r7, #23]
if (pixely > DIS_HEIGHT)
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b3b      	cmp	r3, #59	@ 0x3b
 800211a:	d901      	bls.n	8002120 <AN_pixel+0x58>
pixely = DIS_HEIGHT;
 800211c:	233b      	movs	r3, #59	@ 0x3b
 800211e:	75fb      	strb	r3, [r7, #23]
else if (pixely < 0)
pixely = 0;
return pixely;
 8002120:	7dfb      	ldrb	r3, [r7, #23]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w
 8002130:	66666666 	.word	0x66666666
 8002134:	400a6666 	.word	0x400a6666
 8002138:	426c0000 	.word	0x426c0000
 800213c:	00000000 	.word	0x00000000

08002140 <AN_fft_fast>:
 *   @adc_len: length of the adc array
 * @return: saves the values in the adc array
 */
void
AN_fft_fast (uint16_t *adc, uint16_t adc_len)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
float fft_temp;
if (adc_len > FFT_MAX)
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002152:	f200 808f 	bhi.w	8002274 <AN_fft_fast+0x134>
{
  return;
}
for (uint16_t i = 0; i < adc_len; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	81fb      	strh	r3, [r7, #14]
 800215a:	e02e      	b.n	80021ba <AN_fft_fast+0x7a>
{
  fft_screen_points[i].real = (float) adc[i] * 3.3 / ADC_SCALE;
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fce6 	bl	8000b38 <__aeabi_ui2f>
 800216c:	4603      	mov	r3, r0
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f952 	bl	8000418 <__aeabi_f2d>
 8002174:	a342      	add	r3, pc, #264	@ (adr r3, 8002280 <AN_fft_fast+0x140>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe f9a5 	bl	80004c8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b3f      	ldr	r3, [pc, #252]	@ (8002288 <AN_fft_fast+0x148>)
 800218c:	f7fe fac6 	bl	800071c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	89fc      	ldrh	r4, [r7, #14]
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fbc7 	bl	800092c <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a3a      	ldr	r2, [pc, #232]	@ (800228c <AN_fft_fast+0x14c>)
 80021a2:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
  fft_screen_points[i].imag = 0;
 80021a6:	89fb      	ldrh	r3, [r7, #14]
 80021a8:	4a38      	ldr	r2, [pc, #224]	@ (800228c <AN_fft_fast+0x14c>)
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
for (uint16_t i = 0; i < adc_len; i++)
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	3301      	adds	r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
 80021ba:	89fa      	ldrh	r2, [r7, #14]
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3cc      	bcc.n	800215c <AN_fft_fast+0x1c>
}
FFT (fft_screen_points, adc_len);
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	4619      	mov	r1, r3
 80021c6:	4831      	ldr	r0, [pc, #196]	@ (800228c <AN_fft_fast+0x14c>)
 80021c8:	f000 fa5c 	bl	8002684 <FFT>
fft_temp = FFT_mod (fft_screen_points[0], adc_len) / 2;
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	492f      	ldr	r1, [pc, #188]	@ (800228c <AN_fft_fast+0x14c>)
 80021d0:	461a      	mov	r2, r3
 80021d2:	c903      	ldmia	r1, {r0, r1}
 80021d4:	f000 fb90 	bl	80028f8 <FFT_mod>
 80021d8:	4603      	mov	r3, r0
 80021da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fdb6 	bl	8000d50 <__aeabi_fdiv>
 80021e4:	4603      	mov	r3, r0
 80021e6:	60bb      	str	r3, [r7, #8]
fft_screen_points[0].imag = (float) AN_pixel (fft_screen_points[0], adc_len)
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	4928      	ldr	r1, [pc, #160]	@ (800228c <AN_fft_fast+0x14c>)
 80021ec:	461a      	mov	r2, r3
 80021ee:	c903      	ldmia	r1, {r0, r1}
 80021f0:	f7ff ff6a 	bl	80020c8 <AN_pixel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fc9e 	bl	8000b38 <__aeabi_ui2f>
 80021fc:	4603      	mov	r3, r0
  / 2;
 80021fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fda4 	bl	8000d50 <__aeabi_fdiv>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
fft_screen_points[0].imag = (float) AN_pixel (fft_screen_points[0], adc_len)
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <AN_fft_fast+0x14c>)
 800220e:	605a      	str	r2, [r3, #4]
fft_screen_points[0].real = fft_temp;
 8002210:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <AN_fft_fast+0x14c>)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6013      	str	r3, [r2, #0]
for (uint16_t i = 1; i < adc_len / 2; i++)
 8002216:	2301      	movs	r3, #1
 8002218:	81bb      	strh	r3, [r7, #12]
 800221a:	e024      	b.n	8002266 <AN_fft_fast+0x126>
{
  fft_temp = FFT_mod (fft_screen_points[i], adc_len);
 800221c:	89bb      	ldrh	r3, [r7, #12]
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	491a      	ldr	r1, [pc, #104]	@ (800228c <AN_fft_fast+0x14c>)
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800222a:	f000 fb65 	bl	80028f8 <FFT_mod>
 800222e:	60b8      	str	r0, [r7, #8]
  fft_screen_points[i].imag = (float) AN_pixel (fft_screen_points[i], adc_len);
 8002230:	89bb      	ldrh	r3, [r7, #12]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	4915      	ldr	r1, [pc, #84]	@ (800228c <AN_fft_fast+0x14c>)
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800223e:	f7ff ff43 	bl	80020c8 <AN_pixel>
 8002242:	4603      	mov	r3, r0
 8002244:	89bc      	ldrh	r4, [r7, #12]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fc76 	bl	8000b38 <__aeabi_ui2f>
 800224c:	4602      	mov	r2, r0
 800224e:	490f      	ldr	r1, [pc, #60]	@ (800228c <AN_fft_fast+0x14c>)
 8002250:	00e3      	lsls	r3, r4, #3
 8002252:	440b      	add	r3, r1
 8002254:	605a      	str	r2, [r3, #4]
  fft_screen_points[i].real = fft_temp;
 8002256:	89bb      	ldrh	r3, [r7, #12]
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <AN_fft_fast+0x14c>)
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
for (uint16_t i = 1; i < adc_len / 2; i++)
 8002260:	89bb      	ldrh	r3, [r7, #12]
 8002262:	3301      	adds	r3, #1
 8002264:	81bb      	strh	r3, [r7, #12]
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	b29b      	uxth	r3, r3
 800226c:	89ba      	ldrh	r2, [r7, #12]
 800226e:	429a      	cmp	r2, r3
 8002270:	d3d4      	bcc.n	800221c <AN_fft_fast+0xdc>
 8002272:	e000      	b.n	8002276 <AN_fft_fast+0x136>
  return;
 8002274:	bf00      	nop
}
}
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	f3af 8000 	nop.w
 8002280:	66666666 	.word	0x66666666
 8002284:	400a6666 	.word	0x400a6666
 8002288:	40b00000 	.word	0x40b00000
 800228c:	20000938 	.word	0x20000938

08002290 <AN_wrap_value>:
}
}

uint16_t
AN_wrap_value (int32_t option, int32_t position, int32_t points)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
return (uint16_t) ((position - option) % points + points) % points;
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	fb01 f202 	mul.w	r2, r1, r2
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	fb01 f202 	mul.w	r2, r1, r2
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	b29b      	uxth	r3, r3
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <EN_get_value>:
 *@brief: gets the current state of the encoder
 *@return: current state of encoder
 */
encoder_t
EN_get_value ()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  encoder_event_t input = EN_get_inputs ();
 80022da:	f000 f99b 	bl	8002614 <EN_get_inputs>
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  EN_fsm (&encoder_state, input);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4619      	mov	r1, r3
 80022e6:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <EN_get_value+0x24>)
 80022e8:	f000 f8c2 	bl	8002470 <EN_fsm>
  return encoder;
 80022ec:	4b03      	ldr	r3, [pc, #12]	@ (80022fc <EN_get_value+0x28>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000094 	.word	0x20000094
 80022fc:	20000098 	.word	0x20000098

08002300 <EN_button>:
 *   @pin_state: current state of the pin to be read
 *   @button: pointer to a button struct definition
 */
void
EN_button (switch_t pin_state, button_t *button)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if (pin_state == on)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d103      	bne.n	800231a <EN_button+0x1a>
    (*button).button_event = set;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2202      	movs	r2, #2
 8002316:	719a      	strb	r2, [r3, #6]
 8002318:	e002      	b.n	8002320 <EN_button+0x20>
  else
    (*button).button_event = reset;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2203      	movs	r2, #3
 800231e:	719a      	strb	r2, [r3, #6]
  if (((*button).tick_counter >= (*button).max))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002326:	461a      	mov	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	db03      	blt.n	8002338 <EN_button+0x38>
    {
      (*button).button_event = timeout_1;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	719a      	strb	r2, [r3, #6]
 8002336:	e007      	b.n	8002348 <EN_button+0x48>
    }
  else if ((*button).tick_counter < 0)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800233e:	2b00      	cmp	r3, #0
 8002340:	da02      	bge.n	8002348 <EN_button+0x48>
    (*button).button_event = timeout_2;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2201      	movs	r2, #1
 8002346:	719a      	strb	r2, [r3, #6]

  ;
  EN_fsm_button (button);
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f000 f805 	bl	8002358 <EN_fsm_button>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <EN_fsm_button>:
 * @inputs:
 *   @button: this is the descriptor for the button
 */
void
EN_fsm_button (button_t *button)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  button_t temp = *button;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	6810      	ldr	r0, [r2, #0]
 8002368:	6851      	ldr	r1, [r2, #4]
 800236a:	c303      	stmia	r3!, {r0, r1}
  switch (temp.button_state)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d871      	bhi.n	8002456 <EN_fsm_button+0xfe>
 8002372:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <EN_fsm_button+0x20>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023e9 	.word	0x080023e9
 800237c:	08002437 	.word	0x08002437
 8002380:	08002389 	.word	0x08002389
 8002384:	080023d7 	.word	0x080023d7
    {
    case b_pre_off:
      switch (temp.button_event)
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d85c      	bhi.n	8002448 <EN_fsm_button+0xf0>
 800238e:	a201      	add	r2, pc, #4	@ (adr r2, 8002394 <EN_fsm_button+0x3c>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023af 	.word	0x080023af
 800239c:	080023b5 	.word	0x080023b5
 80023a0:	080023c5 	.word	0x080023c5
	{
	case timeout_1:
	  temp.button_state = b_off;
 80023a4:	2303      	movs	r3, #3
 80023a6:	73fb      	strb	r3, [r7, #15]
	  temp.value = off;
 80023a8:	2300      	movs	r3, #0
 80023aa:	723b      	strb	r3, [r7, #8]
	  break;
 80023ac:	e012      	b.n	80023d4 <EN_fsm_button+0x7c>
	case timeout_2:
	  temp.button_state = b_on;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
	  break;
 80023b2:	e00f      	b.n	80023d4 <EN_fsm_button+0x7c>
	  break;
	case set:
	  temp.tick_counter--;
 80023b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b21b      	sxth	r3, r3
 80023c0:	817b      	strh	r3, [r7, #10]
	  break;
 80023c2:	e007      	b.n	80023d4 <EN_fsm_button+0x7c>
	case reset:
	  temp.tick_counter++;
 80023c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	817b      	strh	r3, [r7, #10]
	  break;
 80023d2:	bf00      	nop
	}
      break;
 80023d4:	e038      	b.n	8002448 <EN_fsm_button+0xf0>
    case b_off:
      temp.tick_counter = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	817b      	strh	r3, [r7, #10]
      switch (temp.button_event)
 80023da:	7bbb      	ldrb	r3, [r7, #14]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d135      	bne.n	800244c <EN_fsm_button+0xf4>
	{
	case set:
	  temp.button_state = b_pre_on;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]

	  break;
 80023e4:	bf00      	nop
	default:
	}
      break;
 80023e6:	e031      	b.n	800244c <EN_fsm_button+0xf4>
    case b_pre_on:
      switch (temp.button_event)
 80023e8:	7bbb      	ldrb	r3, [r7, #14]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d830      	bhi.n	8002450 <EN_fsm_button+0xf8>
 80023ee:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <EN_fsm_button+0x9c>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002405 	.word	0x08002405
 80023f8:	0800240f 	.word	0x0800240f
 80023fc:	08002415 	.word	0x08002415
 8002400:	08002425 	.word	0x08002425
	{
	case timeout_1:
	  temp.button_state = b_on;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
	  temp.value = on;
 8002408:	2301      	movs	r3, #1
 800240a:	723b      	strb	r3, [r7, #8]
	  break;
 800240c:	e012      	b.n	8002434 <EN_fsm_button+0xdc>
	case timeout_2:
	  temp.button_state = b_off;
 800240e:	2303      	movs	r3, #3
 8002410:	73fb      	strb	r3, [r7, #15]
	  break;
 8002412:	e00f      	b.n	8002434 <EN_fsm_button+0xdc>
	case set:
	  temp.tick_counter++;
 8002414:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002418:	b29b      	uxth	r3, r3
 800241a:	3301      	adds	r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	b21b      	sxth	r3, r3
 8002420:	817b      	strh	r3, [r7, #10]
	  break;
 8002422:	e007      	b.n	8002434 <EN_fsm_button+0xdc>
	case reset:
	  temp.tick_counter--;
 8002424:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29b      	uxth	r3, r3
 800242e:	b21b      	sxth	r3, r3
 8002430:	817b      	strh	r3, [r7, #10]
	  break;
 8002432:	bf00      	nop
	}
      break;
 8002434:	e00c      	b.n	8002450 <EN_fsm_button+0xf8>
    case b_on:
      temp.tick_counter = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	817b      	strh	r3, [r7, #10]
      switch (temp.button_event)
 800243a:	7bbb      	ldrb	r3, [r7, #14]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d109      	bne.n	8002454 <EN_fsm_button+0xfc>
	{
	case reset:
	  temp.button_state = b_pre_off;
 8002440:	2302      	movs	r3, #2
 8002442:	73fb      	strb	r3, [r7, #15]
	  break;
 8002444:	bf00      	nop
	default:
	}
      break;
 8002446:	e005      	b.n	8002454 <EN_fsm_button+0xfc>
      break;
 8002448:	bf00      	nop
 800244a:	e004      	b.n	8002456 <EN_fsm_button+0xfe>
      break;
 800244c:	bf00      	nop
 800244e:	e002      	b.n	8002456 <EN_fsm_button+0xfe>
      break;
 8002450:	bf00      	nop
 8002452:	e000      	b.n	8002456 <EN_fsm_button+0xfe>
      break;
 8002454:	bf00      	nop

    }
  *button = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	461a      	mov	r2, r3
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	cb03      	ldmia	r3!, {r0, r1}
 8002460:	6010      	str	r0, [r2, #0]
 8002462:	6051      	str	r1, [r2, #4]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <EN_fsm>:
 *  @encoder_state: pointer to the current state of the encoder
 *  @encoder_event: last event for the encoder inputs
 */
void
EN_fsm (encoder_state_t *encoder_state, encoder_event_t encoder_event)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
  switch (*encoder_state)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b06      	cmp	r3, #6
 8002482:	f200 80bf 	bhi.w	8002604 <EN_fsm+0x194>
 8002486:	a201      	add	r2, pc, #4	@ (adr r2, 800248c <EN_fsm+0x1c>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	080024c7 	.word	0x080024c7
 8002490:	080024f7 	.word	0x080024f7
 8002494:	08002525 	.word	0x08002525
 8002498:	0800255f 	.word	0x0800255f
 800249c:	0800258d 	.word	0x0800258d
 80024a0:	080025bb 	.word	0x080025bb
 80024a4:	080024a9 	.word	0x080024a9
    {
    case idle:
      switch (encoder_event)
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <EN_fsm+0x44>
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d004      	beq.n	80024bc <EN_fsm+0x4c>
	case B:
	  *encoder_state = B1;
	  break;
	default:
	}
      break;
 80024b2:	e0a7      	b.n	8002604 <EN_fsm+0x194>
	  *encoder_state = A1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
	  break;
 80024ba:	e003      	b.n	80024c4 <EN_fsm+0x54>
	  *encoder_state = B1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2203      	movs	r2, #3
 80024c0:	701a      	strb	r2, [r3, #0]
	  break;
 80024c2:	bf00      	nop
      break;
 80024c4:	e09e      	b.n	8002604 <EN_fsm+0x194>
    case A1:
      switch (encoder_event)
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d00f      	beq.n	80024ec <EN_fsm+0x7c>
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	f300 8090 	bgt.w	80025f2 <EN_fsm+0x182>
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d002      	beq.n	80024dc <EN_fsm+0x6c>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d004      	beq.n	80024e4 <EN_fsm+0x74>
	case none:
	  *encoder_state = idle;
	  break;
	default:
	}
      break;
 80024da:	e08a      	b.n	80025f2 <EN_fsm+0x182>
	  *encoder_state = idle;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2206      	movs	r2, #6
 80024e0:	701a      	strb	r2, [r3, #0]
	  break;
 80024e2:	e007      	b.n	80024f4 <EN_fsm+0x84>
	  *encoder_state = A2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
	  break;
 80024ea:	e003      	b.n	80024f4 <EN_fsm+0x84>
	  *encoder_state = idle;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2206      	movs	r2, #6
 80024f0:	701a      	strb	r2, [r3, #0]
	  break;
 80024f2:	bf00      	nop
      break;
 80024f4:	e07d      	b.n	80025f2 <EN_fsm+0x182>
    case A2:
      switch (encoder_event)
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d00e      	beq.n	800251a <EN_fsm+0xaa>
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	dc7a      	bgt.n	80025f6 <EN_fsm+0x186>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <EN_fsm+0x9a>
 8002504:	2b01      	cmp	r3, #1
 8002506:	d004      	beq.n	8002512 <EN_fsm+0xa2>
	case none:
	  *encoder_state = idle;
	  break;
	default:
	}
      break;
 8002508:	e075      	b.n	80025f6 <EN_fsm+0x186>
	  *encoder_state = A1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
	  break;
 8002510:	e007      	b.n	8002522 <EN_fsm+0xb2>
	  *encoder_state = A3;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
	  break;
 8002518:	e003      	b.n	8002522 <EN_fsm+0xb2>
	  *encoder_state = idle;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2206      	movs	r2, #6
 800251e:	701a      	strb	r2, [r3, #0]
	  break;
 8002520:	bf00      	nop
      break;
 8002522:	e068      	b.n	80025f6 <EN_fsm+0x186>
    case A3:
      switch (encoder_event)
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d00e      	beq.n	8002548 <EN_fsm+0xd8>
 800252a:	2b03      	cmp	r3, #3
 800252c:	dc65      	bgt.n	80025fa <EN_fsm+0x18a>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <EN_fsm+0xc8>
 8002532:	2b02      	cmp	r3, #2
 8002534:	d004      	beq.n	8002540 <EN_fsm+0xd0>
	  *encoder_state = idle;
	  encoder.position++;
	  break;
	default:
	}
      break;
 8002536:	e060      	b.n	80025fa <EN_fsm+0x18a>
	  *encoder_state = A1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
	  break;
 800253e:	e00d      	b.n	800255c <EN_fsm+0xec>
	  *encoder_state = A2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
	  break;
 8002546:	e009      	b.n	800255c <EN_fsm+0xec>
	  *encoder_state = idle;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2206      	movs	r2, #6
 800254c:	701a      	strb	r2, [r3, #0]
	  encoder.position++;
 800254e:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <EN_fsm+0x1a0>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <EN_fsm+0x1a0>)
 8002558:	801a      	strh	r2, [r3, #0]
	  break;
 800255a:	bf00      	nop
      break;
 800255c:	e04d      	b.n	80025fa <EN_fsm+0x18a>
    case B1:
      switch (encoder_event)
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d00e      	beq.n	8002582 <EN_fsm+0x112>
 8002564:	2b03      	cmp	r3, #3
 8002566:	dc4a      	bgt.n	80025fe <EN_fsm+0x18e>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <EN_fsm+0x102>
 800256c:	2b02      	cmp	r3, #2
 800256e:	d004      	beq.n	800257a <EN_fsm+0x10a>
	case none:
	  *encoder_state = idle;
	  break;
	default:
	}
      break;
 8002570:	e045      	b.n	80025fe <EN_fsm+0x18e>
	  *encoder_state = idle;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2206      	movs	r2, #6
 8002576:	701a      	strb	r2, [r3, #0]
	  break;
 8002578:	e007      	b.n	800258a <EN_fsm+0x11a>
	  *encoder_state = B2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2204      	movs	r2, #4
 800257e:	701a      	strb	r2, [r3, #0]
	  break;
 8002580:	e003      	b.n	800258a <EN_fsm+0x11a>
	  *encoder_state = idle;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2206      	movs	r2, #6
 8002586:	701a      	strb	r2, [r3, #0]
	  break;
 8002588:	bf00      	nop
      break;
 800258a:	e038      	b.n	80025fe <EN_fsm+0x18e>
    case B2:
      switch (encoder_event)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d00e      	beq.n	80025b0 <EN_fsm+0x140>
 8002592:	2b03      	cmp	r3, #3
 8002594:	dc35      	bgt.n	8002602 <EN_fsm+0x192>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <EN_fsm+0x130>
 800259a:	2b01      	cmp	r3, #1
 800259c:	d004      	beq.n	80025a8 <EN_fsm+0x138>
	case none:
	  *encoder_state = idle;
	  break;
	default:
	}
      break;
 800259e:	e030      	b.n	8002602 <EN_fsm+0x192>
	  *encoder_state = B3;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2205      	movs	r2, #5
 80025a4:	701a      	strb	r2, [r3, #0]
	  break;
 80025a6:	e007      	b.n	80025b8 <EN_fsm+0x148>
	  *encoder_state = B1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2203      	movs	r2, #3
 80025ac:	701a      	strb	r2, [r3, #0]
	  break;
 80025ae:	e003      	b.n	80025b8 <EN_fsm+0x148>
	  *encoder_state = idle;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2206      	movs	r2, #6
 80025b4:	701a      	strb	r2, [r3, #0]
	  break;
 80025b6:	bf00      	nop
      break;
 80025b8:	e023      	b.n	8002602 <EN_fsm+0x192>
    case B3:
      switch (encoder_event)
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d00e      	beq.n	80025de <EN_fsm+0x16e>
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	dc1f      	bgt.n	8002604 <EN_fsm+0x194>
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d002      	beq.n	80025ce <EN_fsm+0x15e>
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d004      	beq.n	80025d6 <EN_fsm+0x166>
	  encoder.position--;
	  break;
	default:
	}
    }
}
 80025cc:	e01a      	b.n	8002604 <EN_fsm+0x194>
	  *encoder_state = B1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	701a      	strb	r2, [r3, #0]
	  break;
 80025d4:	e016      	b.n	8002604 <EN_fsm+0x194>
	  *encoder_state = B2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	701a      	strb	r2, [r3, #0]
	  break;
 80025dc:	e012      	b.n	8002604 <EN_fsm+0x194>
	  *encoder_state = idle;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2206      	movs	r2, #6
 80025e2:	701a      	strb	r2, [r3, #0]
	  encoder.position--;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <EN_fsm+0x1a0>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <EN_fsm+0x1a0>)
 80025ee:	801a      	strh	r2, [r3, #0]
	  break;
 80025f0:	e008      	b.n	8002604 <EN_fsm+0x194>
      break;
 80025f2:	bf00      	nop
 80025f4:	e006      	b.n	8002604 <EN_fsm+0x194>
      break;
 80025f6:	bf00      	nop
 80025f8:	e004      	b.n	8002604 <EN_fsm+0x194>
      break;
 80025fa:	bf00      	nop
 80025fc:	e002      	b.n	8002604 <EN_fsm+0x194>
      break;
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <EN_fsm+0x194>
      break;
 8002602:	bf00      	nop
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000098 	.word	0x20000098

08002614 <EN_get_inputs>:
 * @brief: reads the value of pins and selects event and switch based on it
 * @return: value of current event and state of the switch
 */
encoder_event_t
EN_get_inputs ()
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
  encoder_event_t event = none;
 800261a:	2303      	movs	r3, #3
 800261c:	71fb      	strb	r3, [r7, #7]
  uint8_t encoder_read = HAL_GPIO_ReadPin (dt_pin.per, dt_pin.pin)
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <EN_get_inputs+0x68>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a16      	ldr	r2, [pc, #88]	@ (800267c <EN_get_inputs+0x68>)
 8002624:	8892      	ldrh	r2, [r2, #4]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f003 f90d 	bl	8005848 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	461c      	mov	r4, r3
      + 2 * HAL_GPIO_ReadPin (clk_pin.per, clk_pin.pin);
 8002632:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <EN_get_inputs+0x6c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <EN_get_inputs+0x6c>)
 8002638:	8892      	ldrh	r2, [r2, #4]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f003 f903 	bl	8005848 <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
  uint8_t encoder_read = HAL_GPIO_ReadPin (dt_pin.per, dt_pin.pin)
 8002648:	4423      	add	r3, r4
 800264a:	71bb      	strb	r3, [r7, #6]
  switch (encoder_read)
 800264c:	79bb      	ldrb	r3, [r7, #6]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d008      	beq.n	8002664 <EN_get_inputs+0x50>
 8002652:	2b02      	cmp	r3, #2
 8002654:	dc0c      	bgt.n	8002670 <EN_get_inputs+0x5c>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <EN_get_inputs+0x56>
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <EN_get_inputs+0x5c>
    {
    case 1:
      event = B;
 800265e:	2301      	movs	r3, #1
 8002660:	71fb      	strb	r3, [r7, #7]
      break;
 8002662:	e005      	b.n	8002670 <EN_get_inputs+0x5c>
    case 2:
      event = A;
 8002664:	2300      	movs	r3, #0
 8002666:	71fb      	strb	r3, [r7, #7]
      break;
 8002668:	e002      	b.n	8002670 <EN_get_inputs+0x5c>
    case 0:
      event = AB;
 800266a:	2302      	movs	r3, #2
 800266c:	71fb      	strb	r3, [r7, #7]
      break;
 800266e:	bf00      	nop
    default:
    }
  return event;
 8002670:	79fb      	ldrb	r3, [r7, #7]
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	2000009c 	.word	0x2000009c
 8002680:	200000a4 	.word	0x200000a4

08002684 <FFT>:
 *   @Y: This is the vector with the signal and the result
 *   @N: Length of the signal
 */
void
FFT (complex_t *Y, uint16_t N)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b08e      	sub	sp, #56	@ 0x38
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  complex_t temp1, temp2;
  int j, k;
  int upper_leg, lower_leg;
  int leg_diff;
  uint16_t counter = 1;
 8002690:	2301      	movs	r3, #1
 8002692:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint8_t num_stages = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t index, step;

  do
    {
      num_stages += 1;
 800269a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800269e:	3301      	adds	r3, #1
 80026a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      counter = counter * 2;
 80026a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
  while (counter != N);
 80026aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d1f3      	bne.n	800269a <FFT+0x16>

  leg_diff = N / 2;
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  step = 512 / N;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80026c4:	843b      	strh	r3, [r7, #32]

  for (counter = 0; counter < num_stages; counter++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80026ca:	e0b4      	b.n	8002836 <FFT+0x1b2>
    {
      index = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	847b      	strh	r3, [r7, #34]	@ 0x22
      for (j = 0; j < leg_diff; j++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d4:	e09f      	b.n	8002816 <FFT+0x192>
	{
	  for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff))
 80026d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026da:	e090      	b.n	80027fe <FFT+0x17a>
	    {
	      lower_leg = upper_leg + leg_diff;
 80026dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e0:	4413      	add	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
	      temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 80026e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe f96d 	bl	80009d8 <__addsf3>
 80026fe:	4603      	mov	r3, r0
 8002700:	617b      	str	r3, [r7, #20]
	      temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 8002702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	6858      	ldr	r0, [r3, #4]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4619      	mov	r1, r3
 8002718:	f7fe f95e 	bl	80009d8 <__addsf3>
 800271c:	4603      	mov	r3, r0
 800271e:	61bb      	str	r3, [r7, #24]
	      temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe f94d 	bl	80009d4 <__aeabi_fsub>
 800273a:	4603      	mov	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]
	      temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
 800273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	6858      	ldr	r0, [r3, #4]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4413      	add	r3, r2
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe f93e 	bl	80009d4 <__aeabi_fsub>
 8002758:	4603      	mov	r3, r0
 800275a:	613b      	str	r3, [r7, #16]
	      (Y[lower_leg]).real = temp2.real * (e_values[index]).real
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002760:	4964      	ldr	r1, [pc, #400]	@ (80028f4 <FFT+0x270>)
 8002762:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f7fe fa3d 	bl	8000be8 <__aeabi_fmul>
 800276e:	4603      	mov	r3, r0
 8002770:	461d      	mov	r5, r3
		  - temp2.imag * (e_values[index]).imag;
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002776:	495f      	ldr	r1, [pc, #380]	@ (80028f4 <FFT+0x270>)
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f7fe fa31 	bl	8000be8 <__aeabi_fmul>
 8002786:	4603      	mov	r3, r0
 8002788:	4619      	mov	r1, r3
	      (Y[lower_leg]).real = temp2.real * (e_values[index]).real
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	18d4      	adds	r4, r2, r3
		  - temp2.imag * (e_values[index]).imag;
 8002792:	4628      	mov	r0, r5
 8002794:	f7fe f91e 	bl	80009d4 <__aeabi_fsub>
 8002798:	4603      	mov	r3, r0
	      (Y[lower_leg]).real = temp2.real * (e_values[index]).real
 800279a:	6023      	str	r3, [r4, #0]
	      (Y[lower_leg]).imag = temp2.real * (e_values[index]).imag
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80027a0:	4954      	ldr	r1, [pc, #336]	@ (80028f4 <FFT+0x270>)
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f7fe fa1c 	bl	8000be8 <__aeabi_fmul>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461d      	mov	r5, r3
		  + temp2.imag * (e_values[index]).real;
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80027b8:	494e      	ldr	r1, [pc, #312]	@ (80028f4 <FFT+0x270>)
 80027ba:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7fe fa11 	bl	8000be8 <__aeabi_fmul>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4619      	mov	r1, r3
	      (Y[lower_leg]).imag = temp2.real * (e_values[index]).imag
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	18d4      	adds	r4, r2, r3
		  + temp2.imag * (e_values[index]).real;
 80027d2:	4628      	mov	r0, r5
 80027d4:	f7fe f900 	bl	80009d8 <__addsf3>
 80027d8:	4603      	mov	r3, r0
	      (Y[lower_leg]).imag = temp2.real * (e_values[index]).imag
 80027da:	6063      	str	r3, [r4, #4]
	      (Y[upper_leg]).real = temp1.real;
 80027dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	601a      	str	r2, [r3, #0]
	      (Y[upper_leg]).imag = temp1.imag;
 80027e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
	  for (upper_leg = j; upper_leg < N; upper_leg += (2 * leg_diff))
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027fa:	4413      	add	r3, r2
 80027fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002802:	429a      	cmp	r2, r3
 8002804:	f6ff af6a 	blt.w	80026dc <FFT+0x58>
	    }
	  index += step;
 8002808:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800280a:	8c3b      	ldrh	r3, [r7, #32]
 800280c:	4413      	add	r3, r2
 800280e:	847b      	strh	r3, [r7, #34]	@ 0x22
      for (j = 0; j < leg_diff; j++)
 8002810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002812:	3301      	adds	r3, #1
 8002814:	637b      	str	r3, [r7, #52]	@ 0x34
 8002816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	429a      	cmp	r2, r3
 800281c:	f6ff af5b 	blt.w	80026d6 <FFT+0x52>
	}
      leg_diff = leg_diff / 2;
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	0fda      	lsrs	r2, r3, #31
 8002824:	4413      	add	r3, r2
 8002826:	105b      	asrs	r3, r3, #1
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
      step *= 2;
 800282a:	8c3b      	ldrh	r3, [r7, #32]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	843b      	strh	r3, [r7, #32]
  for (counter = 0; counter < num_stages; counter++)
 8002830:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002832:	3301      	adds	r3, #1
 8002834:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002836:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800283a:	b29b      	uxth	r3, r3
 800283c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800283e:	429a      	cmp	r2, r3
 8002840:	f4ff af44 	bcc.w	80026cc <FFT+0x48>
    }

  j = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	637b      	str	r3, [r7, #52]	@ 0x34
  for (counter = 1; counter < (N - 1); counter++)
 8002848:	2301      	movs	r3, #1
 800284a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800284c:	e048      	b.n	80028e0 <FFT+0x25c>
    {
      k = N / 2;
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	b29b      	uxth	r3, r3
 8002854:	633b      	str	r3, [r7, #48]	@ 0x30
      while (k <= j)
 8002856:	e008      	b.n	800286a <FFT+0x1e6>
	{
	  j = j - k;
 8002858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	637b      	str	r3, [r7, #52]	@ 0x34
	  k = k / 2;
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	0fda      	lsrs	r2, r3, #31
 8002864:	4413      	add	r3, r2
 8002866:	105b      	asrs	r3, r3, #1
 8002868:	633b      	str	r3, [r7, #48]	@ 0x30
      while (k <= j)
 800286a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800286c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286e:	429a      	cmp	r2, r3
 8002870:	ddf2      	ble.n	8002858 <FFT+0x1d4>
	}
      j = j + k;
 8002872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	4413      	add	r3, r2
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
      if (counter < j)
 800287a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800287c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800287e:	429a      	cmp	r2, r3
 8002880:	dd2b      	ble.n	80028da <FFT+0x256>
	{
	  temp1.real = (Y[j]).real;
 8002882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	617b      	str	r3, [r7, #20]
	  temp1.imag = (Y[j]).imag;
 800288e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	61bb      	str	r3, [r7, #24]
	  (Y[j]).real = (Y[counter]).real;
 800289a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	441a      	add	r2, r3
 80028a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	440b      	add	r3, r1
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	601a      	str	r2, [r3, #0]
	  (Y[j]).imag = (Y[counter]).imag;
 80028ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	441a      	add	r2, r3
 80028b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	440b      	add	r3, r1
 80028be:	6852      	ldr	r2, [r2, #4]
 80028c0:	605a      	str	r2, [r3, #4]
	  (Y[counter]).real = temp1.real;
 80028c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	601a      	str	r2, [r3, #0]
	  (Y[counter]).imag = temp1.imag;
 80028ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	605a      	str	r2, [r3, #4]
  for (counter = 1; counter < (N - 1); counter++)
 80028da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028dc:	3301      	adds	r3, #1
 80028de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80028e0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	429a      	cmp	r2, r3
 80028e8:	dbb1      	blt.n	800284e <FFT+0x1ca>
	}
    }
}
 80028ea:	bf00      	nop
 80028ec:	bf00      	nop
 80028ee:	3738      	adds	r7, #56	@ 0x38
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bdb0      	pop	{r4, r5, r7, pc}
 80028f4:	200000ac 	.word	0x200000ac

080028f8 <FFT_mod>:
 *   @value: fft value
 *   @N: points of the fft
 */
float
FFT_mod (complex_t value, uint16_t N)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	e883 0003 	stmia.w	r3, {r0, r1}
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  if (N == 0)
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <FFT_mod+0x1c>
    return -1;
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <FFT_mod+0x74>)
 8002912:	e027      	b.n	8002964 <FFT_mod+0x6c>
  return 2 * sqrtf (fabsf (value.real * value.real + value.imag * value.imag))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f964 	bl	8000be8 <__aeabi_fmul>
 8002920:	4603      	mov	r3, r0
 8002922:	461c      	mov	r4, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe f95c 	bl	8000be8 <__aeabi_fmul>
 8002930:	4603      	mov	r3, r0
 8002932:	4619      	mov	r1, r3
 8002934:	4620      	mov	r0, r4
 8002936:	f7fe f84f 	bl	80009d8 <__addsf3>
 800293a:	4603      	mov	r3, r0
 800293c:	4618      	mov	r0, r3
 800293e:	f009 fffb 	bl	800c938 <sqrtf>
 8002942:	4603      	mov	r3, r0
 8002944:	4619      	mov	r1, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f846 	bl	80009d8 <__addsf3>
 800294c:	4603      	mov	r3, r0
 800294e:	461c      	mov	r4, r3
      / N;
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f8f4 	bl	8000b40 <__aeabi_i2f>
 8002958:	4603      	mov	r3, r0
 800295a:	4619      	mov	r1, r3
 800295c:	4620      	mov	r0, r4
 800295e:	f7fe f9f7 	bl	8000d50 <__aeabi_fdiv>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bd90      	pop	{r4, r7, pc}
 800296c:	bf800000 	.word	0xbf800000

08002970 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  vTaskSetApplicationTaskTag(NULL, (void *) TAG_IDLE);
 8002974:	2100      	movs	r1, #0
 8002976:	2000      	movs	r0, #0
 8002978:	f007 ff40 	bl	800a7fc <vTaskSetApplicationTaskTag>
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	@ 0x30
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002986:	f001 ff01 	bl	800478c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800298a:	f000 f887 	bl	8002a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800298e:	f000 fa59 	bl	8002e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8002992:	f000 fa39 	bl	8002e08 <MX_DMA_Init>
  MX_TIM2_Init();
 8002996:	f000 f949 	bl	8002c2c <MX_TIM2_Init>
  MX_ADC1_Init();
 800299a:	f000 f8db 	bl	8002b54 <MX_ADC1_Init>
  MX_I2C1_Init();
 800299e:	f000 f917 	bl	8002bd0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80029a2:	f000 f9b9 	bl	8002d18 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80029a6:	f000 fa05 	bl	8002db4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 80029aa:	f000 fec1 	bl	8003730 <SSD1306_Init>
  PWM_init (&htim2, TIM_CHANNEL_1);
 80029ae:	2100      	movs	r1, #0
 80029b0:	482b      	ldr	r0, [pc, #172]	@ (8002a60 <main+0xe0>)
 80029b2:	f000 fdd7 	bl	8003564 <PWM_init>

  PWM_change_freq_dma (500, 1);
 80029b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80029ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029be:	f000 fde7 	bl	8003590 <PWM_change_freq_dma>
  switch_values_t temp =
    { AN_inputs_reader ().button_encoder.value,
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fd22 	bl	8001410 <AN_inputs_reader>
 80029cc:	7abb      	ldrb	r3, [r7, #10]
  switch_values_t temp =
 80029ce:	713b      	strb	r3, [r7, #4]
	AN_inputs_reader ().button_sec.value };
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fd1b 	bl	8001410 <AN_inputs_reader>
 80029da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
  switch_values_t temp =
 80029de:	717b      	strb	r3, [r7, #5]
  AN_graph_control (temp, 1);
 80029e0:	2101      	movs	r1, #1
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fed4 	bl	8001790 <AN_graph_control>
  SSD1306_UpdateScreen ();
 80029e8:	f000 ff66 	bl	80038b8 <SSD1306_UpdateScreen>
  AN_init (&huart1);
 80029ec:	481d      	ldr	r0, [pc, #116]	@ (8002a64 <main+0xe4>)
 80029ee:	f7fe fb1d 	bl	800102c <AN_init>
  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80029f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029f6:	481c      	ldr	r0, [pc, #112]	@ (8002a68 <main+0xe8>)
 80029f8:	f002 ff55 	bl	80058a6 <HAL_GPIO_TogglePin>
  AN_send_uart ();
 80029fc:	f7fe fb64 	bl	80010c8 <AN_send_uart>
  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8002a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a04:	4818      	ldr	r0, [pc, #96]	@ (8002a68 <main+0xe8>)
 8002a06:	f002 ff4e 	bl	80058a6 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002a0a:	f005 fe49 	bl	80086a0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of fftRead */
  fftReadHandle = osMutexNew(&fftRead_attributes);
 8002a0e:	4817      	ldr	r0, [pc, #92]	@ (8002a6c <main+0xec>)
 8002a10:	f005 ff84 	bl	800891c <osMutexNew>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a16      	ldr	r2, [pc, #88]	@ (8002a70 <main+0xf0>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* creation of adcSave */
  adcSaveHandle = osMutexNew(&adcSave_attributes);
 8002a1a:	4816      	ldr	r0, [pc, #88]	@ (8002a74 <main+0xf4>)
 8002a1c:	f005 ff7e 	bl	800891c <osMutexNew>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4a15      	ldr	r2, [pc, #84]	@ (8002a78 <main+0xf8>)
 8002a24:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of switchesData */
  switchesDataHandle = osMessageQueueNew (5, sizeof(switch_values_t), &switchesData_attributes);
 8002a26:	4a15      	ldr	r2, [pc, #84]	@ (8002a7c <main+0xfc>)
 8002a28:	2102      	movs	r1, #2
 8002a2a:	2005      	movs	r0, #5
 8002a2c:	f006 f8be 	bl	8008bac <osMessageQueueNew>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a13      	ldr	r2, [pc, #76]	@ (8002a80 <main+0x100>)
 8002a34:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of display */
  displayHandle = osThreadNew(entryDisplay, NULL, &display_attributes);
 8002a36:	4a13      	ldr	r2, [pc, #76]	@ (8002a84 <main+0x104>)
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4813      	ldr	r0, [pc, #76]	@ (8002a88 <main+0x108>)
 8002a3c:	f005 fe96 	bl	800876c <osThreadNew>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a12      	ldr	r2, [pc, #72]	@ (8002a8c <main+0x10c>)
 8002a44:	6013      	str	r3, [r2, #0]

  /* creation of fft */
  fftHandle = osThreadNew(entryDatos, NULL, &fft_attributes);
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <main+0x110>)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4812      	ldr	r0, [pc, #72]	@ (8002a94 <main+0x114>)
 8002a4c:	f005 fe8e 	bl	800876c <osThreadNew>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a11      	ldr	r2, [pc, #68]	@ (8002a98 <main+0x118>)
 8002a54:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002a56:	f005 fe55 	bl	8008704 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a5a:	bf00      	nop
 8002a5c:	e7fd      	b.n	8002a5a <main+0xda>
 8002a5e:	bf00      	nop
 8002a60:	20001360 	.word	0x20001360
 8002a64:	20001434 	.word	0x20001434
 8002a68:	40011000 	.word	0x40011000
 8002a6c:	0800df00 	.word	0x0800df00
 8002a70:	20001488 	.word	0x20001488
 8002a74:	0800df10 	.word	0x0800df10
 8002a78:	2000148c 	.word	0x2000148c
 8002a7c:	0800dee8 	.word	0x0800dee8
 8002a80:	20001484 	.word	0x20001484
 8002a84:	0800dea0 	.word	0x0800dea0
 8002a88:	08003035 	.word	0x08003035
 8002a8c:	2000147c 	.word	0x2000147c
 8002a90:	0800dec4 	.word	0x0800dec4
 8002a94:	08003429 	.word	0x08003429
 8002a98:	20001480 	.word	0x20001480

08002a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b094      	sub	sp, #80	@ 0x50
 8002aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aa6:	2228      	movs	r2, #40	@ 0x28
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f009 fa5e 	bl	800bf6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ad0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ada:	2301      	movs	r3, #1
 8002adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ae8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fcd2 	bl	800649c <HAL_RCC_OscConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002afe:	f000 fd2b 	bl	8003558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b02:	230f      	movs	r3, #15
 8002b04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 ff3e 	bl	80069a0 <HAL_RCC_ClockConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002b2a:	f000 fd15 	bl	8003558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 f8ee 	bl	8006d1c <HAL_RCCEx_PeriphCLKConfig>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002b46:	f000 fd07 	bl	8003558 <Error_Handler>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	3750      	adds	r7, #80	@ 0x50
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b64:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b66:	4a19      	ldr	r2, [pc, #100]	@ (8002bcc <MX_ADC1_Init+0x78>)
 8002b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b6a:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b70:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b76:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b7e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b84:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b90:	480d      	ldr	r0, [pc, #52]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002b92:	f001 fe2d 	bl	80047f0 <HAL_ADC_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002b9c:	f000 fcdc 	bl	8003558 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4805      	ldr	r0, [pc, #20]	@ (8002bc8 <MX_ADC1_Init+0x74>)
 8002bb2:	f001 ffeb 	bl	8004b8c <HAL_ADC_ConfigChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002bbc:	f000 fccc 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200012dc 	.word	0x200012dc
 8002bcc:	40012400 	.word	0x40012400

08002bd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002bd6:	4a13      	ldr	r2, [pc, #76]	@ (8002c24 <MX_I2C1_Init+0x54>)
 8002bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002bda:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002bdc:	4a12      	ldr	r2, [pc, #72]	@ (8002c28 <MX_I2C1_Init+0x58>)
 8002bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002bee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c0c:	4804      	ldr	r0, [pc, #16]	@ (8002c20 <MX_I2C1_Init+0x50>)
 8002c0e:	f002 fe7b 	bl	8005908 <HAL_I2C_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c18:	f000 fc9e 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	2000130c 	.word	0x2000130c
 8002c24:	40005400 	.word	0x40005400
 8002c28:	00061a80 	.word	0x00061a80

08002c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	@ 0x38
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c40:	f107 0320 	add.w	r3, r7, #32
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
 8002c58:	615a      	str	r2, [r3, #20]
 8002c5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002c5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c64:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2880-1;
 8002c70:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002c72:	f640 323f 	movw	r2, #2879	@ 0xb3f
 8002c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c78:	4b26      	ldr	r3, [pc, #152]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c7e:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002c80:	2280      	movs	r2, #128	@ 0x80
 8002c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c84:	4823      	ldr	r0, [pc, #140]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002c86:	f004 f8ff 	bl	8006e88 <HAL_TIM_Base_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002c90:	f000 fc62 	bl	8003558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	481c      	ldr	r0, [pc, #112]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002ca2:	f004 fe4b 	bl	800793c <HAL_TIM_ConfigClockSource>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002cac:	f000 fc54 	bl	8003558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cb0:	4818      	ldr	r0, [pc, #96]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002cb2:	f004 f9b9 	bl	8007028 <HAL_TIM_PWM_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002cbc:	f000 fc4c 	bl	8003558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cc8:	f107 0320 	add.w	r3, r7, #32
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4811      	ldr	r0, [pc, #68]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002cd0:	f005 faa6 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002cda:	f000 fc3d 	bl	8003558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cde:	2360      	movs	r3, #96	@ 0x60
 8002ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002ce2:	230a      	movs	r3, #10
 8002ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002cf6:	f004 fd5f 	bl	80077b8 <HAL_TIM_PWM_ConfigChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002d00:	f000 fc2a 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d04:	4803      	ldr	r0, [pc, #12]	@ (8002d14 <MX_TIM2_Init+0xe8>)
 8002d06:	f001 fb99 	bl	800443c <HAL_TIM_MspPostInit>

}
 8002d0a:	bf00      	nop
 8002d0c:	3738      	adds	r7, #56	@ 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20001360 	.word	0x20001360

08002d18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d1e:	f107 0308 	add.w	r3, r7, #8
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d36:	4a1e      	ldr	r2, [pc, #120]	@ (8002db0 <MX_TIM3_Init+0x98>)
 8002d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d3c:	2247      	movs	r2, #71	@ 0x47
 8002d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d40:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d46:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4e:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d54:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d56:	2280      	movs	r2, #128	@ 0x80
 8002d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d5a:	4814      	ldr	r0, [pc, #80]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d5c:	f004 f894 	bl	8006e88 <HAL_TIM_Base_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d66:	f000 fbf7 	bl	8003558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	4619      	mov	r1, r3
 8002d76:	480d      	ldr	r0, [pc, #52]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d78:	f004 fde0 	bl	800793c <HAL_TIM_ConfigClockSource>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d82:	f000 fbe9 	bl	8003558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d8e:	463b      	mov	r3, r7
 8002d90:	4619      	mov	r1, r3
 8002d92:	4806      	ldr	r0, [pc, #24]	@ (8002dac <MX_TIM3_Init+0x94>)
 8002d94:	f005 fa44 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d9e:	f000 fbdb 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200013a8 	.word	0x200013a8
 8002db0:	40000400 	.word	0x40000400

08002db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <MX_USART1_UART_Init+0x50>)
 8002dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dc0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dda:	2208      	movs	r2, #8
 8002ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <MX_USART1_UART_Init+0x4c>)
 8002dec:	f005 fa88 	bl	8008300 <HAL_UART_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002df6:	f000 fbaf 	bl	8003558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20001434 	.word	0x20001434
 8002e04:	40013800 	.word	0x40013800

08002e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <MX_DMA_Init+0x38>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4a0b      	ldr	r2, [pc, #44]	@ (8002e40 <MX_DMA_Init+0x38>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6153      	str	r3, [r2, #20]
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <MX_DMA_Init+0x38>)
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2105      	movs	r1, #5
 8002e2a:	200f      	movs	r0, #15
 8002e2c:	f002 f8f7 	bl	800501e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002e30:	200f      	movs	r0, #15
 8002e32:	f002 f910 	bl	8005056 <HAL_NVIC_EnableIRQ>

}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000

08002e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e58:	4b3e      	ldr	r3, [pc, #248]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e5e:	f043 0310 	orr.w	r3, r3, #16
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b3b      	ldr	r3, [pc, #236]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e70:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a37      	ldr	r2, [pc, #220]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b32      	ldr	r3, [pc, #200]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4a31      	ldr	r2, [pc, #196]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	6193      	str	r3, [r2, #24]
 8002e94:	4b2f      	ldr	r3, [pc, #188]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	6193      	str	r3, [r2, #24]
 8002eac:	4b29      	ldr	r3, [pc, #164]	@ (8002f54 <MX_GPIO_Init+0x110>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ebe:	4826      	ldr	r0, [pc, #152]	@ (8002f58 <MX_GPIO_Init+0x114>)
 8002ec0:	f002 fcd9 	bl	8005876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	21b0      	movs	r1, #176	@ 0xb0
 8002ec8:	4824      	ldr	r0, [pc, #144]	@ (8002f5c <MX_GPIO_Init+0x118>)
 8002eca:	f002 fcd4 	bl	8005876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	481c      	ldr	r0, [pc, #112]	@ (8002f58 <MX_GPIO_Init+0x114>)
 8002ee8:	f002 fb2a 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002eec:	2302      	movs	r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	4619      	mov	r1, r3
 8002efe:	4817      	ldr	r0, [pc, #92]	@ (8002f5c <MX_GPIO_Init+0x118>)
 8002f00:	f002 fb1e 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f04:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002f0a:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <MX_GPIO_Init+0x11c>)
 8002f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f12:	f107 0310 	add.w	r3, r7, #16
 8002f16:	4619      	mov	r1, r3
 8002f18:	4810      	ldr	r0, [pc, #64]	@ (8002f5c <MX_GPIO_Init+0x118>)
 8002f1a:	f002 fb11 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002f1e:	23b0      	movs	r3, #176	@ 0xb0
 8002f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f22:	2301      	movs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4619      	mov	r1, r3
 8002f34:	4809      	ldr	r0, [pc, #36]	@ (8002f5c <MX_GPIO_Init+0x118>)
 8002f36:	f002 fb03 	bl	8005540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2106      	movs	r1, #6
 8002f3e:	2028      	movs	r0, #40	@ 0x28
 8002f40:	f002 f86d 	bl	800501e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f44:	2028      	movs	r0, #40	@ 0x28
 8002f46:	f002 f886 	bl	8005056 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f4a:	bf00      	nop
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40010c00 	.word	0x40010c00
 8002f60:	10310000 	.word	0x10310000

08002f64 <AE_callback_in>:

/* USER CODE BEGIN 4 */
void
AE_callback_in (int tag)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  switch (tag)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d015      	beq.n	8002f9e <AE_callback_in+0x3a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	dc18      	bgt.n	8002faa <AE_callback_in+0x46>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <AE_callback_in+0x22>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d006      	beq.n	8002f92 <AE_callback_in+0x2e>
      break;
    case TAG_PROCESO:
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
      break;
    }
}
 8002f84:	e011      	b.n	8002faa <AE_callback_in+0x46>
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002f86:	2201      	movs	r2, #1
 8002f88:	2110      	movs	r1, #16
 8002f8a:	480a      	ldr	r0, [pc, #40]	@ (8002fb4 <AE_callback_in+0x50>)
 8002f8c:	f002 fc73 	bl	8005876 <HAL_GPIO_WritePin>
      break;
 8002f90:	e00b      	b.n	8002faa <AE_callback_in+0x46>
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002f92:	2201      	movs	r2, #1
 8002f94:	2120      	movs	r1, #32
 8002f96:	4807      	ldr	r0, [pc, #28]	@ (8002fb4 <AE_callback_in+0x50>)
 8002f98:	f002 fc6d 	bl	8005876 <HAL_GPIO_WritePin>
      break;
 8002f9c:	e005      	b.n	8002faa <AE_callback_in+0x46>
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	2180      	movs	r1, #128	@ 0x80
 8002fa2:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <AE_callback_in+0x50>)
 8002fa4:	f002 fc67 	bl	8005876 <HAL_GPIO_WritePin>
      break;
 8002fa8:	bf00      	nop
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40010c00 	.word	0x40010c00

08002fb8 <AE_callback_out>:
void
AE_callback_out (int tag)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  switch (tag)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d015      	beq.n	8002ff2 <AE_callback_out+0x3a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	dc18      	bgt.n	8002ffe <AE_callback_out+0x46>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <AE_callback_out+0x22>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d006      	beq.n	8002fe6 <AE_callback_out+0x2e>
      break;
    case TAG_PROCESO:
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
      break;
    }
}
 8002fd8:	e011      	b.n	8002ffe <AE_callback_out+0x46>
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2110      	movs	r1, #16
 8002fde:	480a      	ldr	r0, [pc, #40]	@ (8003008 <AE_callback_out+0x50>)
 8002fe0:	f002 fc49 	bl	8005876 <HAL_GPIO_WritePin>
      break;
 8002fe4:	e00b      	b.n	8002ffe <AE_callback_out+0x46>
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2120      	movs	r1, #32
 8002fea:	4807      	ldr	r0, [pc, #28]	@ (8003008 <AE_callback_out+0x50>)
 8002fec:	f002 fc43 	bl	8005876 <HAL_GPIO_WritePin>
      break;
 8002ff0:	e005      	b.n	8002ffe <AE_callback_out+0x46>
      HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2180      	movs	r1, #128	@ 0x80
 8002ff6:	4804      	ldr	r0, [pc, #16]	@ (8003008 <AE_callback_out+0x50>)
 8002ff8:	f002 fc3d 	bl	8005876 <HAL_GPIO_WritePin>
      break;
 8002ffc:	bf00      	nop
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40010c00 	.word	0x40010c00

0800300c <HAL_GPIO_EXTI_Callback>:

void
HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13 || GPIO_Pin == GPIO_PIN_14)
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_EXTI_Callback+0x1a>
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003024:	d101      	bne.n	800302a <HAL_GPIO_EXTI_Callback+0x1e>
    {
      AN_encoder_setter ();
 8003026:	f7fe f98d 	bl	8001344 <AN_encoder_setter>
    }
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <entryDisplay>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_entryDisplay */
void entryDisplay(void *argument)
{
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b0bc      	sub	sp, #240	@ 0xf0
 8003038:	af00      	add	r7, sp, #0
 800303a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
  vTaskSetApplicationTaskTag (NULL, (void*) TAG_MONITOR);
 800303c:	2101      	movs	r1, #1
 800303e:	2000      	movs	r0, #0
 8003040:	f007 fbdc 	bl	800a7fc <vTaskSetApplicationTaskTag>
  TickType_t lastWakeTime = xTaskGetTickCount ();
 8003044:	f007 fb0c 	bl	800a660 <xTaskGetTickCount>
 8003048:	4603      	mov	r3, r0
 800304a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  inputs_t input_old = AN_inputs_reader ();
 800304e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f9dc 	bl	8001410 <AN_inputs_reader>
  display_state_t display_state = fft_pre_off;
 8003058:	2303      	movs	r3, #3
 800305a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  display_event_t display_event = off_stay;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
  config_disp_t disp_state;
  osMutexAcquire (adcSaveHandle, portMAX_DELAY);
 8003064:	4bc5      	ldr	r3, [pc, #788]	@ (800337c <entryDisplay+0x348>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800306c:	4618      	mov	r0, r3
 800306e:	f005 fcef 	bl	8008a50 <osMutexAcquire>
  //AN_send_uart ();
  /* Infinite loop */
  for (;;)
    {
      inputs_t input_temp = AN_inputs_reader ();
 8003072:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe f9ca 	bl	8001410 <AN_inputs_reader>
      switch_values_t switches_vec[5];
      switches_vec[0].encoder = input_temp.button_encoder.value;
 800307c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003080:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      switches_vec[0].second = input_temp.button_sec.value;
 8003084:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003088:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      uint16_t messages = osMessageQueueGetCount (switchesDataHandle);
 800308c:	4bbc      	ldr	r3, [pc, #752]	@ (8003380 <entryDisplay+0x34c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f005 fef7 	bl	8008e84 <osMessageQueueGetCount>
 8003096:	4603      	mov	r3, r0
 8003098:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
      uint8_t update_fft = AN_config_reader ().fft_pass;
 800309c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe f9cb 	bl	800143c <AN_config_reader>
 80030a6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80030aa:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
      int16_t diff = input_temp.encoder.position != input_old.encoder.position;
 80030ae:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80030b0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80030b4:	429a      	cmp	r2, r3
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
      uint8_t update_screen = 0, update_pwm = 0, send_fft = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb

      if (messages != 0)
 80030d4:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <entryDisplay+0xe0>
	{
	  for (int i = 0; i < messages; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030e2:	e011      	b.n	8003108 <entryDisplay+0xd4>
	    {
	      osMessageQueueGet (switchesDataHandle, &switches_vec[i], NULL,
 80030e4:	4ba6      	ldr	r3, [pc, #664]	@ (8003380 <entryDisplay+0x34c>)
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80030ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	18d1      	adds	r1, r2, r3
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030f8:	2200      	movs	r2, #0
 80030fa:	f005 fe51 	bl	8008da0 <osMessageQueueGet>
	  for (int i = 0; i < messages; i++)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	3301      	adds	r3, #1
 8003104:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003108:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800310c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003110:	429a      	cmp	r2, r3
 8003112:	dbe7      	blt.n	80030e4 <entryDisplay+0xb0>
	      osWaitForever);
	    }
	}

      input_old = AN_inputs_reader ();
 8003114:	463b      	mov	r3, r7
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f97a 	bl	8001410 <AN_inputs_reader>
 800311c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003120:	463d      	mov	r5, r7
 8003122:	6828      	ldr	r0, [r5, #0]
 8003124:	6869      	ldr	r1, [r5, #4]
 8003126:	68aa      	ldr	r2, [r5, #8]
 8003128:	68eb      	ldr	r3, [r5, #12]
 800312a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800312c:	8a2b      	ldrh	r3, [r5, #16]
 800312e:	8023      	strh	r3, [r4, #0]

      switch (switches_vec[0].second)
 8003130:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003134:	2b00      	cmp	r3, #0
 8003136:	d017      	beq.n	8003168 <entryDisplay+0x134>
 8003138:	2b01      	cmp	r3, #1
 800313a:	d12e      	bne.n	800319a <entryDisplay+0x166>
	{
	case on:
	  display_event = on_stay;
 800313c:	2303      	movs	r3, #3
 800313e:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
	  if (diff != 0 || messages != 0 || update_fft == 1)
 8003142:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8003146:	2b00      	cmp	r3, #0
 8003148:	d107      	bne.n	800315a <entryDisplay+0x126>
 800314a:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <entryDisplay+0x126>
 8003152:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8003156:	2b01      	cmp	r3, #1
 8003158:	d11c      	bne.n	8003194 <entryDisplay+0x160>
	    {
	      update_screen = 1;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
	      display_event = on_update;
 8003160:	2302      	movs	r3, #2
 8003162:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
	    }
	  break;
 8003166:	e015      	b.n	8003194 <entryDisplay+0x160>
	case off:
	  display_event = off_stay;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
	  if (diff != 0 || messages != 0 || update_fft == 1)
 800316e:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <entryDisplay+0x152>
 8003176:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <entryDisplay+0x152>
 800317e:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8003182:	2b01      	cmp	r3, #1
 8003184:	d108      	bne.n	8003198 <entryDisplay+0x164>
	    {
	      update_screen = 1;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
	      display_event = off_update;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
	    }
	  break;
 8003192:	e001      	b.n	8003198 <entryDisplay+0x164>
	  break;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <entryDisplay+0x166>
	  break;
 8003198:	bf00      	nop
	}

      if (messages != 0)
 800319a:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <entryDisplay+0x178>
	messages--;
 80031a2:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
      if (update_fft == 1)
 80031ac:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <entryDisplay+0x184>
	AN_fft_update_setter ();
 80031b4:	f7fe f91a 	bl	80013ec <AN_fft_update_setter>

      do
	{
	  switch (display_state)
 80031b8:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80031bc:	2b03      	cmp	r3, #3
 80031be:	f200 8102 	bhi.w	80033c6 <entryDisplay+0x392>
 80031c2:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <entryDisplay+0x194>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080032f5 	.word	0x080032f5
 80031cc:	080031d9 	.word	0x080031d9
 80031d0:	08003297 	.word	0x08003297
 80031d4:	08003367 	.word	0x08003367
	    {
	    case config:
	      switch (display_event)
 80031d8:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <entryDisplay+0x1bc>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f2c0 80e9 	blt.w	80033b8 <entryDisplay+0x384>
 80031e6:	3b02      	subs	r3, #2
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f200 80e5 	bhi.w	80033b8 <entryDisplay+0x384>
 80031ee:	e026      	b.n	800323e <entryDisplay+0x20a>
		{
		case off_update:
		  AN_graph_control (switches_vec[messages], 0);
 80031f0:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	33f0      	adds	r3, #240	@ 0xf0
 80031f8:	443b      	add	r3, r7
 80031fa:	f833 2ccc 	ldrh.w	r2, [r3, #-204]
 80031fe:	2300      	movs	r3, #0
 8003200:	f362 030f 	bfi	r3, r2, #0, #16
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fac2 	bl	8001790 <AN_graph_control>
		  if (AN_config_reader ().update_pwm == 1)
 800320c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe f913 	bl	800143c <AN_config_reader>
 8003216:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800321a:	2b01      	cmp	r3, #1
 800321c:	d102      	bne.n	8003224 <entryDisplay+0x1f0>
		    update_pwm = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
		  if (AN_config_reader ().fft_pass == 1)
 8003224:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe f907 	bl	800143c <AN_config_reader>
 800322e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8003232:	2b01      	cmp	r3, #1
 8003234:	d12d      	bne.n	8003292 <entryDisplay+0x25e>
		    send_fft = 1;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
		  break;
 800323c:	e029      	b.n	8003292 <entryDisplay+0x25e>
		case on_update:
		case on_stay:
		  AN_graph_control (switches_vec[messages], 0);
 800323e:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	33f0      	adds	r3, #240	@ 0xf0
 8003246:	443b      	add	r3, r7
 8003248:	f833 2ccc 	ldrh.w	r2, [r3, #-204]
 800324c:	2300      	movs	r3, #0
 800324e:	f362 030f 	bfi	r3, r2, #0, #16
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fa9b 	bl	8001790 <AN_graph_control>
		  if (AN_config_reader ().update_pwm == 1)
 800325a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe f8ec 	bl	800143c <AN_config_reader>
 8003264:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d102      	bne.n	8003272 <entryDisplay+0x23e>
		    update_pwm = 1;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
		  if (AN_config_reader ().fft_pass == 1)
 8003272:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f8e0 	bl	800143c <AN_config_reader>
 800327c:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <entryDisplay+0x256>
		    send_fft = 1;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
		  display_state = config_pre_off;
 800328a:	2302      	movs	r3, #2
 800328c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		  break;
 8003290:	e000      	b.n	8003294 <entryDisplay+0x260>
		  break;
 8003292:	bf00      	nop
		}
	      break;
 8003294:	e090      	b.n	80033b8 <entryDisplay+0x384>
	    case config_pre_off:
	      switch (display_event)
 8003296:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800329a:	2b01      	cmp	r3, #1
 800329c:	dc02      	bgt.n	80032a4 <entryDisplay+0x270>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da04      	bge.n	80032ac <entryDisplay+0x278>
		  HAL_TIM_Base_Start_IT (&htim3);
		  osMutexRelease (adcSaveHandle);
		  update_screen = 1;
		  break;
		}
	      break;
 80032a2:	e08b      	b.n	80033bc <entryDisplay+0x388>
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	f040 8089 	bne.w	80033bc <entryDisplay+0x388>
		  break;
 80032aa:	e022      	b.n	80032f2 <entryDisplay+0x2be>
		  display_state = fft;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		  AN_graph_fft (input_temp.encoder.position % 128);
 80032b2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe f8cf 	bl	8001460 <AN_graph_fft>
		  if (AN_config_reader ().update_pwm == 1)
 80032c2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f8b8 	bl	800143c <AN_config_reader>
 80032cc:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d102      	bne.n	80032da <entryDisplay+0x2a6>
		    update_pwm = 1;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
		  HAL_TIM_Base_Start_IT (&htim3);
 80032da:	482a      	ldr	r0, [pc, #168]	@ (8003384 <entryDisplay+0x350>)
 80032dc:	f003 fe24 	bl	8006f28 <HAL_TIM_Base_Start_IT>
		  osMutexRelease (adcSaveHandle);
 80032e0:	4b26      	ldr	r3, [pc, #152]	@ (800337c <entryDisplay+0x348>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f005 fc11 	bl	8008b0c <osMutexRelease>
		  update_screen = 1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
		  break;
 80032f0:	bf00      	nop
	      break;
 80032f2:	e063      	b.n	80033bc <entryDisplay+0x388>
	    case fft:
	      osMutexAcquire (fftReadHandle, portMAX_DELAY);
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <entryDisplay+0x354>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032fc:	4618      	mov	r0, r3
 80032fe:	f005 fba7 	bl	8008a50 <osMutexAcquire>
	      switch (display_event)
 8003302:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8003306:	2b03      	cmp	r3, #3
 8003308:	dc5a      	bgt.n	80033c0 <entryDisplay+0x38c>
 800330a:	2b02      	cmp	r3, #2
 800330c:	da1c      	bge.n	8003348 <entryDisplay+0x314>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <entryDisplay+0x2e4>
 8003312:	2b01      	cmp	r3, #1
 8003314:	d154      	bne.n	80033c0 <entryDisplay+0x38c>
		{
		case off_stay:
		  break;
 8003316:	e025      	b.n	8003364 <entryDisplay+0x330>
		case off_update:
		  AN_graph_fft (input_temp.encoder.position % 128);
 8003318:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe f89c 	bl	8001460 <AN_graph_fft>
		  if (AN_config_reader ().update_pwm == 1)
 8003328:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe f885 	bl	800143c <AN_config_reader>
 8003332:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d102      	bne.n	8003340 <entryDisplay+0x30c>
		    update_pwm = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
		  update_screen = 1;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
		  break;
 8003346:	e00d      	b.n	8003364 <entryDisplay+0x330>
		case on_stay:
		case on_update:
		  display_state = fft_pre_off;
 8003348:	2303      	movs	r3, #3
 800334a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		  osMutexAcquire (adcSaveHandle, portMAX_DELAY);
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <entryDisplay+0x348>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003356:	4618      	mov	r0, r3
 8003358:	f005 fb7a 	bl	8008a50 <osMutexAcquire>
		  HAL_TIM_Base_Stop_IT (&htim3);
 800335c:	4809      	ldr	r0, [pc, #36]	@ (8003384 <entryDisplay+0x350>)
 800335e:	f003 fe35 	bl	8006fcc <HAL_TIM_Base_Stop_IT>
		  break;
 8003362:	bf00      	nop
		}
	      break;
 8003364:	e02c      	b.n	80033c0 <entryDisplay+0x38c>
	    case fft_pre_off:
	      switch (display_event)
 8003366:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800336a:	2b01      	cmp	r3, #1
 800336c:	dc02      	bgt.n	8003374 <entryDisplay+0x340>
 800336e:	2b00      	cmp	r3, #0
 8003370:	da0c      	bge.n	800338c <entryDisplay+0x358>
		  AN_graph_control (switches_vec[messages], 1);
		  update_pwm = 1;
		  display_state = config;
		  break;
		}
	      break;
 8003372:	e027      	b.n	80033c4 <entryDisplay+0x390>
 8003374:	2b02      	cmp	r3, #2
 8003376:	d125      	bne.n	80033c4 <entryDisplay+0x390>
		  break;
 8003378:	e01d      	b.n	80033b6 <entryDisplay+0x382>
 800337a:	bf00      	nop
 800337c:	2000148c 	.word	0x2000148c
 8003380:	20001484 	.word	0x20001484
 8003384:	200013a8 	.word	0x200013a8
 8003388:	20001488 	.word	0x20001488
		  AN_graph_control (switches_vec[messages], 1);
 800338c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	33f0      	adds	r3, #240	@ 0xf0
 8003394:	443b      	add	r3, r7
 8003396:	f833 2ccc 	ldrh.w	r2, [r3, #-204]
 800339a:	2300      	movs	r3, #0
 800339c:	f362 030f 	bfi	r3, r2, #0, #16
 80033a0:	2101      	movs	r1, #1
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f9f4 	bl	8001790 <AN_graph_control>
		  update_pwm = 1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
		  display_state = config;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		  break;
 80033b4:	bf00      	nop
	      break;
 80033b6:	e005      	b.n	80033c4 <entryDisplay+0x390>
	      break;
 80033b8:	bf00      	nop
 80033ba:	e004      	b.n	80033c6 <entryDisplay+0x392>
	      break;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <entryDisplay+0x392>
	      break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <entryDisplay+0x392>
	      break;
 80033c4:	bf00      	nop
	    }
	}
      while (0 > --messages);
 80033c6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec

      if (send_fft == 1)
	{

	}
      if (update_pwm == 1)
 80033d0:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d114      	bne.n	8003402 <entryDisplay+0x3ce>
	{
	  disp_state = AN_config_reader ();
 80033d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe f82d 	bl	800143c <AN_config_reader>
	  PWM_change_freq_dma (disp_state.pwm_state.freq,
 80033e2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
			       disp_state.pwm_state.amp / (float) 33);
 80033e4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
	  PWM_change_freq_dma (disp_state.pwm_state.freq,
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fba9 	bl	8000b40 <__aeabi_i2f>
 80033ee:	4603      	mov	r3, r0
 80033f0:	490b      	ldr	r1, [pc, #44]	@ (8003420 <entryDisplay+0x3ec>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fcac 	bl	8000d50 <__aeabi_fdiv>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4619      	mov	r1, r3
 80033fc:	4620      	mov	r0, r4
 80033fe:	f000 f8c7 	bl	8003590 <PWM_change_freq_dma>
	}
      if (update_screen == 1)
 8003402:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <entryDisplay+0x3da>
	SSD1306_UpdateScreen ();
 800340a:	f000 fa55 	bl	80038b8 <SSD1306_UpdateScreen>

      osMutexRelease (fftReadHandle);
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <entryDisplay+0x3f0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f005 fb7a 	bl	8008b0c <osMutexRelease>
      osDelay (pdMS_TO_TICKS(50));
 8003418:	2032      	movs	r0, #50	@ 0x32
 800341a:	f005 fa51 	bl	80088c0 <osDelay>
    {
 800341e:	e628      	b.n	8003072 <entryDisplay+0x3e>
 8003420:	42040000 	.word	0x42040000
 8003424:	20001488 	.word	0x20001488

08003428 <entryDatos>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_entryDatos */
void entryDatos(void *argument)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryDatos */
  vTaskSetApplicationTaskTag (NULL, (void*) TAG_PROCESO);
 8003430:	2103      	movs	r1, #3
 8003432:	2000      	movs	r0, #0
 8003434:	f007 f9e2 	bl	800a7fc <vTaskSetApplicationTaskTag>

  /* Infinite loop */
  for (;;)
    {
      osMutexAcquire (adcSaveHandle, portMAX_DELAY);
 8003438:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <entryDatos+0x70>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003440:	4618      	mov	r0, r3
 8003442:	f005 fb05 	bl	8008a50 <osMutexAcquire>
      if (count == 255)
 8003446:	4b15      	ldr	r3, [pc, #84]	@ (800349c <entryDatos+0x74>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2bff      	cmp	r3, #255	@ 0xff
 800344c:	d11b      	bne.n	8003486 <entryDatos+0x5e>
	{
	  osMutexAcquire (fftReadHandle, portMAX_DELAY);
 800344e:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <entryDatos+0x78>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003456:	4618      	mov	r0, r3
 8003458:	f005 fafa 	bl	8008a50 <osMutexAcquire>
	  HAL_TIM_Base_Stop_IT (&htim3);
 800345c:	4811      	ldr	r0, [pc, #68]	@ (80034a4 <entryDatos+0x7c>)
 800345e:	f003 fdb5 	bl	8006fcc <HAL_TIM_Base_Stop_IT>
	  AN_fft_fast (adc_data, 256);
 8003462:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003466:	4810      	ldr	r0, [pc, #64]	@ (80034a8 <entryDatos+0x80>)
 8003468:	f7fe fe6a 	bl	8002140 <AN_fft_fast>
	  AN_fft_update_setter ();
 800346c:	f7fd ffbe 	bl	80013ec <AN_fft_update_setter>
	  HAL_TIM_Base_Start_IT (&htim3);
 8003470:	480c      	ldr	r0, [pc, #48]	@ (80034a4 <entryDatos+0x7c>)
 8003472:	f003 fd59 	bl	8006f28 <HAL_TIM_Base_Start_IT>
	  osMutexRelease (fftReadHandle);
 8003476:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <entryDatos+0x78>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f005 fb46 	bl	8008b0c <osMutexRelease>
	  count = 0;
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <entryDatos+0x74>)
 8003482:	2200      	movs	r2, #0
 8003484:	801a      	strh	r2, [r3, #0]
	}
      osMutexRelease (adcSaveHandle);
 8003486:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <entryDatos+0x70>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f005 fb3e 	bl	8008b0c <osMutexRelease>
      osDelay (64);
 8003490:	2040      	movs	r0, #64	@ 0x40
 8003492:	f005 fa15 	bl	80088c0 <osDelay>
      osMutexAcquire (adcSaveHandle, portMAX_DELAY);
 8003496:	e7cf      	b.n	8003438 <entryDatos+0x10>
 8003498:	2000148c 	.word	0x2000148c
 800349c:	20001690 	.word	0x20001690
 80034a0:	20001488 	.word	0x20001488
 80034a4:	200013a8 	.word	0x200013a8
 80034a8:	20001490 	.word	0x20001490

080034ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a21      	ldr	r2, [pc, #132]	@ (8003540 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034be:	f001 f97b 	bl	80047b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003540 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d115      	bne.n	80034f8 <HAL_TIM_PeriodElapsedCallback+0x4c>
    {
      if (AN_button_setter () == 1)
 80034cc:	f7fd ff44 	bl	8001358 <AN_button_setter>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d110      	bne.n	80034f8 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
	  inputs_t input_temp = AN_inputs_reader ();
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd ff98 	bl	8001410 <AN_inputs_reader>
	  switch_values_t switches_temp;
	  switches_temp.encoder = input_temp.button_encoder.value;
 80034e0:	7bbb      	ldrb	r3, [r7, #14]
 80034e2:	723b      	strb	r3, [r7, #8]
	  switches_temp.second = input_temp.button_sec.value;
 80034e4:	7dbb      	ldrb	r3, [r7, #22]
 80034e6:	727b      	strb	r3, [r7, #9]
	  osMessageQueuePut (switchesDataHandle, &switches_temp, NULL, 0);
 80034e8:	4b16      	ldr	r3, [pc, #88]	@ (8003544 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	f107 0108 	add.w	r1, r7, #8
 80034f0:	2300      	movs	r3, #0
 80034f2:	2200      	movs	r2, #0
 80034f4:	f005 fbe0 	bl	8008cb8 <osMessageQueuePut>
	}
    }

  if (htim->Instance == TIM3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d11a      	bne.n	8003538 <HAL_TIM_PeriodElapsedCallback+0x8c>
    {
      HAL_ADC_Start_IT (&hadc1);
 8003502:	4812      	ldr	r0, [pc, #72]	@ (800354c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003504:	f001 fa4c 	bl	80049a0 <HAL_ADC_Start_IT>
      if (count < 255)
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	2bfe      	cmp	r3, #254	@ 0xfe
 800350e:	d810      	bhi.n	8003532 <HAL_TIM_PeriodElapsedCallback+0x86>
	{
	  adc_data[count] = HAL_ADC_GetValue (&hadc1);
 8003510:	480e      	ldr	r0, [pc, #56]	@ (800354c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003512:	f001 fb2f 	bl	8004b74 <HAL_ADC_GetValue>
 8003516:	4601      	mov	r1, r0
 8003518:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	b289      	uxth	r1, r1
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003522:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  count++;
 8003526:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003530:	801a      	strh	r2, [r3, #0]
	}
      HAL_ADC_Stop_IT (&hadc1);
 8003532:	4806      	ldr	r0, [pc, #24]	@ (800354c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003534:	f001 faea 	bl	8004b0c <HAL_ADC_Stop_IT>
    }
  /* USER CODE END Callback 1 */
}
 8003538:	bf00      	nop
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40000800 	.word	0x40000800
 8003544:	20001484 	.word	0x20001484
 8003548:	40000400 	.word	0x40000400
 800354c:	200012dc 	.word	0x200012dc
 8003550:	20001690 	.word	0x20001690
 8003554:	20001490 	.word	0x20001490

08003558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800355c:	b672      	cpsid	i
}
 800355e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <Error_Handler+0x8>

08003564 <PWM_init>:
 *   @Channel: This is the channel used for the pwm
 *   @tim: Timer reference used for bit operation (TIM1,TIM2,etc)
 */
void
PWM_init (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  timer = htim;
 800356e:	4a05      	ldr	r2, [pc, #20]	@ (8003584 <PWM_init+0x20>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6013      	str	r3, [r2, #0]
  channel = Channel;
 8003574:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <PWM_init+0x24>)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	20001a7c 	.word	0x20001a7c
 8003588:	20001a80 	.word	0x20001a80
 800358c:	00000000 	.word	0x00000000

08003590 <PWM_change_freq_dma>:
 * @freq: This is the value of the frequency in Hz
 * @amplitude: Value of the amplitude from 0 to 1
 */
void
PWM_change_freq_dma (uint32_t freq, float amp)
{
 8003590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  if (freq <= MAX_FREQ && freq >= MIN_FREQ_LOW && amp <= 1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80035a2:	f200 80af 	bhi.w	8003704 <PWM_change_freq_dma+0x174>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	f240 80ab 	bls.w	8003704 <PWM_change_freq_dma+0x174>
 80035ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80035b2:	6838      	ldr	r0, [r7, #0]
 80035b4:	f7fd fcc0 	bl	8000f38 <__aeabi_fcmple>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d100      	bne.n	80035c0 <PWM_change_freq_dma+0x30>
	      * (sinf (2.0 * M_PI * step / (float) wave_size) + 1.0));
	}
      HAL_TIM_PWM_Start_DMA (timer, channel, (uint32_t*) wave, wave_size);
      ;
    }
}
 80035be:	e0a1      	b.n	8003704 <PWM_change_freq_dma+0x174>
      if (freq < MIN_FREQ_HIGH)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b31      	cmp	r3, #49	@ 0x31
 80035c4:	d817      	bhi.n	80035f6 <PWM_change_freq_dma+0x66>
	  freq *= 10;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	607b      	str	r3, [r7, #4]
	  amp *= 10;
 80035d2:	4951      	ldr	r1, [pc, #324]	@ (8003718 <PWM_change_freq_dma+0x188>)
 80035d4:	6838      	ldr	r0, [r7, #0]
 80035d6:	f7fd fb07 	bl	8000be8 <__aeabi_fmul>
 80035da:	4603      	mov	r3, r0
 80035dc:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_AUTORELOAD(timer, COUNTER_MAX*10);
 80035de:	4b4f      	ldr	r3, [pc, #316]	@ (800371c <PWM_change_freq_dma+0x18c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f44f 42e1 	mov.w	r2, #28800	@ 0x7080
 80035e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035ea:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <PWM_change_freq_dma+0x18c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f44f 42e1 	mov.w	r2, #28800	@ 0x7080
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	e00a      	b.n	800360c <PWM_change_freq_dma+0x7c>
	  __HAL_TIM_SET_AUTORELOAD(timer, COUNTER_MAX);
 80035f6:	4b49      	ldr	r3, [pc, #292]	@ (800371c <PWM_change_freq_dma+0x18c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 6234 	mov.w	r2, #2880	@ 0xb40
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003602:	4b46      	ldr	r3, [pc, #280]	@ (800371c <PWM_change_freq_dma+0x18c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f44f 6234 	mov.w	r2, #2880	@ 0xb40
 800360a:	60da      	str	r2, [r3, #12]
      uint16_t amplitude = amp * COUNTER_MAX;
 800360c:	4944      	ldr	r1, [pc, #272]	@ (8003720 <PWM_change_freq_dma+0x190>)
 800360e:	6838      	ldr	r0, [r7, #0]
 8003610:	f7fd faea 	bl	8000be8 <__aeabi_fmul>
 8003614:	4603      	mov	r3, r0
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fce8 	bl	8000fec <__aeabi_f2uiz>
 800361c:	4603      	mov	r3, r0
 800361e:	81bb      	strh	r3, [r7, #12]
      HAL_TIM_PWM_Stop_DMA (timer, channel);
 8003620:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <PWM_change_freq_dma+0x18c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a3f      	ldr	r2, [pc, #252]	@ (8003724 <PWM_change_freq_dma+0x194>)
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f003 fef6 	bl	800741c <HAL_TIM_PWM_Stop_DMA>
      uint16_t wave_size = BASE_FREQ / freq;
 8003630:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	817b      	strh	r3, [r7, #10]
      for (uint16_t step = 0; step < wave_size; step++)
 800363c:	2300      	movs	r3, #0
 800363e:	81fb      	strh	r3, [r7, #14]
 8003640:	e054      	b.n	80036ec <PWM_change_freq_dma+0x15c>
	  wave[step] = (uint16_t) ((float) amplitude / 2.0
 8003642:	89bb      	ldrh	r3, [r7, #12]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fa77 	bl	8000b38 <__aeabi_ui2f>
 800364a:	4603      	mov	r3, r0
 800364c:	4618      	mov	r0, r3
 800364e:	f7fc fee3 	bl	8000418 <__aeabi_f2d>
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800365a:	f7fd f85f 	bl	800071c <__aeabi_ddiv>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4614      	mov	r4, r2
 8003664:	461d      	mov	r5, r3
	      * (sinf (2.0 * M_PI * step / (float) wave_size) + 1.0));
 8003666:	89fb      	ldrh	r3, [r7, #14]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc fec3 	bl	80003f4 <__aeabi_i2d>
 800366e:	a328      	add	r3, pc, #160	@ (adr r3, 8003710 <PWM_change_freq_dma+0x180>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f7fc ff28 	bl	80004c8 <__aeabi_dmul>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4690      	mov	r8, r2
 800367e:	4699      	mov	r9, r3
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fa58 	bl	8000b38 <__aeabi_ui2f>
 8003688:	4603      	mov	r3, r0
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc fec4 	bl	8000418 <__aeabi_f2d>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4640      	mov	r0, r8
 8003696:	4649      	mov	r1, r9
 8003698:	f7fd f840 	bl	800071c <__aeabi_ddiv>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4610      	mov	r0, r2
 80036a2:	4619      	mov	r1, r3
 80036a4:	f7fd f942 	bl	800092c <__aeabi_d2f>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f009 f95e 	bl	800c96c <sinf>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc feb0 	bl	8000418 <__aeabi_f2d>
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003728 <PWM_change_freq_dma+0x198>)
 80036be:	f7fc fd4d 	bl	800015c <__adddf3>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4620      	mov	r0, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	f7fc fefd 	bl	80004c8 <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
	  wave[step] = (uint16_t) ((float) amplitude / 2.0
 80036d2:	89fc      	ldrh	r4, [r7, #14]
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	f7fd f908 	bl	80008ec <__aeabi_d2uiz>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29a      	uxth	r2, r3
 80036e0:	4b12      	ldr	r3, [pc, #72]	@ (800372c <PWM_change_freq_dma+0x19c>)
 80036e2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
      for (uint16_t step = 0; step < wave_size; step++)
 80036e6:	89fb      	ldrh	r3, [r7, #14]
 80036e8:	3301      	adds	r3, #1
 80036ea:	81fb      	strh	r3, [r7, #14]
 80036ec:	89fa      	ldrh	r2, [r7, #14]
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d3a6      	bcc.n	8003642 <PWM_change_freq_dma+0xb2>
      HAL_TIM_PWM_Start_DMA (timer, channel, (uint32_t*) wave, wave_size);
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <PWM_change_freq_dma+0x18c>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <PWM_change_freq_dma+0x194>)
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	897b      	ldrh	r3, [r7, #10]
 80036fe:	4a0b      	ldr	r2, [pc, #44]	@ (800372c <PWM_change_freq_dma+0x19c>)
 8003700:	f003 fcea 	bl	80070d8 <HAL_TIM_PWM_Start_DMA>
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800370e:	bf00      	nop
 8003710:	54442d18 	.word	0x54442d18
 8003714:	401921fb 	.word	0x401921fb
 8003718:	41200000 	.word	0x41200000
 800371c:	20001a7c 	.word	0x20001a7c
 8003720:	45340000 	.word	0x45340000
 8003724:	20001a80 	.word	0x20001a80
 8003728:	3ff00000 	.word	0x3ff00000
 800372c:	20001694 	.word	0x20001694

08003730 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003736:	f000 fcc1 	bl	80040bc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800373a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800373e:	2201      	movs	r2, #1
 8003740:	2178      	movs	r1, #120	@ 0x78
 8003742:	485b      	ldr	r0, [pc, #364]	@ (80038b0 <SSD1306_Init+0x180>)
 8003744:	f002 fb22 	bl	8005d8c <HAL_I2C_IsDeviceReady>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800374e:	2300      	movs	r3, #0
 8003750:	e0a9      	b.n	80038a6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003752:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003756:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003758:	e002      	b.n	8003760 <SSD1306_Init+0x30>
		p--;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3b01      	subs	r3, #1
 800375e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003766:	22ae      	movs	r2, #174	@ 0xae
 8003768:	2100      	movs	r1, #0
 800376a:	2078      	movs	r0, #120	@ 0x78
 800376c:	f000 fd20 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003770:	2220      	movs	r2, #32
 8003772:	2100      	movs	r1, #0
 8003774:	2078      	movs	r0, #120	@ 0x78
 8003776:	f000 fd1b 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800377a:	2210      	movs	r2, #16
 800377c:	2100      	movs	r1, #0
 800377e:	2078      	movs	r0, #120	@ 0x78
 8003780:	f000 fd16 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003784:	22b0      	movs	r2, #176	@ 0xb0
 8003786:	2100      	movs	r1, #0
 8003788:	2078      	movs	r0, #120	@ 0x78
 800378a:	f000 fd11 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800378e:	22c8      	movs	r2, #200	@ 0xc8
 8003790:	2100      	movs	r1, #0
 8003792:	2078      	movs	r0, #120	@ 0x78
 8003794:	f000 fd0c 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	2078      	movs	r0, #120	@ 0x78
 800379e:	f000 fd07 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80037a2:	2210      	movs	r2, #16
 80037a4:	2100      	movs	r1, #0
 80037a6:	2078      	movs	r0, #120	@ 0x78
 80037a8:	f000 fd02 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80037ac:	2240      	movs	r2, #64	@ 0x40
 80037ae:	2100      	movs	r1, #0
 80037b0:	2078      	movs	r0, #120	@ 0x78
 80037b2:	f000 fcfd 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80037b6:	2281      	movs	r2, #129	@ 0x81
 80037b8:	2100      	movs	r1, #0
 80037ba:	2078      	movs	r0, #120	@ 0x78
 80037bc:	f000 fcf8 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80037c0:	22ff      	movs	r2, #255	@ 0xff
 80037c2:	2100      	movs	r1, #0
 80037c4:	2078      	movs	r0, #120	@ 0x78
 80037c6:	f000 fcf3 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80037ca:	22a1      	movs	r2, #161	@ 0xa1
 80037cc:	2100      	movs	r1, #0
 80037ce:	2078      	movs	r0, #120	@ 0x78
 80037d0:	f000 fcee 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80037d4:	22a6      	movs	r2, #166	@ 0xa6
 80037d6:	2100      	movs	r1, #0
 80037d8:	2078      	movs	r0, #120	@ 0x78
 80037da:	f000 fce9 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80037de:	22a8      	movs	r2, #168	@ 0xa8
 80037e0:	2100      	movs	r1, #0
 80037e2:	2078      	movs	r0, #120	@ 0x78
 80037e4:	f000 fce4 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80037e8:	223f      	movs	r2, #63	@ 0x3f
 80037ea:	2100      	movs	r1, #0
 80037ec:	2078      	movs	r0, #120	@ 0x78
 80037ee:	f000 fcdf 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80037f2:	22a4      	movs	r2, #164	@ 0xa4
 80037f4:	2100      	movs	r1, #0
 80037f6:	2078      	movs	r0, #120	@ 0x78
 80037f8:	f000 fcda 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80037fc:	22d3      	movs	r2, #211	@ 0xd3
 80037fe:	2100      	movs	r1, #0
 8003800:	2078      	movs	r0, #120	@ 0x78
 8003802:	f000 fcd5 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003806:	2200      	movs	r2, #0
 8003808:	2100      	movs	r1, #0
 800380a:	2078      	movs	r0, #120	@ 0x78
 800380c:	f000 fcd0 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003810:	22d5      	movs	r2, #213	@ 0xd5
 8003812:	2100      	movs	r1, #0
 8003814:	2078      	movs	r0, #120	@ 0x78
 8003816:	f000 fccb 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800381a:	22f0      	movs	r2, #240	@ 0xf0
 800381c:	2100      	movs	r1, #0
 800381e:	2078      	movs	r0, #120	@ 0x78
 8003820:	f000 fcc6 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003824:	22d9      	movs	r2, #217	@ 0xd9
 8003826:	2100      	movs	r1, #0
 8003828:	2078      	movs	r0, #120	@ 0x78
 800382a:	f000 fcc1 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800382e:	2222      	movs	r2, #34	@ 0x22
 8003830:	2100      	movs	r1, #0
 8003832:	2078      	movs	r0, #120	@ 0x78
 8003834:	f000 fcbc 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003838:	22da      	movs	r2, #218	@ 0xda
 800383a:	2100      	movs	r1, #0
 800383c:	2078      	movs	r0, #120	@ 0x78
 800383e:	f000 fcb7 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003842:	2212      	movs	r2, #18
 8003844:	2100      	movs	r1, #0
 8003846:	2078      	movs	r0, #120	@ 0x78
 8003848:	f000 fcb2 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800384c:	22db      	movs	r2, #219	@ 0xdb
 800384e:	2100      	movs	r1, #0
 8003850:	2078      	movs	r0, #120	@ 0x78
 8003852:	f000 fcad 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003856:	2220      	movs	r2, #32
 8003858:	2100      	movs	r1, #0
 800385a:	2078      	movs	r0, #120	@ 0x78
 800385c:	f000 fca8 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003860:	228d      	movs	r2, #141	@ 0x8d
 8003862:	2100      	movs	r1, #0
 8003864:	2078      	movs	r0, #120	@ 0x78
 8003866:	f000 fca3 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800386a:	2214      	movs	r2, #20
 800386c:	2100      	movs	r1, #0
 800386e:	2078      	movs	r0, #120	@ 0x78
 8003870:	f000 fc9e 	bl	80041b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003874:	22af      	movs	r2, #175	@ 0xaf
 8003876:	2100      	movs	r1, #0
 8003878:	2078      	movs	r0, #120	@ 0x78
 800387a:	f000 fc99 	bl	80041b0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800387e:	222e      	movs	r2, #46	@ 0x2e
 8003880:	2100      	movs	r1, #0
 8003882:	2078      	movs	r0, #120	@ 0x78
 8003884:	f000 fc94 	bl	80041b0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003888:	2000      	movs	r0, #0
 800388a:	f000 f843 	bl	8003914 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800388e:	f000 f813 	bl	80038b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003892:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <SSD1306_Init+0x184>)
 8003894:	2200      	movs	r2, #0
 8003896:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <SSD1306_Init+0x184>)
 800389a:	2200      	movs	r2, #0
 800389c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <SSD1306_Init+0x184>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80038a4:	2301      	movs	r3, #1
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	2000130c 	.word	0x2000130c
 80038b4:	20001e84 	.word	0x20001e84

080038b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80038be:	2300      	movs	r3, #0
 80038c0:	71fb      	strb	r3, [r7, #7]
 80038c2:	e01d      	b.n	8003900 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	3b50      	subs	r3, #80	@ 0x50
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	2100      	movs	r1, #0
 80038ce:	2078      	movs	r0, #120	@ 0x78
 80038d0:	f000 fc6e 	bl	80041b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80038d4:	2200      	movs	r2, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	2078      	movs	r0, #120	@ 0x78
 80038da:	f000 fc69 	bl	80041b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80038de:	2210      	movs	r2, #16
 80038e0:	2100      	movs	r1, #0
 80038e2:	2078      	movs	r0, #120	@ 0x78
 80038e4:	f000 fc64 	bl	80041b0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	01db      	lsls	r3, r3, #7
 80038ec:	4a08      	ldr	r2, [pc, #32]	@ (8003910 <SSD1306_UpdateScreen+0x58>)
 80038ee:	441a      	add	r2, r3
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	2140      	movs	r1, #64	@ 0x40
 80038f4:	2078      	movs	r0, #120	@ 0x78
 80038f6:	f000 fbf5 	bl	80040e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	3301      	adds	r3, #1
 80038fe:	71fb      	strb	r3, [r7, #7]
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	2b07      	cmp	r3, #7
 8003904:	d9de      	bls.n	80038c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8003906:	bf00      	nop
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20001a84 	.word	0x20001a84

08003914 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <SSD1306_Fill+0x14>
 8003924:	2300      	movs	r3, #0
 8003926:	e000      	b.n	800392a <SSD1306_Fill+0x16>
 8003928:	23ff      	movs	r3, #255	@ 0xff
 800392a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392e:	4619      	mov	r1, r3
 8003930:	4803      	ldr	r0, [pc, #12]	@ (8003940 <SSD1306_Fill+0x2c>)
 8003932:	f008 fb1b 	bl	800bf6c <memset>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20001a84 	.word	0x20001a84

08003944 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	80fb      	strh	r3, [r7, #6]
 800394e:	460b      	mov	r3, r1
 8003950:	80bb      	strh	r3, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	70fb      	strb	r3, [r7, #3]
	if (
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b7f      	cmp	r3, #127	@ 0x7f
 800395a:	d848      	bhi.n	80039ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800395c:	88bb      	ldrh	r3, [r7, #4]
 800395e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003960:	d845      	bhi.n	80039ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003962:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <SSD1306_DrawPixel+0xb4>)
 8003964:	791b      	ldrb	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d11a      	bne.n	80039b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	88bb      	ldrh	r3, [r7, #4]
 8003982:	08db      	lsrs	r3, r3, #3
 8003984:	b298      	uxth	r0, r3
 8003986:	4603      	mov	r3, r0
 8003988:	01db      	lsls	r3, r3, #7
 800398a:	4413      	add	r3, r2
 800398c:	4a1b      	ldr	r2, [pc, #108]	@ (80039fc <SSD1306_DrawPixel+0xb8>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	b25a      	sxtb	r2, r3
 8003992:	88bb      	ldrh	r3, [r7, #4]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	4313      	orrs	r3, r2
 80039a2:	b259      	sxtb	r1, r3
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	4603      	mov	r3, r0
 80039a8:	01db      	lsls	r3, r3, #7
 80039aa:	4413      	add	r3, r2
 80039ac:	b2c9      	uxtb	r1, r1
 80039ae:	4a13      	ldr	r2, [pc, #76]	@ (80039fc <SSD1306_DrawPixel+0xb8>)
 80039b0:	54d1      	strb	r1, [r2, r3]
 80039b2:	e01d      	b.n	80039f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80039b4:	88fa      	ldrh	r2, [r7, #6]
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	08db      	lsrs	r3, r3, #3
 80039ba:	b298      	uxth	r0, r3
 80039bc:	4603      	mov	r3, r0
 80039be:	01db      	lsls	r3, r3, #7
 80039c0:	4413      	add	r3, r2
 80039c2:	4a0e      	ldr	r2, [pc, #56]	@ (80039fc <SSD1306_DrawPixel+0xb8>)
 80039c4:	5cd3      	ldrb	r3, [r2, r3]
 80039c6:	b25a      	sxtb	r2, r3
 80039c8:	88bb      	ldrh	r3, [r7, #4]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	2101      	movs	r1, #1
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	4013      	ands	r3, r2
 80039dc:	b259      	sxtb	r1, r3
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	4603      	mov	r3, r0
 80039e2:	01db      	lsls	r3, r3, #7
 80039e4:	4413      	add	r3, r2
 80039e6:	b2c9      	uxtb	r1, r1
 80039e8:	4a04      	ldr	r2, [pc, #16]	@ (80039fc <SSD1306_DrawPixel+0xb8>)
 80039ea:	54d1      	strb	r1, [r2, r3]
 80039ec:	e000      	b.n	80039f0 <SSD1306_DrawPixel+0xac>
		return;
 80039ee:	bf00      	nop
	}
}
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	20001e84 	.word	0x20001e84
 80039fc:	20001a84 	.word	0x20001a84

08003a00 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	460a      	mov	r2, r1
 8003a0a:	80fb      	strh	r3, [r7, #6]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003a10:	4a05      	ldr	r2, [pc, #20]	@ (8003a28 <SSD1306_GotoXY+0x28>)
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003a16:	4a04      	ldr	r2, [pc, #16]	@ (8003a28 <SSD1306_GotoXY+0x28>)
 8003a18:	88bb      	ldrh	r3, [r7, #4]
 8003a1a:	8053      	strh	r3, [r2, #2]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20001e84 	.word	0x20001e84

08003a2c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a3c:	4b39      	ldr	r3, [pc, #228]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	4413      	add	r3, r2
	if (
 8003a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a4a:	dc07      	bgt.n	8003a5c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003a4c:	4b35      	ldr	r3, [pc, #212]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003a4e:	885b      	ldrh	r3, [r3, #2]
 8003a50:	461a      	mov	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a58:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a5a:	dd01      	ble.n	8003a60 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e05d      	b.n	8003b1c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e04b      	b.n	8003afe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	3b20      	subs	r3, #32
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	7849      	ldrb	r1, [r1, #1]
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4619      	mov	r1, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	440b      	add	r3, r1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	e030      	b.n	8003aec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003a9a:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	b298      	uxth	r0, r3
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003aa8:	885a      	ldrh	r2, [r3, #2]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	79ba      	ldrb	r2, [r7, #6]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f7ff ff45 	bl	8003944 <SSD1306_DrawPixel>
 8003aba:	e014      	b.n	8003ae6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	b298      	uxth	r0, r3
 8003ac8:	4b16      	ldr	r3, [pc, #88]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003aca:	885a      	ldrh	r2, [r3, #2]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b299      	uxth	r1, r3
 8003ad4:	79bb      	ldrb	r3, [r7, #6]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f7ff ff2f 	bl	8003944 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d3c8      	bcc.n	8003a8a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	3301      	adds	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	785b      	ldrb	r3, [r3, #1]
 8003b02:	461a      	mov	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d3ad      	bcc.n	8003a66 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	7812      	ldrb	r2, [r2, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <SSD1306_Putc+0xf8>)
 8003b18:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20001e84 	.word	0x20001e84

08003b28 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003b36:	e012      	b.n	8003b5e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	79fa      	ldrb	r2, [r7, #7]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff73 	bl	8003a2c <SSD1306_Putc>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d002      	beq.n	8003b58 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	e008      	b.n	8003b6a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e8      	bne.n	8003b38 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	781b      	ldrb	r3, [r3, #0]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8003b72:	b590      	push	{r4, r7, lr}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4604      	mov	r4, r0
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	80fb      	strh	r3, [r7, #6]
 8003b84:	4603      	mov	r3, r0
 8003b86:	80bb      	strh	r3, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b94:	d901      	bls.n	8003b9a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8003b96:	237f      	movs	r3, #127	@ 0x7f
 8003b98:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b9e:	d901      	bls.n	8003ba4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003ba0:	237f      	movs	r3, #127	@ 0x7f
 8003ba2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8003ba4:	88bb      	ldrh	r3, [r7, #4]
 8003ba6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ba8:	d901      	bls.n	8003bae <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8003baa:	233f      	movs	r3, #63	@ 0x3f
 8003bac:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003bae:	883b      	ldrh	r3, [r7, #0]
 8003bb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bb2:	d901      	bls.n	8003bb8 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8003bb4:	233f      	movs	r3, #63	@ 0x3f
 8003bb6:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d205      	bcs.n	8003bcc <SSD1306_DrawLine+0x5a>
 8003bc0:	887a      	ldrh	r2, [r7, #2]
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	b21b      	sxth	r3, r3
 8003bca:	e004      	b.n	8003bd6 <SSD1306_DrawLine+0x64>
 8003bcc:	88fa      	ldrh	r2, [r7, #6]
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	b21b      	sxth	r3, r3
 8003bd6:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003bd8:	88ba      	ldrh	r2, [r7, #4]
 8003bda:	883b      	ldrh	r3, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d205      	bcs.n	8003bec <SSD1306_DrawLine+0x7a>
 8003be0:	883a      	ldrh	r2, [r7, #0]
 8003be2:	88bb      	ldrh	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	e004      	b.n	8003bf6 <SSD1306_DrawLine+0x84>
 8003bec:	88ba      	ldrh	r2, [r7, #4]
 8003bee:	883b      	ldrh	r3, [r7, #0]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d201      	bcs.n	8003c04 <SSD1306_DrawLine+0x92>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e001      	b.n	8003c08 <SSD1306_DrawLine+0x96>
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c08:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8003c0a:	88ba      	ldrh	r2, [r7, #4]
 8003c0c:	883b      	ldrh	r3, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d201      	bcs.n	8003c16 <SSD1306_DrawLine+0xa4>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e001      	b.n	8003c1a <SSD1306_DrawLine+0xa8>
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c1a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8003c1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003c20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dd06      	ble.n	8003c36 <SSD1306_DrawLine+0xc4>
 8003c28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c2c:	0fda      	lsrs	r2, r3, #31
 8003c2e:	4413      	add	r3, r2
 8003c30:	105b      	asrs	r3, r3, #1
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	e006      	b.n	8003c44 <SSD1306_DrawLine+0xd2>
 8003c36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c3a:	0fda      	lsrs	r2, r3, #31
 8003c3c:	4413      	add	r3, r2
 8003c3e:	105b      	asrs	r3, r3, #1
 8003c40:	425b      	negs	r3, r3
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8003c46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d129      	bne.n	8003ca2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8003c4e:	883a      	ldrh	r2, [r7, #0]
 8003c50:	88bb      	ldrh	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d205      	bcs.n	8003c62 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8003c56:	883b      	ldrh	r3, [r7, #0]
 8003c58:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003c5a:	88bb      	ldrh	r3, [r7, #4]
 8003c5c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003c5e:	893b      	ldrh	r3, [r7, #8]
 8003c60:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d205      	bcs.n	8003c76 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003c72:	893b      	ldrh	r3, [r7, #8]
 8003c74:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8003c76:	88bb      	ldrh	r3, [r7, #4]
 8003c78:	82bb      	strh	r3, [r7, #20]
 8003c7a:	e00c      	b.n	8003c96 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8003c7c:	8ab9      	ldrh	r1, [r7, #20]
 8003c7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fe5d 	bl	8003944 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003c8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3301      	adds	r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	82bb      	strh	r3, [r7, #20]
 8003c96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003c9a:	883b      	ldrh	r3, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dded      	ble.n	8003c7c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8003ca0:	e05f      	b.n	8003d62 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8003ca2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d129      	bne.n	8003cfe <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8003caa:	883a      	ldrh	r2, [r7, #0]
 8003cac:	88bb      	ldrh	r3, [r7, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d205      	bcs.n	8003cbe <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8003cb2:	883b      	ldrh	r3, [r7, #0]
 8003cb4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003cb6:	88bb      	ldrh	r3, [r7, #4]
 8003cb8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003cba:	893b      	ldrh	r3, [r7, #8]
 8003cbc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d205      	bcs.n	8003cd2 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	82bb      	strh	r3, [r7, #20]
 8003cd6:	e00c      	b.n	8003cf2 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8003cd8:	8abb      	ldrh	r3, [r7, #20]
 8003cda:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003cde:	88b9      	ldrh	r1, [r7, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fe2f 	bl	8003944 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8003ce6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	82bb      	strh	r3, [r7, #20]
 8003cf2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dded      	ble.n	8003cd8 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8003cfc:	e031      	b.n	8003d62 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8003cfe:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003d02:	88b9      	ldrh	r1, [r7, #4]
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fe1c 	bl	8003944 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d103      	bne.n	8003d1c <SSD1306_DrawLine+0x1aa>
 8003d14:	88ba      	ldrh	r2, [r7, #4]
 8003d16:	883b      	ldrh	r3, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d021      	beq.n	8003d60 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8003d1c:	8afb      	ldrh	r3, [r7, #22]
 8003d1e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8003d20:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d28:	425b      	negs	r3, r3
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	dd08      	ble.n	8003d40 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003d2e:	8afa      	ldrh	r2, [r7, #22]
 8003d30:	8a3b      	ldrh	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003d38:	89fa      	ldrh	r2, [r7, #14]
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8003d40:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	dad8      	bge.n	8003cfe <SSD1306_DrawLine+0x18c>
			err += dx;
 8003d4c:	8afa      	ldrh	r2, [r7, #22]
 8003d4e:	8a7b      	ldrh	r3, [r7, #18]
 8003d50:	4413      	add	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003d56:	89ba      	ldrh	r2, [r7, #12]
 8003d58:	88bb      	ldrh	r3, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8003d5e:	e7ce      	b.n	8003cfe <SSD1306_DrawLine+0x18c>
			break;
 8003d60:	bf00      	nop
		} 
	}
}
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}

08003d68 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4623      	mov	r3, r4
 8003d78:	80fb      	strh	r3, [r7, #6]
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	80bb      	strh	r3, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	807b      	strh	r3, [r7, #2]
 8003d82:	4613      	mov	r3, r2
 8003d84:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d8a:	d853      	bhi.n	8003e34 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8003d8c:	88bb      	ldrh	r3, [r7, #4]
 8003d8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d90:	d850      	bhi.n	8003e34 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	4413      	add	r3, r2
 8003d98:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d9a:	dd03      	ble.n	8003da4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003da2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8003da4:	88ba      	ldrh	r2, [r7, #4]
 8003da6:	883b      	ldrh	r3, [r7, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dac:	dd03      	ble.n	8003db6 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8003dae:	88bb      	ldrh	r3, [r7, #4]
 8003db0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003db4:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	4413      	add	r3, r2
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	88bc      	ldrh	r4, [r7, #4]
 8003dc0:	88b9      	ldrh	r1, [r7, #4]
 8003dc2:	88f8      	ldrh	r0, [r7, #6]
 8003dc4:	7e3b      	ldrb	r3, [r7, #24]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	4623      	mov	r3, r4
 8003dca:	f7ff fed2 	bl	8003b72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8003dce:	88ba      	ldrh	r2, [r7, #4]
 8003dd0:	883b      	ldrh	r3, [r7, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	b299      	uxth	r1, r3
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	4413      	add	r3, r2
 8003ddc:	b29c      	uxth	r4, r3
 8003dde:	88ba      	ldrh	r2, [r7, #4]
 8003de0:	883b      	ldrh	r3, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	88f8      	ldrh	r0, [r7, #6]
 8003de8:	7e3b      	ldrb	r3, [r7, #24]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	4622      	mov	r2, r4
 8003df0:	f7ff febf 	bl	8003b72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8003df4:	88ba      	ldrh	r2, [r7, #4]
 8003df6:	883b      	ldrh	r3, [r7, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	b29c      	uxth	r4, r3
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	88b9      	ldrh	r1, [r7, #4]
 8003e00:	88f8      	ldrh	r0, [r7, #6]
 8003e02:	7e3b      	ldrb	r3, [r7, #24]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4623      	mov	r3, r4
 8003e08:	f7ff feb3 	bl	8003b72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	4413      	add	r3, r2
 8003e12:	b298      	uxth	r0, r3
 8003e14:	88fa      	ldrh	r2, [r7, #6]
 8003e16:	887b      	ldrh	r3, [r7, #2]
 8003e18:	4413      	add	r3, r2
 8003e1a:	b29c      	uxth	r4, r3
 8003e1c:	88ba      	ldrh	r2, [r7, #4]
 8003e1e:	883b      	ldrh	r3, [r7, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	88b9      	ldrh	r1, [r7, #4]
 8003e26:	7e3b      	ldrb	r3, [r7, #24]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	f7ff fea0 	bl	8003b72 <SSD1306_DrawLine>
 8003e32:	e000      	b.n	8003e36 <SSD1306_DrawRectangle+0xce>
		return;
 8003e34:	bf00      	nop
}
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd90      	pop	{r4, r7, pc}

08003e3c <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	4604      	mov	r4, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	80fb      	strh	r3, [r7, #6]
 8003e4e:	4603      	mov	r3, r0
 8003e50:	80bb      	strh	r3, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	807b      	strh	r3, [r7, #2]
 8003e56:	4613      	mov	r3, r2
 8003e58:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e5e:	d836      	bhi.n	8003ece <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8003e60:	88bb      	ldrh	r3, [r7, #4]
 8003e62:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e64:	d833      	bhi.n	8003ece <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e6e:	dd03      	ble.n	8003e78 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003e76:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8003e78:	88ba      	ldrh	r2, [r7, #4]
 8003e7a:	883b      	ldrh	r3, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e80:	dd03      	ble.n	8003e8a <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8003e82:	88bb      	ldrh	r3, [r7, #4]
 8003e84:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8003e88:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e018      	b.n	8003ec2 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	88bb      	ldrh	r3, [r7, #4]
 8003e96:	4413      	add	r3, r2
 8003e98:	b299      	uxth	r1, r3
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b29c      	uxth	r4, r3
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	88bb      	ldrh	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	88f8      	ldrh	r0, [r7, #6]
 8003eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	f7ff fe5b 	bl	8003b72 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	883a      	ldrh	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d2e1      	bcs.n	8003e90 <SSD1306_DrawFilledRectangle+0x54>
 8003ecc:	e000      	b.n	8003ed0 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8003ece:	bf00      	nop
	}
}
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd90      	pop	{r4, r7, pc}

08003ed6 <SSD1306_DrawTriangle>:

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8003ed6:	b590      	push	{r4, r7, lr}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af02      	add	r7, sp, #8
 8003edc:	4604      	mov	r4, r0
 8003ede:	4608      	mov	r0, r1
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	80fb      	strh	r3, [r7, #6]
 8003ee8:	4603      	mov	r3, r0
 8003eea:	80bb      	strh	r3, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8003ef4:	883c      	ldrh	r4, [r7, #0]
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	88b9      	ldrh	r1, [r7, #4]
 8003efa:	88f8      	ldrh	r0, [r7, #6]
 8003efc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	4623      	mov	r3, r4
 8003f04:	f7ff fe35 	bl	8003b72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8003f08:	8bbc      	ldrh	r4, [r7, #28]
 8003f0a:	8b3a      	ldrh	r2, [r7, #24]
 8003f0c:	8839      	ldrh	r1, [r7, #0]
 8003f0e:	8878      	ldrh	r0, [r7, #2]
 8003f10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	4623      	mov	r3, r4
 8003f18:	f7ff fe2b 	bl	8003b72 <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8003f1c:	88bc      	ldrh	r4, [r7, #4]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	8bb9      	ldrh	r1, [r7, #28]
 8003f22:	8b38      	ldrh	r0, [r7, #24]
 8003f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	f7ff fe21 	bl	8003b72 <SSD1306_DrawLine>
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}

08003f38 <SSD1306_DrawFilledTriangle>:


void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b08d      	sub	sp, #52	@ 0x34
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	4604      	mov	r4, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	4623      	mov	r3, r4
 8003f48:	80fb      	strh	r3, [r7, #6]
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	80bb      	strh	r3, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	807b      	strh	r3, [r7, #2]
 8003f52:	4613      	mov	r3, r2
 8003f54:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003f56:	2300      	movs	r3, #0
 8003f58:	823b      	strh	r3, [r7, #16]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	81fb      	strh	r3, [r7, #14]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003f62:	2300      	movs	r3, #0
 8003f64:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003f66:	2300      	movs	r3, #0
 8003f68:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003f6e:	2300      	movs	r3, #0
 8003f70:	83fb      	strh	r3, [r7, #30]
 8003f72:	2300      	movs	r3, #0
 8003f74:	83bb      	strh	r3, [r7, #28]
 8003f76:	2300      	movs	r3, #0
 8003f78:	837b      	strh	r3, [r7, #26]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	833b      	strh	r3, [r7, #24]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	82fb      	strh	r3, [r7, #22]
 8003f82:	2300      	movs	r3, #0
 8003f84:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bfb8      	it	lt
 8003f94:	425b      	neglt	r3, r3
 8003f96:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8003f98:	883a      	ldrh	r2, [r7, #0]
 8003f9a:	88bb      	ldrh	r3, [r7, #4]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bfb8      	it	lt
 8003fa2:	425b      	neglt	r3, r3
 8003fa4:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 8003faa:	88bb      	ldrh	r3, [r7, #4]
 8003fac:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1) {
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d304      	bcc.n	8003fc0 <SSD1306_DrawFilledTriangle+0x88>
		xinc1 = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	843b      	strh	r3, [r7, #32]
 8003fbe:	e005      	b.n	8003fcc <SSD1306_DrawFilledTriangle+0x94>
	} else {
		xinc1 = -1;
 8003fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fc4:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = -1;
 8003fc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fca:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1) {
 8003fcc:	883a      	ldrh	r2, [r7, #0]
 8003fce:	88bb      	ldrh	r3, [r7, #4]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d304      	bcc.n	8003fde <SSD1306_DrawFilledTriangle+0xa6>
		yinc1 = 1;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	83bb      	strh	r3, [r7, #28]
 8003fdc:	e005      	b.n	8003fea <SSD1306_DrawFilledTriangle+0xb2>
	} else {
		yinc1 = -1;
 8003fde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fe2:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8003fe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fe8:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay){
 8003fea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003fee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	db10      	blt.n	8004018 <SSD1306_DrawFilledTriangle+0xe0>
		xinc1 = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	847b      	strh	r3, [r7, #34]	@ 0x22
		yinc2 = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8003ffe:	8a3b      	ldrh	r3, [r7, #16]
 8004000:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8004002:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004006:	0fda      	lsrs	r2, r3, #31
 8004008:	4413      	add	r3, r2
 800400a:	105b      	asrs	r3, r3, #1
 800400c:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 800400e:	89fb      	ldrh	r3, [r7, #14]
 8004010:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8004012:	8a3b      	ldrh	r3, [r7, #16]
 8004014:	82bb      	strh	r3, [r7, #20]
 8004016:	e00f      	b.n	8004038 <SSD1306_DrawFilledTriangle+0x100>
	} else {
		xinc2 = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8004020:	89fb      	ldrh	r3, [r7, #14]
 8004022:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8004024:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004028:	0fda      	lsrs	r2, r3, #31
 800402a:	4413      	add	r3, r2
 800402c:	105b      	asrs	r3, r3, #1
 800402e:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8004030:	8a3b      	ldrh	r3, [r7, #16]
 8004032:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8004034:	89fb      	ldrh	r3, [r7, #14]
 8004036:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8004038:	2300      	movs	r3, #0
 800403a:	827b      	strh	r3, [r7, #18]
 800403c:	e033      	b.n	80040a6 <SSD1306_DrawFilledTriangle+0x16e>
		SSD1306_DrawLine(x, y, x3, y3, color);
 800403e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8004040:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004042:	8fbc      	ldrh	r4, [r7, #60]	@ 0x3c
 8004044:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8004046:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	4623      	mov	r3, r4
 800404e:	f7ff fd90 	bl	8003b72 <SSD1306_DrawLine>

		num += numadd;
 8004052:	8b3a      	ldrh	r2, [r7, #24]
 8004054:	8afb      	ldrh	r3, [r7, #22]
 8004056:	4413      	add	r3, r2
 8004058:	b29b      	uxth	r3, r3
 800405a:	833b      	strh	r3, [r7, #24]
		if (num >= den) {
 800405c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004060:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004064:	429a      	cmp	r2, r3
 8004066:	db0e      	blt.n	8004086 <SSD1306_DrawFilledTriangle+0x14e>
			num -= den;
 8004068:	8b3a      	ldrh	r2, [r7, #24]
 800406a:	8b7b      	ldrh	r3, [r7, #26]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8004072:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004074:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004076:	4413      	add	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += yinc1;
 800407c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800407e:	8bfb      	ldrh	r3, [r7, #30]
 8004080:	4413      	add	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += xinc2;
 8004086:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004088:	8c3b      	ldrh	r3, [r7, #32]
 800408a:	4413      	add	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += yinc2;
 8004090:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004092:	8bbb      	ldrh	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800409a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	827b      	strh	r3, [r7, #18]
 80040a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80040aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	ddc5      	ble.n	800403e <SSD1306_DrawFilledTriangle+0x106>
	}
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	372c      	adds	r7, #44	@ 0x2c
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd90      	pop	{r4, r7, pc}

080040bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80040c2:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <ssd1306_I2C_Init+0x24>)
 80040c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80040c6:	e002      	b.n	80040ce <ssd1306_I2C_Init+0x12>
		p--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f9      	bne.n	80040c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	0003d090 	.word	0x0003d090

080040e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b0c7      	sub	sp, #284	@ 0x11c
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80040f2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80040f6:	600a      	str	r2, [r1, #0]
 80040f8:	4619      	mov	r1, r3
 80040fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040fe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004102:	4622      	mov	r2, r4
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800410a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800410e:	4602      	mov	r2, r0
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004116:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800411a:	460a      	mov	r2, r1
 800411c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800411e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004126:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800412a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004132:	2300      	movs	r3, #0
 8004134:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004138:	e015      	b.n	8004166 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800413a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800413e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004142:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	441a      	add	r2, r3
 800414a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800414e:	3301      	adds	r3, #1
 8004150:	7811      	ldrb	r1, [r2, #0]
 8004152:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004156:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800415a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800415c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004160:	3301      	adds	r3, #1
 8004162:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004166:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800416a:	b29b      	uxth	r3, r3
 800416c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004170:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8004174:	8812      	ldrh	r2, [r2, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d8df      	bhi.n	800413a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800417a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800417e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	b299      	uxth	r1, r3
 8004186:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800418a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	b29b      	uxth	r3, r3
 8004194:	f107 020c 	add.w	r2, r7, #12
 8004198:	200a      	movs	r0, #10
 800419a:	9000      	str	r0, [sp, #0]
 800419c:	4803      	ldr	r0, [pc, #12]	@ (80041ac <ssd1306_I2C_WriteMulti+0xc8>)
 800419e:	f001 fcf7 	bl	8005b90 <HAL_I2C_Master_Transmit>
}
 80041a2:	bf00      	nop
 80041a4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd90      	pop	{r4, r7, pc}
 80041ac:	2000130c 	.word	0x2000130c

080041b0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
 80041ba:	460b      	mov	r3, r1
 80041bc:	71bb      	strb	r3, [r7, #6]
 80041be:	4613      	mov	r3, r2
 80041c0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80041c2:	79bb      	ldrb	r3, [r7, #6]
 80041c4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80041c6:	797b      	ldrb	r3, [r7, #5]
 80041c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	b299      	uxth	r1, r3
 80041ce:	f107 020c 	add.w	r2, r7, #12
 80041d2:	230a      	movs	r3, #10
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2302      	movs	r3, #2
 80041d8:	4803      	ldr	r0, [pc, #12]	@ (80041e8 <ssd1306_I2C_Write+0x38>)
 80041da:	f001 fcd9 	bl	8005b90 <HAL_I2C_Master_Transmit>
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000130c 	.word	0x2000130c

080041ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80041f2:	4b18      	ldr	r3, [pc, #96]	@ (8004254 <HAL_MspInit+0x68>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <HAL_MspInit+0x68>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6193      	str	r3, [r2, #24]
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <HAL_MspInit+0x68>)
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <HAL_MspInit+0x68>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4a11      	ldr	r2, [pc, #68]	@ (8004254 <HAL_MspInit+0x68>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004214:	61d3      	str	r3, [r2, #28]
 8004216:	4b0f      	ldr	r3, [pc, #60]	@ (8004254 <HAL_MspInit+0x68>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004222:	2200      	movs	r2, #0
 8004224:	210f      	movs	r1, #15
 8004226:	f06f 0001 	mvn.w	r0, #1
 800422a:	f000 fef8 	bl	800501e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800422e:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <HAL_MspInit+0x6c>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	4a04      	ldr	r2, [pc, #16]	@ (8004258 <HAL_MspInit+0x6c>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	40010000 	.word	0x40010000

0800425c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <HAL_ADC_MspInit+0x6c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d121      	bne.n	80042c0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800427c:	4b13      	ldr	r3, [pc, #76]	@ (80042cc <HAL_ADC_MspInit+0x70>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4a12      	ldr	r2, [pc, #72]	@ (80042cc <HAL_ADC_MspInit+0x70>)
 8004282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004286:	6193      	str	r3, [r2, #24]
 8004288:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <HAL_ADC_MspInit+0x70>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004294:	4b0d      	ldr	r3, [pc, #52]	@ (80042cc <HAL_ADC_MspInit+0x70>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4a0c      	ldr	r2, [pc, #48]	@ (80042cc <HAL_ADC_MspInit+0x70>)
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	6193      	str	r3, [r2, #24]
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_ADC_MspInit+0x70>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042ac:	2304      	movs	r3, #4
 80042ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b0:	2303      	movs	r3, #3
 80042b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b4:	f107 0310 	add.w	r3, r7, #16
 80042b8:	4619      	mov	r1, r3
 80042ba:	4805      	ldr	r0, [pc, #20]	@ (80042d0 <HAL_ADC_MspInit+0x74>)
 80042bc:	f001 f940 	bl	8005540 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80042c0:	bf00      	nop
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40012400 	.word	0x40012400
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40010800 	.word	0x40010800

080042d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004364 <HAL_I2C_MspInit+0x90>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d132      	bne.n	800435a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004368 <HAL_I2C_MspInit+0x94>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <HAL_I2C_MspInit+0x94>)
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	6193      	str	r3, [r2, #24]
 8004300:	4b19      	ldr	r3, [pc, #100]	@ (8004368 <HAL_I2C_MspInit+0x94>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800430c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004312:	2312      	movs	r3, #18
 8004314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004316:	2303      	movs	r3, #3
 8004318:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	4619      	mov	r1, r3
 8004320:	4812      	ldr	r0, [pc, #72]	@ (800436c <HAL_I2C_MspInit+0x98>)
 8004322:	f001 f90d 	bl	8005540 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <HAL_I2C_MspInit+0x9c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	f043 0302 	orr.w	r3, r3, #2
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
 800433c:	4a0c      	ldr	r2, [pc, #48]	@ (8004370 <HAL_I2C_MspInit+0x9c>)
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004342:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_I2C_MspInit+0x94>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4a08      	ldr	r2, [pc, #32]	@ (8004368 <HAL_I2C_MspInit+0x94>)
 8004348:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800434c:	61d3      	str	r3, [r2, #28]
 800434e:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <HAL_I2C_MspInit+0x94>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800435a:	bf00      	nop
 800435c:	3728      	adds	r7, #40	@ 0x28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40005400 	.word	0x40005400
 8004368:	40021000 	.word	0x40021000
 800436c:	40010c00 	.word	0x40010c00
 8004370:	40010000 	.word	0x40010000

08004374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004384:	d135      	bne.n	80043f2 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004386:	4b29      	ldr	r3, [pc, #164]	@ (800442c <HAL_TIM_Base_MspInit+0xb8>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4a28      	ldr	r2, [pc, #160]	@ (800442c <HAL_TIM_Base_MspInit+0xb8>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	61d3      	str	r3, [r2, #28]
 8004392:	4b26      	ldr	r3, [pc, #152]	@ (800442c <HAL_TIM_Base_MspInit+0xb8>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043a0:	4a24      	ldr	r2, [pc, #144]	@ (8004434 <HAL_TIM_Base_MspInit+0xc0>)
 80043a2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043a4:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043a6:	2210      	movs	r2, #16
 80043a8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80043b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043b2:	2280      	movs	r2, #128	@ 0x80
 80043b4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043bc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043be:	4b1c      	ldr	r3, [pc, #112]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043c4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80043c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043c8:	2220      	movs	r2, #32
 80043ca:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80043cc:	4b18      	ldr	r3, [pc, #96]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80043d4:	4816      	ldr	r0, [pc, #88]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043d6:	f000 fe4d 	bl	8005074 <HAL_DMA_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80043e0:	f7ff f8ba 	bl	8003558 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a12      	ldr	r2, [pc, #72]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80043ea:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <HAL_TIM_Base_MspInit+0xbc>)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043f0:	e018      	b.n	8004424 <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a10      	ldr	r2, [pc, #64]	@ (8004438 <HAL_TIM_Base_MspInit+0xc4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d113      	bne.n	8004424 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043fc:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <HAL_TIM_Base_MspInit+0xb8>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4a0a      	ldr	r2, [pc, #40]	@ (800442c <HAL_TIM_Base_MspInit+0xb8>)
 8004402:	f043 0302 	orr.w	r3, r3, #2
 8004406:	61d3      	str	r3, [r2, #28]
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <HAL_TIM_Base_MspInit+0xb8>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004414:	2200      	movs	r2, #0
 8004416:	2105      	movs	r1, #5
 8004418:	201d      	movs	r0, #29
 800441a:	f000 fe00 	bl	800501e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800441e:	201d      	movs	r0, #29
 8004420:	f000 fe19 	bl	8005056 <HAL_NVIC_EnableIRQ>
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	200013f0 	.word	0x200013f0
 8004434:	40020058 	.word	0x40020058
 8004438:	40000400 	.word	0x40000400

0800443c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004444:	f107 0310 	add.w	r3, r7, #16
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800445a:	d117      	bne.n	800448c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445c:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <HAL_TIM_MspPostInit+0x58>)
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <HAL_TIM_MspPostInit+0x58>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	6193      	str	r3, [r2, #24]
 8004468:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <HAL_TIM_MspPostInit+0x58>)
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004474:	2301      	movs	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004478:	2302      	movs	r3, #2
 800447a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447c:	2302      	movs	r3, #2
 800447e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004480:	f107 0310 	add.w	r3, r7, #16
 8004484:	4619      	mov	r1, r3
 8004486:	4804      	ldr	r0, [pc, #16]	@ (8004498 <HAL_TIM_MspPostInit+0x5c>)
 8004488:	f001 f85a 	bl	8005540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	40010800 	.word	0x40010800

0800449c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004528 <HAL_UART_MspInit+0x8c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d131      	bne.n	8004520 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044bc:	4b1b      	ldr	r3, [pc, #108]	@ (800452c <HAL_UART_MspInit+0x90>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	@ (800452c <HAL_UART_MspInit+0x90>)
 80044c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044c6:	6193      	str	r3, [r2, #24]
 80044c8:	4b18      	ldr	r3, [pc, #96]	@ (800452c <HAL_UART_MspInit+0x90>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d4:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_UART_MspInit+0x90>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <HAL_UART_MspInit+0x90>)
 80044da:	f043 0304 	orr.w	r3, r3, #4
 80044de:	6193      	str	r3, [r2, #24]
 80044e0:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_UART_MspInit+0x90>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f6:	2303      	movs	r3, #3
 80044f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fa:	f107 0310 	add.w	r3, r7, #16
 80044fe:	4619      	mov	r1, r3
 8004500:	480b      	ldr	r0, [pc, #44]	@ (8004530 <HAL_UART_MspInit+0x94>)
 8004502:	f001 f81d 	bl	8005540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800450a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004514:	f107 0310 	add.w	r3, r7, #16
 8004518:	4619      	mov	r1, r3
 800451a:	4805      	ldr	r0, [pc, #20]	@ (8004530 <HAL_UART_MspInit+0x94>)
 800451c:	f001 f810 	bl	8005540 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004520:	bf00      	nop
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40013800 	.word	0x40013800
 800452c:	40021000 	.word	0x40021000
 8004530:	40010800 	.word	0x40010800

08004534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	@ 0x38
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800454a:	4b34      	ldr	r3, [pc, #208]	@ (800461c <HAL_InitTick+0xe8>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4a33      	ldr	r2, [pc, #204]	@ (800461c <HAL_InitTick+0xe8>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	61d3      	str	r3, [r2, #28]
 8004556:	4b31      	ldr	r3, [pc, #196]	@ (800461c <HAL_InitTick+0xe8>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004562:	f107 0210 	add.w	r2, r7, #16
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f002 fb87 	bl	8006c80 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800457c:	f002 fb58 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8004580:	6378      	str	r0, [r7, #52]	@ 0x34
 8004582:	e004      	b.n	800458e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004584:	f002 fb54 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8004588:	4603      	mov	r3, r0
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004590:	4a23      	ldr	r2, [pc, #140]	@ (8004620 <HAL_InitTick+0xec>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0c9b      	lsrs	r3, r3, #18
 8004598:	3b01      	subs	r3, #1
 800459a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800459c:	4b21      	ldr	r3, [pc, #132]	@ (8004624 <HAL_InitTick+0xf0>)
 800459e:	4a22      	ldr	r2, [pc, #136]	@ (8004628 <HAL_InitTick+0xf4>)
 80045a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80045a2:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_InitTick+0xf0>)
 80045a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80045a8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80045aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004624 <HAL_InitTick+0xf0>)
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004624 <HAL_InitTick+0xf0>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_InitTick+0xf0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <HAL_InitTick+0xf0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80045c2:	4818      	ldr	r0, [pc, #96]	@ (8004624 <HAL_InitTick+0xf0>)
 80045c4:	f002 fc60 	bl	8006e88 <HAL_TIM_Base_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80045ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11b      	bne.n	800460e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80045d6:	4813      	ldr	r0, [pc, #76]	@ (8004624 <HAL_InitTick+0xf0>)
 80045d8:	f002 fca6 	bl	8006f28 <HAL_TIM_Base_Start_IT>
 80045dc:	4603      	mov	r3, r0
 80045de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80045e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d111      	bne.n	800460e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045ea:	201e      	movs	r0, #30
 80045ec:	f000 fd33 	bl	8005056 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d808      	bhi.n	8004608 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80045f6:	2200      	movs	r2, #0
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	201e      	movs	r0, #30
 80045fc:	f000 fd0f 	bl	800501e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004600:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <HAL_InitTick+0xf8>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e002      	b.n	800460e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800460e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004612:	4618      	mov	r0, r3
 8004614:	3738      	adds	r7, #56	@ 0x38
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
 8004620:	431bde83 	.word	0x431bde83
 8004624:	20001e8c 	.word	0x20001e8c
 8004628:	40000800 	.word	0x40000800
 800462c:	200008b8 	.word	0x200008b8

08004630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <NMI_Handler+0x4>

08004638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800463c:	bf00      	nop
 800463e:	e7fd      	b.n	800463c <HardFault_Handler+0x4>

08004640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <MemManage_Handler+0x4>

08004648 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <BusFault_Handler+0x4>

08004650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <UsageFault_Handler+0x4>

08004658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8004668:	4802      	ldr	r0, [pc, #8]	@ (8004674 <DMA1_Channel5_IRQHandler+0x10>)
 800466a:	f000 fe35 	bl	80052d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800466e:	bf00      	nop
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	200013f0 	.word	0x200013f0

08004678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800467c:	4802      	ldr	r0, [pc, #8]	@ (8004688 <TIM3_IRQHandler+0x10>)
 800467e:	f002 ff93 	bl	80075a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200013a8 	.word	0x200013a8

0800468c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004690:	4802      	ldr	r0, [pc, #8]	@ (800469c <TIM4_IRQHandler+0x10>)
 8004692:	f002 ff89 	bl	80075a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20001e8c 	.word	0x20001e8c

080046a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80046a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80046a8:	f001 f916 	bl	80058d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80046b0:	f001 f912 	bl	80058d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80046b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80046b8:	f001 f90e 	bl	80058d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80046bc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80046c0:	f001 f90a 	bl	80058d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046d0:	4a14      	ldr	r2, [pc, #80]	@ (8004724 <_sbrk+0x5c>)
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <_sbrk+0x60>)
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046dc:	4b13      	ldr	r3, [pc, #76]	@ (800472c <_sbrk+0x64>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <_sbrk+0x64>)
 80046e6:	4a12      	ldr	r2, [pc, #72]	@ (8004730 <_sbrk+0x68>)
 80046e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ea:	4b10      	ldr	r3, [pc, #64]	@ (800472c <_sbrk+0x64>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d207      	bcs.n	8004708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046f8:	f007 fc96 	bl	800c028 <__errno>
 80046fc:	4603      	mov	r3, r0
 80046fe:	220c      	movs	r2, #12
 8004700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004706:	e009      	b.n	800471c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004708:	4b08      	ldr	r3, [pc, #32]	@ (800472c <_sbrk+0x64>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800470e:	4b07      	ldr	r3, [pc, #28]	@ (800472c <_sbrk+0x64>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	4a05      	ldr	r2, [pc, #20]	@ (800472c <_sbrk+0x64>)
 8004718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20005000 	.word	0x20005000
 8004728:	00000400 	.word	0x00000400
 800472c:	20001ed4 	.word	0x20001ed4
 8004730:	20003988 	.word	0x20003988

08004734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004738:	bf00      	nop
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004740:	f7ff fff8 	bl	8004734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004744:	480b      	ldr	r0, [pc, #44]	@ (8004774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004746:	490c      	ldr	r1, [pc, #48]	@ (8004778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004748:	4a0c      	ldr	r2, [pc, #48]	@ (800477c <LoopFillZerobss+0x16>)
  movs r3, #0
 800474a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800474c:	e002      	b.n	8004754 <LoopCopyDataInit>

0800474e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800474e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004752:	3304      	adds	r3, #4

08004754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004758:	d3f9      	bcc.n	800474e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800475a:	4a09      	ldr	r2, [pc, #36]	@ (8004780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800475c:	4c09      	ldr	r4, [pc, #36]	@ (8004784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800475e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004760:	e001      	b.n	8004766 <LoopFillZerobss>

08004762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004764:	3204      	adds	r2, #4

08004766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004768:	d3fb      	bcc.n	8004762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800476a:	f007 fc63 	bl	800c034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800476e:	f7fe f907 	bl	8002980 <main>
  bx lr
 8004772:	4770      	bx	lr
  ldr r0, =_sdata
 8004774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004778:	2000091c 	.word	0x2000091c
  ldr r2, =_sidata
 800477c:	0800e360 	.word	0x0800e360
  ldr r2, =_sbss
 8004780:	2000091c 	.word	0x2000091c
  ldr r4, =_ebss
 8004784:	20003988 	.word	0x20003988

08004788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004788:	e7fe      	b.n	8004788 <ADC1_2_IRQHandler>
	...

0800478c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004790:	4b08      	ldr	r3, [pc, #32]	@ (80047b4 <HAL_Init+0x28>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a07      	ldr	r2, [pc, #28]	@ (80047b4 <HAL_Init+0x28>)
 8004796:	f043 0310 	orr.w	r3, r3, #16
 800479a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800479c:	2003      	movs	r0, #3
 800479e:	f000 fc33 	bl	8005008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047a2:	200f      	movs	r0, #15
 80047a4:	f7ff fec6 	bl	8004534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a8:	f7ff fd20 	bl	80041ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40022000 	.word	0x40022000

080047b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_IncTick+0x1c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <HAL_IncTick+0x20>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4413      	add	r3, r2
 80047c8:	4a03      	ldr	r2, [pc, #12]	@ (80047d8 <HAL_IncTick+0x20>)
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	200008bc 	.word	0x200008bc
 80047d8:	20001ed8 	.word	0x20001ed8

080047dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return uwTick;
 80047e0:	4b02      	ldr	r3, [pc, #8]	@ (80047ec <HAL_GetTick+0x10>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr
 80047ec:	20001ed8 	.word	0x20001ed8

080047f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e0be      	b.n	8004990 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fd14 	bl	800425c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fafb 	bl	8004e30 <ADC_ConversionStop_Disable>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8099 	bne.w	800497e <HAL_ADC_Init+0x18e>
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 8095 	bne.w	800497e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800485c:	f023 0302 	bic.w	r3, r3, #2
 8004860:	f043 0202 	orr.w	r2, r3, #2
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004870:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004878:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004888:	d003      	beq.n	8004892 <HAL_ADC_Init+0xa2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d102      	bne.n	8004898 <HAL_ADC_Init+0xa8>
 8004892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004896:	e000      	b.n	800489a <HAL_ADC_Init+0xaa>
 8004898:	2300      	movs	r3, #0
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7d1b      	ldrb	r3, [r3, #20]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d119      	bne.n	80048dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7b1b      	ldrb	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	035a      	lsls	r2, r3, #13
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e00b      	b.n	80048dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	4b28      	ldr	r3, [pc, #160]	@ (8004998 <HAL_ADC_Init+0x1a8>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	430b      	orrs	r3, r1
 8004902:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800490c:	d003      	beq.n	8004916 <HAL_ADC_Init+0x126>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d104      	bne.n	8004920 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	3b01      	subs	r3, #1
 800491c:	051b      	lsls	r3, r3, #20
 800491e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	430a      	orrs	r2, r1
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	4b18      	ldr	r3, [pc, #96]	@ (800499c <HAL_ADC_Init+0x1ac>)
 800493c:	4013      	ands	r3, r2
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	d10b      	bne.n	800495c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	f043 0201 	orr.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800495a:	e018      	b.n	800498e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	f023 0312 	bic.w	r3, r3, #18
 8004964:	f043 0210 	orr.w	r2, r3, #16
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	f043 0201 	orr.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800497c:	e007      	b.n	800498e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004982:	f043 0210 	orr.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	ffe1f7fd 	.word	0xffe1f7fd
 800499c:	ff1f0efe 	.word	0xff1f0efe

080049a0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_Start_IT+0x1a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0a0      	b.n	8004afc <HAL_ADC_Start_IT+0x15c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f9da 	bl	8004d7c <ADC_Enable>
 80049c8:	4603      	mov	r3, r0
 80049ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 808f 	bne.w	8004af2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a45      	ldr	r2, [pc, #276]	@ (8004b04 <HAL_ADC_Start_IT+0x164>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d105      	bne.n	80049fe <HAL_ADC_Start_IT+0x5e>
 80049f2:	4b45      	ldr	r3, [pc, #276]	@ (8004b08 <HAL_ADC_Start_IT+0x168>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d026      	beq.n	8004a66 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a28:	e01d      	b.n	8004a66 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a33      	ldr	r2, [pc, #204]	@ (8004b08 <HAL_ADC_Start_IT+0x168>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_ADC_Start_IT+0xaa>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2f      	ldr	r2, [pc, #188]	@ (8004b04 <HAL_ADC_Start_IT+0x164>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10d      	bne.n	8004a66 <HAL_ADC_Start_IT+0xc6>
 8004a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b08 <HAL_ADC_Start_IT+0x168>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	f023 0206 	bic.w	r2, r3, #6
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a7e:	e002      	b.n	8004a86 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f06f 0202 	mvn.w	r2, #2
 8004a96:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0220 	orr.w	r2, r2, #32
 8004aa6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004ab2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004ab6:	d113      	bne.n	8004ae0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004abc:	4a11      	ldr	r2, [pc, #68]	@ (8004b04 <HAL_ADC_Start_IT+0x164>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d105      	bne.n	8004ace <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004ac2:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <HAL_ADC_Start_IT+0x168>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d108      	bne.n	8004ae0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004adc:	609a      	str	r2, [r3, #8]
 8004ade:	e00c      	b.n	8004afa <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	e003      	b.n	8004afa <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40012800 	.word	0x40012800
 8004b08:	40012400 	.word	0x40012400

08004b0c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_ADC_Stop_IT+0x1a>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e022      	b.n	8004b6c <HAL_ADC_Stop_IT+0x60>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f97e 	bl	8004e30 <ADC_ConversionStop_Disable>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d111      	bne.n	8004b62 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0220 	bic.w	r2, r2, #32
 8004b4c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	f043 0201 	orr.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x20>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0dc      	b.n	8004d66 <HAL_ADC_ConfigChannel+0x1da>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b06      	cmp	r3, #6
 8004bba:	d81c      	bhi.n	8004bf6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	3b05      	subs	r3, #5
 8004bce:	221f      	movs	r2, #31
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	4019      	ands	r1, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	3b05      	subs	r3, #5
 8004be8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bf4:	e03c      	b.n	8004c70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d81c      	bhi.n	8004c38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3b23      	subs	r3, #35	@ 0x23
 8004c10:	221f      	movs	r2, #31
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	4019      	ands	r1, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	3b23      	subs	r3, #35	@ 0x23
 8004c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c36:	e01b      	b.n	8004c70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	3b41      	subs	r3, #65	@ 0x41
 8004c4a:	221f      	movs	r2, #31
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	4019      	ands	r1, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	3b41      	subs	r3, #65	@ 0x41
 8004c64:	fa00 f203 	lsl.w	r2, r0, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b09      	cmp	r3, #9
 8004c76:	d91c      	bls.n	8004cb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68d9      	ldr	r1, [r3, #12]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	3b1e      	subs	r3, #30
 8004c8a:	2207      	movs	r2, #7
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	4019      	ands	r1, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6898      	ldr	r0, [r3, #8]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3b1e      	subs	r3, #30
 8004ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e019      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6919      	ldr	r1, [r3, #16]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4413      	add	r3, r2
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	4019      	ands	r1, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6898      	ldr	r0, [r3, #8]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	fa00 f203 	lsl.w	r2, r0, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d003      	beq.n	8004cf6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cf2:	2b11      	cmp	r3, #17
 8004cf4:	d132      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <HAL_ADC_ConfigChannel+0x1e4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d125      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d126      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004d1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d11a      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d26:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <HAL_ADC_ConfigChannel+0x1e8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a13      	ldr	r2, [pc, #76]	@ (8004d78 <HAL_ADC_ConfigChannel+0x1ec>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	0c9a      	lsrs	r2, r3, #18
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d3c:	e002      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f9      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x1b2>
 8004d4a:	e007      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f043 0220 	orr.w	r2, r3, #32
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	40012400 	.word	0x40012400
 8004d74:	200008b4 	.word	0x200008b4
 8004d78:	431bde83 	.word	0x431bde83

08004d7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d040      	beq.n	8004e1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004daa:	4b1f      	ldr	r3, [pc, #124]	@ (8004e28 <ADC_Enable+0xac>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1f      	ldr	r2, [pc, #124]	@ (8004e2c <ADC_Enable+0xb0>)
 8004db0:	fba2 2303 	umull	r2, r3, r2, r3
 8004db4:	0c9b      	lsrs	r3, r3, #18
 8004db6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004db8:	e002      	b.n	8004dc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f9      	bne.n	8004dba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004dc6:	f7ff fd09 	bl	80047dc <HAL_GetTick>
 8004dca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004dcc:	e01f      	b.n	8004e0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dce:	f7ff fd05 	bl	80047dc <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d918      	bls.n	8004e0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d011      	beq.n	8004e0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	f043 0210 	orr.w	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e007      	b.n	8004e1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d1d8      	bne.n	8004dce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200008b4 	.word	0x200008b4
 8004e2c:	431bde83 	.word	0x431bde83

08004e30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d12e      	bne.n	8004ea8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e5a:	f7ff fcbf 	bl	80047dc <HAL_GetTick>
 8004e5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004e60:	e01b      	b.n	8004e9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e62:	f7ff fcbb 	bl	80047dc <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d914      	bls.n	8004e9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10d      	bne.n	8004e9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	f043 0210 	orr.w	r2, r3, #16
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e007      	b.n	8004eaa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d0dc      	beq.n	8004e62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004edc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ee6:	4a04      	ldr	r2, [pc, #16]	@ (8004ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	60d3      	str	r3, [r2, #12]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	e000ed00 	.word	0xe000ed00

08004efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f00:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <__NVIC_GetPriorityGrouping+0x18>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	0a1b      	lsrs	r3, r3, #8
 8004f06:	f003 0307 	and.w	r3, r3, #7
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	db0b      	blt.n	8004f42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	f003 021f 	and.w	r2, r3, #31
 8004f30:	4906      	ldr	r1, [pc, #24]	@ (8004f4c <__NVIC_EnableIRQ+0x34>)
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	2001      	movs	r0, #1
 8004f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	e000e100 	.word	0xe000e100

08004f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	6039      	str	r1, [r7, #0]
 8004f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	db0a      	blt.n	8004f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	490c      	ldr	r1, [pc, #48]	@ (8004f9c <__NVIC_SetPriority+0x4c>)
 8004f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6e:	0112      	lsls	r2, r2, #4
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	440b      	add	r3, r1
 8004f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f78:	e00a      	b.n	8004f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	4908      	ldr	r1, [pc, #32]	@ (8004fa0 <__NVIC_SetPriority+0x50>)
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	3b04      	subs	r3, #4
 8004f88:	0112      	lsls	r2, r2, #4
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	761a      	strb	r2, [r3, #24]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	e000e100 	.word	0xe000e100
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	@ 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f1c3 0307 	rsb	r3, r3, #7
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	bf28      	it	cs
 8004fc2:	2304      	movcs	r3, #4
 8004fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	2b06      	cmp	r3, #6
 8004fcc:	d902      	bls.n	8004fd4 <NVIC_EncodePriority+0x30>
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3b03      	subs	r3, #3
 8004fd2:	e000      	b.n	8004fd6 <NVIC_EncodePriority+0x32>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43da      	mvns	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff6:	43d9      	mvns	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ffc:	4313      	orrs	r3, r2
         );
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3724      	adds	r7, #36	@ 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ff4f 	bl	8004eb4 <__NVIC_SetPriorityGrouping>
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800501e:	b580      	push	{r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af00      	add	r7, sp, #0
 8005024:	4603      	mov	r3, r0
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005030:	f7ff ff64 	bl	8004efc <__NVIC_GetPriorityGrouping>
 8005034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f7ff ffb2 	bl	8004fa4 <NVIC_EncodePriority>
 8005040:	4602      	mov	r2, r0
 8005042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ff81 	bl	8004f50 <__NVIC_SetPriority>
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	4603      	mov	r3, r0
 800505e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff ff57 	bl	8004f18 <__NVIC_EnableIRQ>
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e043      	b.n	8005112 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	4b22      	ldr	r3, [pc, #136]	@ (800511c <HAL_DMA_Init+0xa8>)
 8005092:	4413      	add	r3, r2
 8005094:	4a22      	ldr	r2, [pc, #136]	@ (8005120 <HAL_DMA_Init+0xac>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	009a      	lsls	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <HAL_DMA_Init+0xb0>)
 80050a6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80050be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80050c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80050cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	bffdfff8 	.word	0xbffdfff8
 8005120:	cccccccd 	.word	0xcccccccd
 8005124:	40020000 	.word	0x40020000

08005128 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_DMA_Start_IT+0x20>
 8005144:	2302      	movs	r3, #2
 8005146:	e04b      	b.n	80051e0 <HAL_DMA_Start_IT+0xb8>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d13a      	bne.n	80051d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f9af 	bl	80054e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 020e 	orr.w	r2, r2, #14
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e00f      	b.n	80051c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0204 	bic.w	r2, r2, #4
 80051ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 020a 	orr.w	r2, r2, #10
 80051be:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e005      	b.n	80051de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80051da:	2302      	movs	r3, #2
 80051dc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d005      	beq.n	800520c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2204      	movs	r2, #4
 8005204:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
 800520a:	e051      	b.n	80052b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 020e 	bic.w	r2, r2, #14
 800521a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <HAL_DMA_Abort_IT+0xd4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d029      	beq.n	800528a <HAL_DMA_Abort_IT+0xa2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	@ (80052c0 <HAL_DMA_Abort_IT+0xd8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <HAL_DMA_Abort_IT+0x9e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_DMA_Abort_IT+0xdc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01a      	beq.n	8005280 <HAL_DMA_Abort_IT+0x98>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1e      	ldr	r2, [pc, #120]	@ (80052c8 <HAL_DMA_Abort_IT+0xe0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d012      	beq.n	800527a <HAL_DMA_Abort_IT+0x92>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_DMA_Abort_IT+0xe4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00a      	beq.n	8005274 <HAL_DMA_Abort_IT+0x8c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <HAL_DMA_Abort_IT+0xe8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d102      	bne.n	800526e <HAL_DMA_Abort_IT+0x86>
 8005268:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800526c:	e00e      	b.n	800528c <HAL_DMA_Abort_IT+0xa4>
 800526e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005272:	e00b      	b.n	800528c <HAL_DMA_Abort_IT+0xa4>
 8005274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005278:	e008      	b.n	800528c <HAL_DMA_Abort_IT+0xa4>
 800527a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800527e:	e005      	b.n	800528c <HAL_DMA_Abort_IT+0xa4>
 8005280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005284:	e002      	b.n	800528c <HAL_DMA_Abort_IT+0xa4>
 8005286:	2310      	movs	r3, #16
 8005288:	e000      	b.n	800528c <HAL_DMA_Abort_IT+0xa4>
 800528a:	2301      	movs	r3, #1
 800528c:	4a11      	ldr	r2, [pc, #68]	@ (80052d4 <HAL_DMA_Abort_IT+0xec>)
 800528e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
    } 
  }
  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40020008 	.word	0x40020008
 80052c0:	4002001c 	.word	0x4002001c
 80052c4:	40020030 	.word	0x40020030
 80052c8:	40020044 	.word	0x40020044
 80052cc:	40020058 	.word	0x40020058
 80052d0:	4002006c 	.word	0x4002006c
 80052d4:	40020000 	.word	0x40020000

080052d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	2204      	movs	r2, #4
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d04f      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xc8>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d04a      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d107      	bne.n	8005328 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a66      	ldr	r2, [pc, #408]	@ (80054c8 <HAL_DMA_IRQHandler+0x1f0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d029      	beq.n	8005386 <HAL_DMA_IRQHandler+0xae>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a65      	ldr	r2, [pc, #404]	@ (80054cc <HAL_DMA_IRQHandler+0x1f4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d022      	beq.n	8005382 <HAL_DMA_IRQHandler+0xaa>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a63      	ldr	r2, [pc, #396]	@ (80054d0 <HAL_DMA_IRQHandler+0x1f8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01a      	beq.n	800537c <HAL_DMA_IRQHandler+0xa4>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a62      	ldr	r2, [pc, #392]	@ (80054d4 <HAL_DMA_IRQHandler+0x1fc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d012      	beq.n	8005376 <HAL_DMA_IRQHandler+0x9e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a60      	ldr	r2, [pc, #384]	@ (80054d8 <HAL_DMA_IRQHandler+0x200>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00a      	beq.n	8005370 <HAL_DMA_IRQHandler+0x98>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a5f      	ldr	r2, [pc, #380]	@ (80054dc <HAL_DMA_IRQHandler+0x204>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d102      	bne.n	800536a <HAL_DMA_IRQHandler+0x92>
 8005364:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005368:	e00e      	b.n	8005388 <HAL_DMA_IRQHandler+0xb0>
 800536a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800536e:	e00b      	b.n	8005388 <HAL_DMA_IRQHandler+0xb0>
 8005370:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005374:	e008      	b.n	8005388 <HAL_DMA_IRQHandler+0xb0>
 8005376:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800537a:	e005      	b.n	8005388 <HAL_DMA_IRQHandler+0xb0>
 800537c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005380:	e002      	b.n	8005388 <HAL_DMA_IRQHandler+0xb0>
 8005382:	2340      	movs	r3, #64	@ 0x40
 8005384:	e000      	b.n	8005388 <HAL_DMA_IRQHandler+0xb0>
 8005386:	2304      	movs	r3, #4
 8005388:	4a55      	ldr	r2, [pc, #340]	@ (80054e0 <HAL_DMA_IRQHandler+0x208>)
 800538a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8094 	beq.w	80054be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800539e:	e08e      	b.n	80054be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	2202      	movs	r2, #2
 80053a6:	409a      	lsls	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d056      	beq.n	800545e <HAL_DMA_IRQHandler+0x186>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d051      	beq.n	800545e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 020a 	bic.w	r2, r2, #10
 80053d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a38      	ldr	r2, [pc, #224]	@ (80054c8 <HAL_DMA_IRQHandler+0x1f0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d029      	beq.n	800543e <HAL_DMA_IRQHandler+0x166>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a37      	ldr	r2, [pc, #220]	@ (80054cc <HAL_DMA_IRQHandler+0x1f4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d022      	beq.n	800543a <HAL_DMA_IRQHandler+0x162>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a35      	ldr	r2, [pc, #212]	@ (80054d0 <HAL_DMA_IRQHandler+0x1f8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01a      	beq.n	8005434 <HAL_DMA_IRQHandler+0x15c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a34      	ldr	r2, [pc, #208]	@ (80054d4 <HAL_DMA_IRQHandler+0x1fc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d012      	beq.n	800542e <HAL_DMA_IRQHandler+0x156>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a32      	ldr	r2, [pc, #200]	@ (80054d8 <HAL_DMA_IRQHandler+0x200>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00a      	beq.n	8005428 <HAL_DMA_IRQHandler+0x150>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a31      	ldr	r2, [pc, #196]	@ (80054dc <HAL_DMA_IRQHandler+0x204>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d102      	bne.n	8005422 <HAL_DMA_IRQHandler+0x14a>
 800541c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005420:	e00e      	b.n	8005440 <HAL_DMA_IRQHandler+0x168>
 8005422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005426:	e00b      	b.n	8005440 <HAL_DMA_IRQHandler+0x168>
 8005428:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800542c:	e008      	b.n	8005440 <HAL_DMA_IRQHandler+0x168>
 800542e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005432:	e005      	b.n	8005440 <HAL_DMA_IRQHandler+0x168>
 8005434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005438:	e002      	b.n	8005440 <HAL_DMA_IRQHandler+0x168>
 800543a:	2320      	movs	r3, #32
 800543c:	e000      	b.n	8005440 <HAL_DMA_IRQHandler+0x168>
 800543e:	2302      	movs	r3, #2
 8005440:	4a27      	ldr	r2, [pc, #156]	@ (80054e0 <HAL_DMA_IRQHandler+0x208>)
 8005442:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d034      	beq.n	80054be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800545c:	e02f      	b.n	80054be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	2208      	movs	r2, #8
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d028      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x1e8>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d023      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 020e 	bic.w	r2, r2, #14
 8005486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f202 	lsl.w	r2, r1, r2
 8005496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
    }
  }
  return;
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
}
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40020008 	.word	0x40020008
 80054cc:	4002001c 	.word	0x4002001c
 80054d0:	40020030 	.word	0x40020030
 80054d4:	40020044 	.word	0x40020044
 80054d8:	40020058 	.word	0x40020058
 80054dc:	4002006c 	.word	0x4002006c
 80054e0:	40020000 	.word	0x40020000

080054e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fa:	2101      	movs	r1, #1
 80054fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005500:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b10      	cmp	r3, #16
 8005510:	d108      	bne.n	8005524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005522:	e007      	b.n	8005534 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
	...

08005540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005540:	b480      	push	{r7}
 8005542:	b08b      	sub	sp, #44	@ 0x2c
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800554a:	2300      	movs	r3, #0
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800554e:	2300      	movs	r3, #0
 8005550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005552:	e169      	b.n	8005828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005554:	2201      	movs	r2, #1
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	429a      	cmp	r2, r3
 800556e:	f040 8158 	bne.w	8005822 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4a9a      	ldr	r2, [pc, #616]	@ (80057e0 <HAL_GPIO_Init+0x2a0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d05e      	beq.n	800563a <HAL_GPIO_Init+0xfa>
 800557c:	4a98      	ldr	r2, [pc, #608]	@ (80057e0 <HAL_GPIO_Init+0x2a0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d875      	bhi.n	800566e <HAL_GPIO_Init+0x12e>
 8005582:	4a98      	ldr	r2, [pc, #608]	@ (80057e4 <HAL_GPIO_Init+0x2a4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d058      	beq.n	800563a <HAL_GPIO_Init+0xfa>
 8005588:	4a96      	ldr	r2, [pc, #600]	@ (80057e4 <HAL_GPIO_Init+0x2a4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d86f      	bhi.n	800566e <HAL_GPIO_Init+0x12e>
 800558e:	4a96      	ldr	r2, [pc, #600]	@ (80057e8 <HAL_GPIO_Init+0x2a8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d052      	beq.n	800563a <HAL_GPIO_Init+0xfa>
 8005594:	4a94      	ldr	r2, [pc, #592]	@ (80057e8 <HAL_GPIO_Init+0x2a8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d869      	bhi.n	800566e <HAL_GPIO_Init+0x12e>
 800559a:	4a94      	ldr	r2, [pc, #592]	@ (80057ec <HAL_GPIO_Init+0x2ac>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d04c      	beq.n	800563a <HAL_GPIO_Init+0xfa>
 80055a0:	4a92      	ldr	r2, [pc, #584]	@ (80057ec <HAL_GPIO_Init+0x2ac>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d863      	bhi.n	800566e <HAL_GPIO_Init+0x12e>
 80055a6:	4a92      	ldr	r2, [pc, #584]	@ (80057f0 <HAL_GPIO_Init+0x2b0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d046      	beq.n	800563a <HAL_GPIO_Init+0xfa>
 80055ac:	4a90      	ldr	r2, [pc, #576]	@ (80057f0 <HAL_GPIO_Init+0x2b0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d85d      	bhi.n	800566e <HAL_GPIO_Init+0x12e>
 80055b2:	2b12      	cmp	r3, #18
 80055b4:	d82a      	bhi.n	800560c <HAL_GPIO_Init+0xcc>
 80055b6:	2b12      	cmp	r3, #18
 80055b8:	d859      	bhi.n	800566e <HAL_GPIO_Init+0x12e>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <HAL_GPIO_Init+0x80>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	0800563b 	.word	0x0800563b
 80055c4:	08005615 	.word	0x08005615
 80055c8:	08005627 	.word	0x08005627
 80055cc:	08005669 	.word	0x08005669
 80055d0:	0800566f 	.word	0x0800566f
 80055d4:	0800566f 	.word	0x0800566f
 80055d8:	0800566f 	.word	0x0800566f
 80055dc:	0800566f 	.word	0x0800566f
 80055e0:	0800566f 	.word	0x0800566f
 80055e4:	0800566f 	.word	0x0800566f
 80055e8:	0800566f 	.word	0x0800566f
 80055ec:	0800566f 	.word	0x0800566f
 80055f0:	0800566f 	.word	0x0800566f
 80055f4:	0800566f 	.word	0x0800566f
 80055f8:	0800566f 	.word	0x0800566f
 80055fc:	0800566f 	.word	0x0800566f
 8005600:	0800566f 	.word	0x0800566f
 8005604:	0800561d 	.word	0x0800561d
 8005608:	08005631 	.word	0x08005631
 800560c:	4a79      	ldr	r2, [pc, #484]	@ (80057f4 <HAL_GPIO_Init+0x2b4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005612:	e02c      	b.n	800566e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	623b      	str	r3, [r7, #32]
          break;
 800561a:	e029      	b.n	8005670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	3304      	adds	r3, #4
 8005622:	623b      	str	r3, [r7, #32]
          break;
 8005624:	e024      	b.n	8005670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	3308      	adds	r3, #8
 800562c:	623b      	str	r3, [r7, #32]
          break;
 800562e:	e01f      	b.n	8005670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	330c      	adds	r3, #12
 8005636:	623b      	str	r3, [r7, #32]
          break;
 8005638:	e01a      	b.n	8005670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005642:	2304      	movs	r3, #4
 8005644:	623b      	str	r3, [r7, #32]
          break;
 8005646:	e013      	b.n	8005670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005650:	2308      	movs	r3, #8
 8005652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	611a      	str	r2, [r3, #16]
          break;
 800565a:	e009      	b.n	8005670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800565c:	2308      	movs	r3, #8
 800565e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	615a      	str	r2, [r3, #20]
          break;
 8005666:	e003      	b.n	8005670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005668:	2300      	movs	r3, #0
 800566a:	623b      	str	r3, [r7, #32]
          break;
 800566c:	e000      	b.n	8005670 <HAL_GPIO_Init+0x130>
          break;
 800566e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2bff      	cmp	r3, #255	@ 0xff
 8005674:	d801      	bhi.n	800567a <HAL_GPIO_Init+0x13a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	e001      	b.n	800567e <HAL_GPIO_Init+0x13e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3304      	adds	r3, #4
 800567e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2bff      	cmp	r3, #255	@ 0xff
 8005684:	d802      	bhi.n	800568c <HAL_GPIO_Init+0x14c>
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	e002      	b.n	8005692 <HAL_GPIO_Init+0x152>
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	3b08      	subs	r3, #8
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	210f      	movs	r1, #15
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	401a      	ands	r2, r3
 80056a4:	6a39      	ldr	r1, [r7, #32]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ac:	431a      	orrs	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80b1 	beq.w	8005822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056c0:	4b4d      	ldr	r3, [pc, #308]	@ (80057f8 <HAL_GPIO_Init+0x2b8>)
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	4a4c      	ldr	r2, [pc, #304]	@ (80057f8 <HAL_GPIO_Init+0x2b8>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6193      	str	r3, [r2, #24]
 80056cc:	4b4a      	ldr	r3, [pc, #296]	@ (80057f8 <HAL_GPIO_Init+0x2b8>)
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80056d8:	4a48      	ldr	r2, [pc, #288]	@ (80057fc <HAL_GPIO_Init+0x2bc>)
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	3302      	adds	r3, #2
 80056e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	220f      	movs	r2, #15
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a40      	ldr	r2, [pc, #256]	@ (8005800 <HAL_GPIO_Init+0x2c0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <HAL_GPIO_Init+0x1ec>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3f      	ldr	r2, [pc, #252]	@ (8005804 <HAL_GPIO_Init+0x2c4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00d      	beq.n	8005728 <HAL_GPIO_Init+0x1e8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3e      	ldr	r2, [pc, #248]	@ (8005808 <HAL_GPIO_Init+0x2c8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <HAL_GPIO_Init+0x1e4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3d      	ldr	r2, [pc, #244]	@ (800580c <HAL_GPIO_Init+0x2cc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_GPIO_Init+0x1e0>
 800571c:	2303      	movs	r3, #3
 800571e:	e006      	b.n	800572e <HAL_GPIO_Init+0x1ee>
 8005720:	2304      	movs	r3, #4
 8005722:	e004      	b.n	800572e <HAL_GPIO_Init+0x1ee>
 8005724:	2302      	movs	r3, #2
 8005726:	e002      	b.n	800572e <HAL_GPIO_Init+0x1ee>
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <HAL_GPIO_Init+0x1ee>
 800572c:	2300      	movs	r3, #0
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	f002 0203 	and.w	r2, r2, #3
 8005734:	0092      	lsls	r2, r2, #2
 8005736:	4093      	lsls	r3, r2
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800573e:	492f      	ldr	r1, [pc, #188]	@ (80057fc <HAL_GPIO_Init+0x2bc>)
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	3302      	adds	r3, #2
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005758:	4b2d      	ldr	r3, [pc, #180]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	492c      	ldr	r1, [pc, #176]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]
 8005764:	e006      	b.n	8005774 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005766:	4b2a      	ldr	r3, [pc, #168]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	43db      	mvns	r3, r3
 800576e:	4928      	ldr	r1, [pc, #160]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 8005770:	4013      	ands	r3, r2
 8005772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d006      	beq.n	800578e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005780:	4b23      	ldr	r3, [pc, #140]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	4922      	ldr	r1, [pc, #136]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	4313      	orrs	r3, r2
 800578a:	60cb      	str	r3, [r1, #12]
 800578c:	e006      	b.n	800579c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800578e:	4b20      	ldr	r3, [pc, #128]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	43db      	mvns	r3, r3
 8005796:	491e      	ldr	r1, [pc, #120]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 8005798:	4013      	ands	r3, r2
 800579a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d006      	beq.n	80057b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80057a8:	4b19      	ldr	r3, [pc, #100]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	4918      	ldr	r1, [pc, #96]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	e006      	b.n	80057c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80057b6:	4b16      	ldr	r3, [pc, #88]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	43db      	mvns	r3, r3
 80057be:	4914      	ldr	r1, [pc, #80]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d021      	beq.n	8005814 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80057d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	490e      	ldr	r1, [pc, #56]	@ (8005810 <HAL_GPIO_Init+0x2d0>)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]
 80057dc:	e021      	b.n	8005822 <HAL_GPIO_Init+0x2e2>
 80057de:	bf00      	nop
 80057e0:	10320000 	.word	0x10320000
 80057e4:	10310000 	.word	0x10310000
 80057e8:	10220000 	.word	0x10220000
 80057ec:	10210000 	.word	0x10210000
 80057f0:	10120000 	.word	0x10120000
 80057f4:	10110000 	.word	0x10110000
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40010000 	.word	0x40010000
 8005800:	40010800 	.word	0x40010800
 8005804:	40010c00 	.word	0x40010c00
 8005808:	40011000 	.word	0x40011000
 800580c:	40011400 	.word	0x40011400
 8005810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <HAL_GPIO_Init+0x304>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	43db      	mvns	r3, r3
 800581c:	4909      	ldr	r1, [pc, #36]	@ (8005844 <HAL_GPIO_Init+0x304>)
 800581e:	4013      	ands	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	3301      	adds	r3, #1
 8005826:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f ae8e 	bne.w	8005554 <HAL_GPIO_Init+0x14>
  }
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	372c      	adds	r7, #44	@ 0x2c
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	40010400 	.word	0x40010400

08005848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	887b      	ldrh	r3, [r7, #2]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	e001      	b.n	800586a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	807b      	strh	r3, [r7, #2]
 8005882:	4613      	mov	r3, r2
 8005884:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005886:	787b      	ldrb	r3, [r7, #1]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800588c:	887a      	ldrh	r2, [r7, #2]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005892:	e003      	b.n	800589c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005894:	887b      	ldrh	r3, [r7, #2]
 8005896:	041a      	lsls	r2, r3, #16
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	611a      	str	r2, [r3, #16]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058b8:	887a      	ldrh	r2, [r7, #2]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4013      	ands	r3, r2
 80058be:	041a      	lsls	r2, r3, #16
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	43d9      	mvns	r1, r3
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	400b      	ands	r3, r1
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058e2:	4b08      	ldr	r3, [pc, #32]	@ (8005904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d006      	beq.n	80058fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058ee:	4a05      	ldr	r2, [pc, #20]	@ (8005904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd fb88 	bl	800300c <HAL_GPIO_EXTI_Callback>
  }
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40010400 	.word	0x40010400

08005908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e12b      	b.n	8005b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fe fcd0 	bl	80042d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2224      	movs	r2, #36	@ 0x24
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800595a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800596a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800596c:	f001 f960 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 8005970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4a81      	ldr	r2, [pc, #516]	@ (8005b7c <HAL_I2C_Init+0x274>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d807      	bhi.n	800598c <HAL_I2C_Init+0x84>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a80      	ldr	r2, [pc, #512]	@ (8005b80 <HAL_I2C_Init+0x278>)
 8005980:	4293      	cmp	r3, r2
 8005982:	bf94      	ite	ls
 8005984:	2301      	movls	r3, #1
 8005986:	2300      	movhi	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e006      	b.n	800599a <HAL_I2C_Init+0x92>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a7d      	ldr	r2, [pc, #500]	@ (8005b84 <HAL_I2C_Init+0x27c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	bf94      	ite	ls
 8005994:	2301      	movls	r3, #1
 8005996:	2300      	movhi	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0e7      	b.n	8005b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a78      	ldr	r2, [pc, #480]	@ (8005b88 <HAL_I2C_Init+0x280>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	0c9b      	lsrs	r3, r3, #18
 80059ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a6a      	ldr	r2, [pc, #424]	@ (8005b7c <HAL_I2C_Init+0x274>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d802      	bhi.n	80059dc <HAL_I2C_Init+0xd4>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3301      	adds	r3, #1
 80059da:	e009      	b.n	80059f0 <HAL_I2C_Init+0xe8>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	4a69      	ldr	r2, [pc, #420]	@ (8005b8c <HAL_I2C_Init+0x284>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	099b      	lsrs	r3, r3, #6
 80059ee:	3301      	adds	r3, #1
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	495c      	ldr	r1, [pc, #368]	@ (8005b7c <HAL_I2C_Init+0x274>)
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	d819      	bhi.n	8005a44 <HAL_I2C_Init+0x13c>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1e59      	subs	r1, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a24:	400b      	ands	r3, r1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_I2C_Init+0x138>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1e59      	subs	r1, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3e:	e051      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005a40:	2304      	movs	r3, #4
 8005a42:	e04f      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d111      	bne.n	8005a70 <HAL_I2C_Init+0x168>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1e58      	subs	r0, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6859      	ldr	r1, [r3, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	440b      	add	r3, r1
 8005a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e012      	b.n	8005a96 <HAL_I2C_Init+0x18e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1e58      	subs	r0, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6859      	ldr	r1, [r3, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	0099      	lsls	r1, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_I2C_Init+0x196>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e022      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10e      	bne.n	8005ac4 <HAL_I2C_Init+0x1bc>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1e58      	subs	r0, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	440b      	add	r3, r1
 8005ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab8:	3301      	adds	r3, #1
 8005aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ac2:	e00f      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1e58      	subs	r0, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	0099      	lsls	r1, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ada:	3301      	adds	r3, #1
 8005adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	6809      	ldr	r1, [r1, #0]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6911      	ldr	r1, [r2, #16]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	68d2      	ldr	r2, [r2, #12]
 8005b1e:	4311      	orrs	r1, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	000186a0 	.word	0x000186a0
 8005b80:	001e847f 	.word	0x001e847f
 8005b84:	003d08ff 	.word	0x003d08ff
 8005b88:	431bde83 	.word	0x431bde83
 8005b8c:	10624dd3 	.word	0x10624dd3

08005b90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	817b      	strh	r3, [r7, #10]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ba4:	f7fe fe1a 	bl	80047dc <HAL_GetTick>
 8005ba8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	f040 80e0 	bne.w	8005d78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2319      	movs	r3, #25
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4970      	ldr	r1, [pc, #448]	@ (8005d84 <HAL_I2C_Master_Transmit+0x1f4>)
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fa92 	bl	80060ec <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0d3      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_I2C_Master_Transmit+0x50>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0cc      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d007      	beq.n	8005c06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2221      	movs	r2, #33	@ 0x21
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2210      	movs	r2, #16
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	893a      	ldrh	r2, [r7, #8]
 8005c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a50      	ldr	r2, [pc, #320]	@ (8005d88 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c48:	8979      	ldrh	r1, [r7, #10]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f9ca 	bl	8005fe8 <I2C_MasterRequestWrite>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e08d      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c74:	e066      	b.n	8005d44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	6a39      	ldr	r1, [r7, #32]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fb50 	bl	8006320 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d107      	bne.n	8005c9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e06b      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d11b      	bne.n	8005d18 <HAL_I2C_Master_Transmit+0x188>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d017      	beq.n	8005d18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	6a39      	ldr	r1, [r7, #32]
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fb47 	bl	80063b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00d      	beq.n	8005d44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d107      	bne.n	8005d40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e01a      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d194      	bne.n	8005c76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e000      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d78:	2302      	movs	r3, #2
  }
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	00100002 	.word	0x00100002
 8005d88:	ffff0000 	.word	0xffff0000

08005d8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08a      	sub	sp, #40	@ 0x28
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d9c:	f7fe fd1e 	bl	80047dc <HAL_GetTick>
 8005da0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	f040 8111 	bne.w	8005fd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2319      	movs	r3, #25
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4988      	ldr	r1, [pc, #544]	@ (8005fe0 <HAL_I2C_IsDeviceReady+0x254>)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f994 	bl	80060ec <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e104      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_I2C_IsDeviceReady+0x50>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e0fd      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x24c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d007      	beq.n	8005e02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2224      	movs	r2, #36	@ 0x24
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a70      	ldr	r2, [pc, #448]	@ (8005fe4 <HAL_I2C_IsDeviceReady+0x258>)
 8005e24:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f952 	bl	80060ec <I2C_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e5c:	d103      	bne.n	8005e66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e64:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e0b6      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e7a:	f7fe fcaf 	bl	80047dc <HAL_GetTick>
 8005e7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005eae:	e025      	b.n	8005efc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005eb0:	f7fe fc94 	bl	80047dc <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d302      	bcc.n	8005ec6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	22a0      	movs	r2, #160	@ 0xa0
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f06:	d005      	beq.n	8005f14 <HAL_I2C_IsDeviceReady+0x188>
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <HAL_I2C_IsDeviceReady+0x188>
 8005f0e:	7dbb      	ldrb	r3, [r7, #22]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0cd      	beq.n	8005eb0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d129      	bne.n	8005f7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2319      	movs	r3, #25
 8005f56:	2201      	movs	r2, #1
 8005f58:	4921      	ldr	r1, [pc, #132]	@ (8005fe0 <HAL_I2C_IsDeviceReady+0x254>)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f8c6 	bl	80060ec <I2C_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e036      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e02c      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	2319      	movs	r3, #25
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	490f      	ldr	r1, [pc, #60]	@ (8005fe0 <HAL_I2C_IsDeviceReady+0x254>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f8a2 	bl	80060ec <I2C_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e012      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	f4ff af32 	bcc.w	8005e26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	00100002 	.word	0x00100002
 8005fe4:	ffff0000 	.word	0xffff0000

08005fe8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d006      	beq.n	8006012 <I2C_MasterRequestWrite+0x2a>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d003      	beq.n	8006012 <I2C_MasterRequestWrite+0x2a>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006010:	d108      	bne.n	8006024 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e00b      	b.n	800603c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006028:	2b12      	cmp	r3, #18
 800602a:	d107      	bne.n	800603c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800603a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f84f 	bl	80060ec <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006062:	d103      	bne.n	800606c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e035      	b.n	80060dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006078:	d108      	bne.n	800608c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800607a:	897b      	ldrh	r3, [r7, #10]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006088:	611a      	str	r2, [r3, #16]
 800608a:	e01b      	b.n	80060c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800608c:	897b      	ldrh	r3, [r7, #10]
 800608e:	11db      	asrs	r3, r3, #7
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0306 	and.w	r3, r3, #6
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f063 030f 	orn	r3, r3, #15
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	490e      	ldr	r1, [pc, #56]	@ (80060e4 <I2C_MasterRequestWrite+0xfc>)
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f898 	bl	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e010      	b.n	80060dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80060ba:	897b      	ldrh	r3, [r7, #10]
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4907      	ldr	r1, [pc, #28]	@ (80060e8 <I2C_MasterRequestWrite+0x100>)
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f888 	bl	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	00010008 	.word	0x00010008
 80060e8:	00010002 	.word	0x00010002

080060ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	4613      	mov	r3, r2
 80060fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060fc:	e048      	b.n	8006190 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006104:	d044      	beq.n	8006190 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006106:	f7fe fb69 	bl	80047dc <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d139      	bne.n	8006190 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	0c1b      	lsrs	r3, r3, #16
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10d      	bne.n	8006142 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	43da      	mvns	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	4013      	ands	r3, r2
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	bf0c      	ite	eq
 8006138:	2301      	moveq	r3, #1
 800613a:	2300      	movne	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	e00c      	b.n	800615c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	43da      	mvns	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	bf0c      	ite	eq
 8006154:	2301      	moveq	r3, #1
 8006156:	2300      	movne	r3, #0
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	429a      	cmp	r2, r3
 8006160:	d116      	bne.n	8006190 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e023      	b.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	0c1b      	lsrs	r3, r3, #16
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d10d      	bne.n	80061b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	43da      	mvns	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4013      	ands	r3, r2
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	e00c      	b.n	80061d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	43da      	mvns	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf0c      	ite	eq
 80061c8:	2301      	moveq	r3, #1
 80061ca:	2300      	movne	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d093      	beq.n	80060fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061ee:	e071      	b.n	80062d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061fe:	d123      	bne.n	8006248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800620e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006234:	f043 0204 	orr.w	r2, r3, #4
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e067      	b.n	8006318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800624e:	d041      	beq.n	80062d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006250:	f7fe fac4 	bl	80047dc <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d136      	bne.n	80062d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d10c      	bne.n	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	43da      	mvns	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e00b      	b.n	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	43da      	mvns	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4013      	ands	r3, r2
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c0:	f043 0220 	orr.w	r2, r3, #32
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e021      	b.n	8006318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	0c1b      	lsrs	r3, r3, #16
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d10c      	bne.n	80062f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	43da      	mvns	r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4013      	ands	r3, r2
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	bf14      	ite	ne
 80062f0:	2301      	movne	r3, #1
 80062f2:	2300      	moveq	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	e00b      	b.n	8006310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	43da      	mvns	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4013      	ands	r3, r2
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	bf14      	ite	ne
 800630a:	2301      	movne	r3, #1
 800630c:	2300      	moveq	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	f47f af6d 	bne.w	80061f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800632c:	e034      	b.n	8006398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f886 	bl	8006440 <I2C_IsAcknowledgeFailed>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e034      	b.n	80063a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006344:	d028      	beq.n	8006398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006346:	f7fe fa49 	bl	80047dc <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11d      	bne.n	8006398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006366:	2b80      	cmp	r3, #128	@ 0x80
 8006368:	d016      	beq.n	8006398 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006384:	f043 0220 	orr.w	r2, r3, #32
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e007      	b.n	80063a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a2:	2b80      	cmp	r3, #128	@ 0x80
 80063a4:	d1c3      	bne.n	800632e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063bc:	e034      	b.n	8006428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f83e 	bl	8006440 <I2C_IsAcknowledgeFailed>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e034      	b.n	8006438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063d4:	d028      	beq.n	8006428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d6:	f7fe fa01 	bl	80047dc <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11d      	bne.n	8006428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d016      	beq.n	8006428 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006414:	f043 0220 	orr.w	r2, r3, #32
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e007      	b.n	8006438 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b04      	cmp	r3, #4
 8006434:	d1c3      	bne.n	80063be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006456:	d11b      	bne.n	8006490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	f043 0204 	orr.w	r2, r3, #4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e272      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8087 	beq.w	80065ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064bc:	4b92      	ldr	r3, [pc, #584]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d00c      	beq.n	80064e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064c8:	4b8f      	ldr	r3, [pc, #572]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f003 030c 	and.w	r3, r3, #12
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d112      	bne.n	80064fa <HAL_RCC_OscConfig+0x5e>
 80064d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064e0:	d10b      	bne.n	80064fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e2:	4b89      	ldr	r3, [pc, #548]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d06c      	beq.n	80065c8 <HAL_RCC_OscConfig+0x12c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d168      	bne.n	80065c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e24c      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006502:	d106      	bne.n	8006512 <HAL_RCC_OscConfig+0x76>
 8006504:	4b80      	ldr	r3, [pc, #512]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a7f      	ldr	r2, [pc, #508]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800650a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	e02e      	b.n	8006570 <HAL_RCC_OscConfig+0xd4>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0x98>
 800651a:	4b7b      	ldr	r3, [pc, #492]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a7a      	ldr	r2, [pc, #488]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b78      	ldr	r3, [pc, #480]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a77      	ldr	r2, [pc, #476]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800652c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e01d      	b.n	8006570 <HAL_RCC_OscConfig+0xd4>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800653c:	d10c      	bne.n	8006558 <HAL_RCC_OscConfig+0xbc>
 800653e:	4b72      	ldr	r3, [pc, #456]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a71      	ldr	r2, [pc, #452]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	4b6f      	ldr	r3, [pc, #444]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a6e      	ldr	r2, [pc, #440]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e00b      	b.n	8006570 <HAL_RCC_OscConfig+0xd4>
 8006558:	4b6b      	ldr	r3, [pc, #428]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a6a      	ldr	r2, [pc, #424]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800655e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	4b68      	ldr	r3, [pc, #416]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a67      	ldr	r2, [pc, #412]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800656a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800656e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d013      	beq.n	80065a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fe f930 	bl	80047dc <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006580:	f7fe f92c 	bl	80047dc <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b64      	cmp	r3, #100	@ 0x64
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e200      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006592:	4b5d      	ldr	r3, [pc, #372]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0xe4>
 800659e:	e014      	b.n	80065ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a0:	f7fe f91c 	bl	80047dc <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a8:	f7fe f918 	bl	80047dc <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b64      	cmp	r3, #100	@ 0x64
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e1ec      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ba:	4b53      	ldr	r3, [pc, #332]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0x10c>
 80065c6:	e000      	b.n	80065ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d063      	beq.n	800669e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065d6:	4b4c      	ldr	r3, [pc, #304]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065e2:	4b49      	ldr	r3, [pc, #292]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 030c 	and.w	r3, r3, #12
 80065ea:	2b08      	cmp	r3, #8
 80065ec:	d11c      	bne.n	8006628 <HAL_RCC_OscConfig+0x18c>
 80065ee:	4b46      	ldr	r3, [pc, #280]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d116      	bne.n	8006628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065fa:	4b43      	ldr	r3, [pc, #268]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_RCC_OscConfig+0x176>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d001      	beq.n	8006612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e1c0      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006612:	4b3d      	ldr	r3, [pc, #244]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4939      	ldr	r1, [pc, #228]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006626:	e03a      	b.n	800669e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d020      	beq.n	8006672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006630:	4b36      	ldr	r3, [pc, #216]	@ (800670c <HAL_RCC_OscConfig+0x270>)
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006636:	f7fe f8d1 	bl	80047dc <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800663e:	f7fe f8cd 	bl	80047dc <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e1a1      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006650:	4b2d      	ldr	r3, [pc, #180]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665c:	4b2a      	ldr	r3, [pc, #168]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4927      	ldr	r1, [pc, #156]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	600b      	str	r3, [r1, #0]
 8006670:	e015      	b.n	800669e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006672:	4b26      	ldr	r3, [pc, #152]	@ (800670c <HAL_RCC_OscConfig+0x270>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006678:	f7fe f8b0 	bl	80047dc <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006680:	f7fe f8ac 	bl	80047dc <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e180      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006692:	4b1d      	ldr	r3, [pc, #116]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f0      	bne.n	8006680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d03a      	beq.n	8006720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d019      	beq.n	80066e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066b2:	4b17      	ldr	r3, [pc, #92]	@ (8006710 <HAL_RCC_OscConfig+0x274>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b8:	f7fe f890 	bl	80047dc <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c0:	f7fe f88c 	bl	80047dc <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e160      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006708 <HAL_RCC_OscConfig+0x26c>)
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066de:	2001      	movs	r0, #1
 80066e0:	f000 fafe 	bl	8006ce0 <RCC_Delay>
 80066e4:	e01c      	b.n	8006720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <HAL_RCC_OscConfig+0x274>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ec:	f7fe f876 	bl	80047dc <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f2:	e00f      	b.n	8006714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066f4:	f7fe f872 	bl	80047dc <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d908      	bls.n	8006714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e146      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
 8006706:	bf00      	nop
 8006708:	40021000 	.word	0x40021000
 800670c:	42420000 	.word	0x42420000
 8006710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006714:	4b92      	ldr	r3, [pc, #584]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e9      	bne.n	80066f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80a6 	beq.w	800687a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800672e:	2300      	movs	r3, #0
 8006730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006732:	4b8b      	ldr	r3, [pc, #556]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10d      	bne.n	800675a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800673e:	4b88      	ldr	r3, [pc, #544]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	4a87      	ldr	r2, [pc, #540]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006748:	61d3      	str	r3, [r2, #28]
 800674a:	4b85      	ldr	r3, [pc, #532]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006752:	60bb      	str	r3, [r7, #8]
 8006754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675a:	4b82      	ldr	r3, [pc, #520]	@ (8006964 <HAL_RCC_OscConfig+0x4c8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006762:	2b00      	cmp	r3, #0
 8006764:	d118      	bne.n	8006798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006766:	4b7f      	ldr	r3, [pc, #508]	@ (8006964 <HAL_RCC_OscConfig+0x4c8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a7e      	ldr	r2, [pc, #504]	@ (8006964 <HAL_RCC_OscConfig+0x4c8>)
 800676c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006772:	f7fe f833 	bl	80047dc <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677a:	f7fe f82f 	bl	80047dc <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b64      	cmp	r3, #100	@ 0x64
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e103      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800678c:	4b75      	ldr	r3, [pc, #468]	@ (8006964 <HAL_RCC_OscConfig+0x4c8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0f0      	beq.n	800677a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d106      	bne.n	80067ae <HAL_RCC_OscConfig+0x312>
 80067a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	4a6e      	ldr	r2, [pc, #440]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6213      	str	r3, [r2, #32]
 80067ac:	e02d      	b.n	800680a <HAL_RCC_OscConfig+0x36e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x334>
 80067b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	4a69      	ldr	r2, [pc, #420]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	6213      	str	r3, [r2, #32]
 80067c2:	4b67      	ldr	r3, [pc, #412]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4a66      	ldr	r2, [pc, #408]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067c8:	f023 0304 	bic.w	r3, r3, #4
 80067cc:	6213      	str	r3, [r2, #32]
 80067ce:	e01c      	b.n	800680a <HAL_RCC_OscConfig+0x36e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b05      	cmp	r3, #5
 80067d6:	d10c      	bne.n	80067f2 <HAL_RCC_OscConfig+0x356>
 80067d8:	4b61      	ldr	r3, [pc, #388]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	4a60      	ldr	r2, [pc, #384]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067de:	f043 0304 	orr.w	r3, r3, #4
 80067e2:	6213      	str	r3, [r2, #32]
 80067e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	6213      	str	r3, [r2, #32]
 80067f0:	e00b      	b.n	800680a <HAL_RCC_OscConfig+0x36e>
 80067f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	4a5a      	ldr	r2, [pc, #360]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	6213      	str	r3, [r2, #32]
 80067fe:	4b58      	ldr	r3, [pc, #352]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	4a57      	ldr	r2, [pc, #348]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006804:	f023 0304 	bic.w	r3, r3, #4
 8006808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d015      	beq.n	800683e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006812:	f7fd ffe3 	bl	80047dc <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006818:	e00a      	b.n	8006830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681a:	f7fd ffdf 	bl	80047dc <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006828:	4293      	cmp	r3, r2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e0b1      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006830:	4b4b      	ldr	r3, [pc, #300]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0ee      	beq.n	800681a <HAL_RCC_OscConfig+0x37e>
 800683c:	e014      	b.n	8006868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800683e:	f7fd ffcd 	bl	80047dc <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006844:	e00a      	b.n	800685c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006846:	f7fd ffc9 	bl	80047dc <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006854:	4293      	cmp	r3, r2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e09b      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800685c:	4b40      	ldr	r3, [pc, #256]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1ee      	bne.n	8006846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d105      	bne.n	800687a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800686e:	4b3c      	ldr	r3, [pc, #240]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	4a3b      	ldr	r2, [pc, #236]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8087 	beq.w	8006992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006884:	4b36      	ldr	r3, [pc, #216]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f003 030c 	and.w	r3, r3, #12
 800688c:	2b08      	cmp	r3, #8
 800688e:	d061      	beq.n	8006954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d146      	bne.n	8006926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006898:	4b33      	ldr	r3, [pc, #204]	@ (8006968 <HAL_RCC_OscConfig+0x4cc>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689e:	f7fd ff9d 	bl	80047dc <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a6:	f7fd ff99 	bl	80047dc <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e06d      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068b8:	4b29      	ldr	r3, [pc, #164]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f0      	bne.n	80068a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068cc:	d108      	bne.n	80068e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068ce:	4b24      	ldr	r3, [pc, #144]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	4921      	ldr	r1, [pc, #132]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a19      	ldr	r1, [r3, #32]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	430b      	orrs	r3, r1
 80068f2:	491b      	ldr	r1, [pc, #108]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006968 <HAL_RCC_OscConfig+0x4cc>)
 80068fa:	2201      	movs	r2, #1
 80068fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fe:	f7fd ff6d 	bl	80047dc <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006906:	f7fd ff69 	bl	80047dc <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e03d      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006918:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_OscConfig+0x46a>
 8006924:	e035      	b.n	8006992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006926:	4b10      	ldr	r3, [pc, #64]	@ (8006968 <HAL_RCC_OscConfig+0x4cc>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd ff56 	bl	80047dc <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006934:	f7fd ff52 	bl	80047dc <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e026      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006946:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <HAL_RCC_OscConfig+0x4c4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x498>
 8006952:	e01e      	b.n	8006992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d107      	bne.n	800696c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e019      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
 8006960:	40021000 	.word	0x40021000
 8006964:	40007000 	.word	0x40007000
 8006968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800696c:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <HAL_RCC_OscConfig+0x500>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	429a      	cmp	r2, r3
 800697e:	d106      	bne.n	800698e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698a:	429a      	cmp	r2, r3
 800698c:	d001      	beq.n	8006992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e000      	b.n	8006994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	40021000 	.word	0x40021000

080069a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0d0      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d910      	bls.n	80069e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b67      	ldr	r3, [pc, #412]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 0207 	bic.w	r2, r3, #7
 80069ca:	4965      	ldr	r1, [pc, #404]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b63      	ldr	r3, [pc, #396]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e0b8      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d020      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069fc:	4b59      	ldr	r3, [pc, #356]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a58      	ldr	r2, [pc, #352]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d005      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a14:	4b53      	ldr	r3, [pc, #332]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4a52      	ldr	r2, [pc, #328]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a20:	4b50      	ldr	r3, [pc, #320]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	494d      	ldr	r1, [pc, #308]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d040      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d107      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a46:	4b47      	ldr	r3, [pc, #284]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d115      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e07f      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5e:	4b41      	ldr	r3, [pc, #260]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e073      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e06b      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7e:	4b39      	ldr	r3, [pc, #228]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f023 0203 	bic.w	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4936      	ldr	r1, [pc, #216]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a90:	f7fd fea4 	bl	80047dc <HAL_GetTick>
 8006a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a96:	e00a      	b.n	8006aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a98:	f7fd fea0 	bl	80047dc <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e053      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aae:	4b2d      	ldr	r3, [pc, #180]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 020c 	and.w	r2, r3, #12
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d1eb      	bne.n	8006a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ac0:	4b27      	ldr	r3, [pc, #156]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d210      	bcs.n	8006af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ace:	4b24      	ldr	r3, [pc, #144]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f023 0207 	bic.w	r2, r3, #7
 8006ad6:	4922      	ldr	r1, [pc, #136]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ade:	4b20      	ldr	r3, [pc, #128]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e032      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d008      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4916      	ldr	r1, [pc, #88]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b1a:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	490e      	ldr	r1, [pc, #56]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b2e:	f000 f821 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 8006b32:	4602      	mov	r2, r0
 8006b34:	4b0b      	ldr	r3, [pc, #44]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	091b      	lsrs	r3, r3, #4
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	490a      	ldr	r1, [pc, #40]	@ (8006b68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b40:	5ccb      	ldrb	r3, [r1, r3]
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	4a09      	ldr	r2, [pc, #36]	@ (8006b6c <HAL_RCC_ClockConfig+0x1cc>)
 8006b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b4a:	4b09      	ldr	r3, [pc, #36]	@ (8006b70 <HAL_RCC_ClockConfig+0x1d0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fd fcf0 	bl	8004534 <HAL_InitTick>

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40022000 	.word	0x40022000
 8006b64:	40021000 	.word	0x40021000
 8006b68:	0800df20 	.word	0x0800df20
 8006b6c:	200008b4 	.word	0x200008b4
 8006b70:	200008b8 	.word	0x200008b8

08006b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	2300      	movs	r3, #0
 8006b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d002      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d003      	beq.n	8006baa <HAL_RCC_GetSysClockFreq+0x36>
 8006ba2:	e027      	b.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ba4:	4b19      	ldr	r3, [pc, #100]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006ba6:	613b      	str	r3, [r7, #16]
      break;
 8006ba8:	e027      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	0c9b      	lsrs	r3, r3, #18
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	4a17      	ldr	r2, [pc, #92]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006bb4:	5cd3      	ldrb	r3, [r2, r3]
 8006bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bc2:	4b11      	ldr	r3, [pc, #68]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	0c5b      	lsrs	r3, r3, #17
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	4a11      	ldr	r2, [pc, #68]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006bce:	5cd3      	ldrb	r3, [r2, r3]
 8006bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006bd6:	fb03 f202 	mul.w	r2, r3, r2
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e004      	b.n	8006bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	613b      	str	r3, [r7, #16]
      break;
 8006bf2:	e002      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bf4:	4b05      	ldr	r3, [pc, #20]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8006bf6:	613b      	str	r3, [r7, #16]
      break;
 8006bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bfa:	693b      	ldr	r3, [r7, #16]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	007a1200 	.word	0x007a1200
 8006c10:	0800df38 	.word	0x0800df38
 8006c14:	0800df48 	.word	0x0800df48
 8006c18:	003d0900 	.word	0x003d0900

08006c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c20:	4b02      	ldr	r3, [pc, #8]	@ (8006c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8006c22:	681b      	ldr	r3, [r3, #0]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr
 8006c2c:	200008b4 	.word	0x200008b4

08006c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c34:	f7ff fff2 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	4903      	ldr	r1, [pc, #12]	@ (8006c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c46:	5ccb      	ldrb	r3, [r1, r3]
 8006c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40021000 	.word	0x40021000
 8006c54:	0800df30 	.word	0x0800df30

08006c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c5c:	f7ff ffde 	bl	8006c1c <HAL_RCC_GetHCLKFreq>
 8006c60:	4602      	mov	r2, r0
 8006c62:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	0adb      	lsrs	r3, r3, #11
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	4903      	ldr	r1, [pc, #12]	@ (8006c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c6e:	5ccb      	ldrb	r3, [r1, r3]
 8006c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	0800df30 	.word	0x0800df30

08006c80 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	220f      	movs	r2, #15
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c90:	4b11      	ldr	r3, [pc, #68]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x58>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 0203 	and.w	r2, r3, #3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x58>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x58>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006cb4:	4b08      	ldr	r3, [pc, #32]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x58>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	08db      	lsrs	r3, r3, #3
 8006cba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cc2:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <HAL_RCC_GetClockConfig+0x5c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0207 	and.w	r2, r3, #7
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40022000 	.word	0x40022000

08006ce0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d14 <RCC_Delay+0x34>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a0a      	ldr	r2, [pc, #40]	@ (8006d18 <RCC_Delay+0x38>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	0a5b      	lsrs	r3, r3, #9
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006cfc:	bf00      	nop
  }
  while (Delay --);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	60fa      	str	r2, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f9      	bne.n	8006cfc <RCC_Delay+0x1c>
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr
 8006d14:	200008b4 	.word	0x200008b4
 8006d18:	10624dd3 	.word	0x10624dd3

08006d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d07d      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10d      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d48:	4b4c      	ldr	r3, [pc, #304]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	61d3      	str	r3, [r2, #28]
 8006d54:	4b49      	ldr	r3, [pc, #292]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	60bb      	str	r3, [r7, #8]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d64:	4b46      	ldr	r3, [pc, #280]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d118      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d70:	4b43      	ldr	r3, [pc, #268]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a42      	ldr	r2, [pc, #264]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d7c:	f7fd fd2e 	bl	80047dc <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d82:	e008      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d84:	f7fd fd2a 	bl	80047dc <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b64      	cmp	r3, #100	@ 0x64
 8006d90:	d901      	bls.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e06d      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d96:	4b3a      	ldr	r3, [pc, #232]	@ (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0f0      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006da2:	4b36      	ldr	r3, [pc, #216]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006daa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d02e      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d027      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dca:	4b2e      	ldr	r3, [pc, #184]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006dd6:	4a29      	ldr	r2, [pc, #164]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d014      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de6:	f7fd fcf9 	bl	80047dc <HAL_GetTick>
 8006dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dec:	e00a      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dee:	f7fd fcf5 	bl	80047dc <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e036      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e04:	4b1d      	ldr	r3, [pc, #116]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0ee      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e10:	4b1a      	ldr	r3, [pc, #104]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4917      	ldr	r1, [pc, #92]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d105      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e28:	4b14      	ldr	r3, [pc, #80]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4a13      	ldr	r2, [pc, #76]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e40:	4b0e      	ldr	r3, [pc, #56]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	490b      	ldr	r1, [pc, #44]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e5e:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4904      	ldr	r1, [pc, #16]	@ (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	40007000 	.word	0x40007000
 8006e84:	42420440 	.word	0x42420440

08006e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e041      	b.n	8006f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fd fa60 	bl	8004374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f000 ff06 	bl	8007cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d001      	beq.n	8006f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e03a      	b.n	8006fb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a18      	ldr	r2, [pc, #96]	@ (8006fc0 <HAL_TIM_Base_Start_IT+0x98>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x58>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6a:	d009      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x58>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a14      	ldr	r2, [pc, #80]	@ (8006fc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_TIM_Base_Start_IT+0x58>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a13      	ldr	r2, [pc, #76]	@ (8006fc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d111      	bne.n	8006fa4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b06      	cmp	r3, #6
 8006f90:	d010      	beq.n	8006fb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa2:	e007      	b.n	8006fb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bc80      	pop	{r7}
 8006fbe:	4770      	bx	lr
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800

08006fcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0201 	bic.w	r2, r2, #1
 8006fe2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6a1a      	ldr	r2, [r3, #32]
 8006fea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10f      	bne.n	8007014 <HAL_TIM_Base_Stop_IT+0x48>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6a1a      	ldr	r2, [r3, #32]
 8006ffa:	f240 4344 	movw	r3, #1092	@ 0x444
 8006ffe:	4013      	ands	r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d107      	bne.n	8007014 <HAL_TIM_Base_Stop_IT+0x48>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0201 	bic.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e041      	b.n	80070be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f839 	bl	80070c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f000 fe36 	bl	8007cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d109      	bne.n	8007104 <HAL_TIM_PWM_Start_DMA+0x2c>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	bf0c      	ite	eq
 80070fc:	2301      	moveq	r3, #1
 80070fe:	2300      	movne	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e022      	b.n	800714a <HAL_TIM_PWM_Start_DMA+0x72>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d109      	bne.n	800711e <HAL_TIM_PWM_Start_DMA+0x46>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	bf0c      	ite	eq
 8007116:	2301      	moveq	r3, #1
 8007118:	2300      	movne	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	e015      	b.n	800714a <HAL_TIM_PWM_Start_DMA+0x72>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b08      	cmp	r3, #8
 8007122:	d109      	bne.n	8007138 <HAL_TIM_PWM_Start_DMA+0x60>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	bf0c      	ite	eq
 8007130:	2301      	moveq	r3, #1
 8007132:	2300      	movne	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e008      	b.n	800714a <HAL_TIM_PWM_Start_DMA+0x72>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	bf0c      	ite	eq
 8007144:	2301      	moveq	r3, #1
 8007146:	2300      	movne	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800714e:	2302      	movs	r3, #2
 8007150:	e153      	b.n	80073fa <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <HAL_TIM_PWM_Start_DMA+0x94>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	e022      	b.n	80071b2 <HAL_TIM_PWM_Start_DMA+0xda>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b04      	cmp	r3, #4
 8007170:	d109      	bne.n	8007186 <HAL_TIM_PWM_Start_DMA+0xae>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	bf0c      	ite	eq
 800717e:	2301      	moveq	r3, #1
 8007180:	2300      	movne	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	e015      	b.n	80071b2 <HAL_TIM_PWM_Start_DMA+0xda>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b08      	cmp	r3, #8
 800718a:	d109      	bne.n	80071a0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	e008      	b.n	80071b2 <HAL_TIM_PWM_Start_DMA+0xda>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	bf0c      	ite	eq
 80071ac:	2301      	moveq	r3, #1
 80071ae:	2300      	movne	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d024      	beq.n	8007200 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <HAL_TIM_PWM_Start_DMA+0xea>
 80071bc:	887b      	ldrh	r3, [r7, #2]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e119      	b.n	80073fa <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d4:	e016      	b.n	8007204 <HAL_TIM_PWM_Start_DMA+0x12c>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d104      	bne.n	80071e6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071e4:	e00e      	b.n	8007204 <HAL_TIM_PWM_Start_DMA+0x12c>
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071f4:	e006      	b.n	8007204 <HAL_TIM_PWM_Start_DMA+0x12c>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071fe:	e001      	b.n	8007204 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e0fa      	b.n	80073fa <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b0c      	cmp	r3, #12
 8007208:	f200 80ae 	bhi.w	8007368 <HAL_TIM_PWM_Start_DMA+0x290>
 800720c:	a201      	add	r2, pc, #4	@ (adr r2, 8007214 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	08007249 	.word	0x08007249
 8007218:	08007369 	.word	0x08007369
 800721c:	08007369 	.word	0x08007369
 8007220:	08007369 	.word	0x08007369
 8007224:	08007291 	.word	0x08007291
 8007228:	08007369 	.word	0x08007369
 800722c:	08007369 	.word	0x08007369
 8007230:	08007369 	.word	0x08007369
 8007234:	080072d9 	.word	0x080072d9
 8007238:	08007369 	.word	0x08007369
 800723c:	08007369 	.word	0x08007369
 8007240:	08007369 	.word	0x08007369
 8007244:	08007321 	.word	0x08007321
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724c:	4a6d      	ldr	r2, [pc, #436]	@ (8007404 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800724e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007254:	4a6c      	ldr	r2, [pc, #432]	@ (8007408 <HAL_TIM_PWM_Start_DMA+0x330>)
 8007256:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	4a6b      	ldr	r2, [pc, #428]	@ (800740c <HAL_TIM_PWM_Start_DMA+0x334>)
 800725e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3334      	adds	r3, #52	@ 0x34
 800726c:	461a      	mov	r2, r3
 800726e:	887b      	ldrh	r3, [r7, #2]
 8007270:	f7fd ff5a 	bl	8005128 <HAL_DMA_Start_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e0bd      	b.n	80073fa <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800728c:	60da      	str	r2, [r3, #12]
      break;
 800728e:	e06e      	b.n	800736e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	4a5b      	ldr	r2, [pc, #364]	@ (8007404 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8007296:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	4a5a      	ldr	r2, [pc, #360]	@ (8007408 <HAL_TIM_PWM_Start_DMA+0x330>)
 800729e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a4:	4a59      	ldr	r2, [pc, #356]	@ (800740c <HAL_TIM_PWM_Start_DMA+0x334>)
 80072a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3338      	adds	r3, #56	@ 0x38
 80072b4:	461a      	mov	r2, r3
 80072b6:	887b      	ldrh	r3, [r7, #2]
 80072b8:	f7fd ff36 	bl	8005128 <HAL_DMA_Start_IT>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e099      	b.n	80073fa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072d4:	60da      	str	r2, [r3, #12]
      break;
 80072d6:	e04a      	b.n	800736e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072dc:	4a49      	ldr	r2, [pc, #292]	@ (8007404 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80072de:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e4:	4a48      	ldr	r2, [pc, #288]	@ (8007408 <HAL_TIM_PWM_Start_DMA+0x330>)
 80072e6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	4a47      	ldr	r2, [pc, #284]	@ (800740c <HAL_TIM_PWM_Start_DMA+0x334>)
 80072ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	333c      	adds	r3, #60	@ 0x3c
 80072fc:	461a      	mov	r2, r3
 80072fe:	887b      	ldrh	r3, [r7, #2]
 8007300:	f7fd ff12 	bl	8005128 <HAL_DMA_Start_IT>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e075      	b.n	80073fa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800731c:	60da      	str	r2, [r3, #12]
      break;
 800731e:	e026      	b.n	800736e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007324:	4a37      	ldr	r2, [pc, #220]	@ (8007404 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8007326:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732c:	4a36      	ldr	r2, [pc, #216]	@ (8007408 <HAL_TIM_PWM_Start_DMA+0x330>)
 800732e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007334:	4a35      	ldr	r2, [pc, #212]	@ (800740c <HAL_TIM_PWM_Start_DMA+0x334>)
 8007336:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3340      	adds	r3, #64	@ 0x40
 8007344:	461a      	mov	r2, r3
 8007346:	887b      	ldrh	r3, [r7, #2]
 8007348:	f7fd feee 	bl	8005128 <HAL_DMA_Start_IT>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e051      	b.n	80073fa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007364:	60da      	str	r2, [r3, #12]
      break;
 8007366:	e002      	b.n	800736e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	bf00      	nop
  }

  if (status == HAL_OK)
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d141      	bne.n	80073f8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 ff2b 	bl	80081d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a22      	ldr	r2, [pc, #136]	@ (8007410 <HAL_TIM_PWM_Start_DMA+0x338>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d107      	bne.n	800739c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800739a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007410 <HAL_TIM_PWM_Start_DMA+0x338>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ae:	d009      	beq.n	80073c4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a17      	ldr	r2, [pc, #92]	@ (8007414 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a16      	ldr	r2, [pc, #88]	@ (8007418 <HAL_TIM_PWM_Start_DMA+0x340>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d111      	bne.n	80073e8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b06      	cmp	r3, #6
 80073d4:	d010      	beq.n	80073f8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0201 	orr.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e6:	e007      	b.n	80073f8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0201 	orr.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	08007bc9 	.word	0x08007bc9
 8007408:	08007c71 	.word	0x08007c71
 800740c:	08007b37 	.word	0x08007b37
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800

0800741c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d855      	bhi.n	80074dc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007430:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800746d 	.word	0x0800746d
 800743c:	080074dd 	.word	0x080074dd
 8007440:	080074dd 	.word	0x080074dd
 8007444:	080074dd 	.word	0x080074dd
 8007448:	08007489 	.word	0x08007489
 800744c:	080074dd 	.word	0x080074dd
 8007450:	080074dd 	.word	0x080074dd
 8007454:	080074dd 	.word	0x080074dd
 8007458:	080074a5 	.word	0x080074a5
 800745c:	080074dd 	.word	0x080074dd
 8007460:	080074dd 	.word	0x080074dd
 8007464:	080074dd 	.word	0x080074dd
 8007468:	080074c1 	.word	0x080074c1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800747a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd feb1 	bl	80051e8 <HAL_DMA_Abort_IT>
      break;
 8007486:	e02c      	b.n	80074e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007496:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749c:	4618      	mov	r0, r3
 800749e:	f7fd fea3 	bl	80051e8 <HAL_DMA_Abort_IT>
      break;
 80074a2:	e01e      	b.n	80074e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fd fe95 	bl	80051e8 <HAL_DMA_Abort_IT>
      break;
 80074be:	e010      	b.n	80074e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd fe87 	bl	80051e8 <HAL_DMA_Abort_IT>
      break;
 80074da:	e002      	b.n	80074e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
      break;
 80074e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d157      	bne.n	8007598 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2200      	movs	r2, #0
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fe71 	bl	80081d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a2a      	ldr	r2, [pc, #168]	@ (80075a4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d117      	bne.n	8007530 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6a1a      	ldr	r2, [r3, #32]
 8007506:	f241 1311 	movw	r3, #4369	@ 0x1111
 800750a:	4013      	ands	r3, r2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10f      	bne.n	8007530 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a1a      	ldr	r2, [r3, #32]
 8007516:	f240 4344 	movw	r3, #1092	@ 0x444
 800751a:	4013      	ands	r3, r2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d107      	bne.n	8007530 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800752e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6a1a      	ldr	r2, [r3, #32]
 8007536:	f241 1311 	movw	r3, #4369	@ 0x1111
 800753a:	4013      	ands	r3, r2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10f      	bne.n	8007560 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6a1a      	ldr	r2, [r3, #32]
 8007546:	f240 4344 	movw	r3, #1092	@ 0x444
 800754a:	4013      	ands	r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d107      	bne.n	8007560 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <HAL_TIM_PWM_Stop_DMA+0x154>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800756e:	e013      	b.n	8007598 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b04      	cmp	r3, #4
 8007574:	d104      	bne.n	8007580 <HAL_TIM_PWM_Stop_DMA+0x164>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800757e:	e00b      	b.n	8007598 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b08      	cmp	r3, #8
 8007584:	d104      	bne.n	8007590 <HAL_TIM_PWM_Stop_DMA+0x174>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800758e:	e003      	b.n	8007598 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40012c00 	.word	0x40012c00

080075a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d122      	bne.n	8007604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d11b      	bne.n	8007604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f06f 0202 	mvn.w	r2, #2
 80075d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa76 	bl	8007adc <HAL_TIM_IC_CaptureCallback>
 80075f0:	e005      	b.n	80075fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa69 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fa78 	bl	8007aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b04      	cmp	r3, #4
 8007610:	d122      	bne.n	8007658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b04      	cmp	r3, #4
 800761e:	d11b      	bne.n	8007658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0204 	mvn.w	r2, #4
 8007628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2202      	movs	r2, #2
 800762e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa4c 	bl	8007adc <HAL_TIM_IC_CaptureCallback>
 8007644:	e005      	b.n	8007652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa3f 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fa4e 	bl	8007aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b08      	cmp	r3, #8
 8007664:	d122      	bne.n	80076ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b08      	cmp	r3, #8
 8007672:	d11b      	bne.n	80076ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0208 	mvn.w	r2, #8
 800767c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2204      	movs	r2, #4
 8007682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa22 	bl	8007adc <HAL_TIM_IC_CaptureCallback>
 8007698:	e005      	b.n	80076a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa15 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fa24 	bl	8007aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	2b10      	cmp	r3, #16
 80076b8:	d122      	bne.n	8007700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d11b      	bne.n	8007700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f06f 0210 	mvn.w	r2, #16
 80076d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2208      	movs	r2, #8
 80076d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f9f8 	bl	8007adc <HAL_TIM_IC_CaptureCallback>
 80076ec:	e005      	b.n	80076fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9eb 	bl	8007aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f9fa 	bl	8007aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b01      	cmp	r3, #1
 800770c:	d10e      	bne.n	800772c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	d107      	bne.n	800772c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0201 	mvn.w	r2, #1
 8007724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fb fec0 	bl	80034ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007736:	2b80      	cmp	r3, #128	@ 0x80
 8007738:	d10e      	bne.n	8007758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007744:	2b80      	cmp	r3, #128	@ 0x80
 8007746:	d107      	bne.n	8007758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fdcb 	bl	80082ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007762:	2b40      	cmp	r3, #64	@ 0x40
 8007764:	d10e      	bne.n	8007784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007770:	2b40      	cmp	r3, #64	@ 0x40
 8007772:	d107      	bne.n	8007784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800777c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9c7 	bl	8007b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b20      	cmp	r3, #32
 8007790:	d10e      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b20      	cmp	r3, #32
 800779e:	d107      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0220 	mvn.w	r2, #32
 80077a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fd96 	bl	80082dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e0ae      	b.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b0c      	cmp	r3, #12
 80077e2:	f200 809f 	bhi.w	8007924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077e6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007821 	.word	0x08007821
 80077f0:	08007925 	.word	0x08007925
 80077f4:	08007925 	.word	0x08007925
 80077f8:	08007925 	.word	0x08007925
 80077fc:	08007861 	.word	0x08007861
 8007800:	08007925 	.word	0x08007925
 8007804:	08007925 	.word	0x08007925
 8007808:	08007925 	.word	0x08007925
 800780c:	080078a3 	.word	0x080078a3
 8007810:	08007925 	.word	0x08007925
 8007814:	08007925 	.word	0x08007925
 8007818:	08007925 	.word	0x08007925
 800781c:	080078e3 	.word	0x080078e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fab8 	bl	8007d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0208 	orr.w	r2, r2, #8
 800783a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0204 	bic.w	r2, r2, #4
 800784a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	619a      	str	r2, [r3, #24]
      break;
 800785e:	e064      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fafe 	bl	8007e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800787a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800788a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6999      	ldr	r1, [r3, #24]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	021a      	lsls	r2, r3, #8
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	619a      	str	r2, [r3, #24]
      break;
 80078a0:	e043      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fb47 	bl	8007f3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0208 	orr.w	r2, r2, #8
 80078bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0204 	bic.w	r2, r2, #4
 80078cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69d9      	ldr	r1, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	61da      	str	r2, [r3, #28]
      break;
 80078e0:	e023      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fb91 	bl	8008010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800790c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69d9      	ldr	r1, [r3, #28]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	021a      	lsls	r2, r3, #8
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	61da      	str	r2, [r3, #28]
      break;
 8007922:	e002      	b.n	800792a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
      break;
 8007928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_TIM_ConfigClockSource+0x1c>
 8007954:	2302      	movs	r3, #2
 8007956:	e0b4      	b.n	8007ac2 <HAL_TIM_ConfigClockSource+0x186>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800797e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007990:	d03e      	beq.n	8007a10 <HAL_TIM_ConfigClockSource+0xd4>
 8007992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007996:	f200 8087 	bhi.w	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800799e:	f000 8086 	beq.w	8007aae <HAL_TIM_ConfigClockSource+0x172>
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a6:	d87f      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079a8:	2b70      	cmp	r3, #112	@ 0x70
 80079aa:	d01a      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0xa6>
 80079ac:	2b70      	cmp	r3, #112	@ 0x70
 80079ae:	d87b      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	2b60      	cmp	r3, #96	@ 0x60
 80079b2:	d050      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x11a>
 80079b4:	2b60      	cmp	r3, #96	@ 0x60
 80079b6:	d877      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079b8:	2b50      	cmp	r3, #80	@ 0x50
 80079ba:	d03c      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0xfa>
 80079bc:	2b50      	cmp	r3, #80	@ 0x50
 80079be:	d873      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	d058      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x13a>
 80079c4:	2b40      	cmp	r3, #64	@ 0x40
 80079c6:	d86f      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079c8:	2b30      	cmp	r3, #48	@ 0x30
 80079ca:	d064      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079cc:	2b30      	cmp	r3, #48	@ 0x30
 80079ce:	d86b      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d060      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d867      	bhi.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d05c      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d05a      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x15a>
 80079e0:	e062      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079f2:	f000 fbd2 	bl	800819a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	609a      	str	r2, [r3, #8]
      break;
 8007a0e:	e04f      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a20:	f000 fbbb 	bl	800819a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a32:	609a      	str	r2, [r3, #8]
      break;
 8007a34:	e03c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fb32 	bl	80080ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2150      	movs	r1, #80	@ 0x50
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fb89 	bl	8008166 <TIM_ITRx_SetConfig>
      break;
 8007a54:	e02c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a62:	461a      	mov	r2, r3
 8007a64:	f000 fb50 	bl	8008108 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2160      	movs	r1, #96	@ 0x60
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fb79 	bl	8008166 <TIM_ITRx_SetConfig>
      break;
 8007a74:	e01c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a82:	461a      	mov	r2, r3
 8007a84:	f000 fb12 	bl	80080ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2140      	movs	r1, #64	@ 0x40
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fb69 	bl	8008166 <TIM_ITRx_SetConfig>
      break;
 8007a94:	e00c      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f000 fb60 	bl	8008166 <TIM_ITRx_SetConfig>
      break;
 8007aa6:	e003      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e000      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr

08007adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr

08007aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bc80      	pop	{r7}
 8007b34:	4770      	bx	lr

08007b36 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d107      	bne.n	8007b5e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b5c:	e02a      	b.n	8007bb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d107      	bne.n	8007b78 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b76:	e01d      	b.n	8007bb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d107      	bne.n	8007b92 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2204      	movs	r2, #4
 8007b86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b90:	e010      	b.n	8007bb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d107      	bne.n	8007bac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2208      	movs	r2, #8
 8007ba0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007baa:	e003      	b.n	8007bb4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7ff ffb5 	bl	8007b24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	771a      	strb	r2, [r3, #28]
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d10b      	bne.n	8007bf8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d136      	bne.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bf6:	e031      	b.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d10b      	bne.n	8007c1a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2202      	movs	r2, #2
 8007c06:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d125      	bne.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c18:	e020      	b.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d10b      	bne.n	8007c3c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2204      	movs	r2, #4
 8007c28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d114      	bne.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c3a:	e00f      	b.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d10a      	bne.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2208      	movs	r2, #8
 8007c4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff ff46 	bl	8007aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d103      	bne.n	8007c90 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	771a      	strb	r2, [r3, #28]
 8007c8e:	e019      	b.n	8007cc4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d103      	bne.n	8007ca2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	771a      	strb	r2, [r3, #28]
 8007ca0:	e010      	b.n	8007cc4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d103      	bne.n	8007cb4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2204      	movs	r2, #4
 8007cb0:	771a      	strb	r2, [r3, #28]
 8007cb2:	e007      	b.n	8007cc4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d102      	bne.n	8007cc4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff ff1b 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	771a      	strb	r2, [r3, #28]
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a29      	ldr	r2, [pc, #164]	@ (8007d90 <TIM_Base_SetConfig+0xb8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00b      	beq.n	8007d08 <TIM_Base_SetConfig+0x30>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf6:	d007      	beq.n	8007d08 <TIM_Base_SetConfig+0x30>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a26      	ldr	r2, [pc, #152]	@ (8007d94 <TIM_Base_SetConfig+0xbc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_Base_SetConfig+0x30>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a25      	ldr	r2, [pc, #148]	@ (8007d98 <TIM_Base_SetConfig+0xc0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d108      	bne.n	8007d1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007d90 <TIM_Base_SetConfig+0xb8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d00b      	beq.n	8007d3a <TIM_Base_SetConfig+0x62>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d28:	d007      	beq.n	8007d3a <TIM_Base_SetConfig+0x62>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a19      	ldr	r2, [pc, #100]	@ (8007d94 <TIM_Base_SetConfig+0xbc>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d003      	beq.n	8007d3a <TIM_Base_SetConfig+0x62>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a18      	ldr	r2, [pc, #96]	@ (8007d98 <TIM_Base_SetConfig+0xc0>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d108      	bne.n	8007d4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a07      	ldr	r2, [pc, #28]	@ (8007d90 <TIM_Base_SetConfig+0xb8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d103      	bne.n	8007d80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	615a      	str	r2, [r3, #20]
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr
 8007d90:	40012c00 	.word	0x40012c00
 8007d94:	40000400 	.word	0x40000400
 8007d98:	40000800 	.word	0x40000800

08007d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	f023 0201 	bic.w	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0303 	bic.w	r3, r3, #3
 8007dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f023 0302 	bic.w	r3, r3, #2
 8007de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e64 <TIM_OC1_SetConfig+0xc8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d10c      	bne.n	8007e12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f023 0308 	bic.w	r3, r3, #8
 8007dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f023 0304 	bic.w	r3, r3, #4
 8007e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a13      	ldr	r2, [pc, #76]	@ (8007e64 <TIM_OC1_SetConfig+0xc8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d111      	bne.n	8007e3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	621a      	str	r2, [r3, #32]
}
 8007e58:	bf00      	nop
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40012c00 	.word	0x40012c00

08007e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f023 0210 	bic.w	r2, r3, #16
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 0320 	bic.w	r3, r3, #32
 8007eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	011b      	lsls	r3, r3, #4
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f38 <TIM_OC2_SetConfig+0xd0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d10d      	bne.n	8007ee4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a14      	ldr	r2, [pc, #80]	@ (8007f38 <TIM_OC2_SetConfig+0xd0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d113      	bne.n	8007f14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	621a      	str	r2, [r3, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr
 8007f38:	40012c00 	.word	0x40012c00

08007f3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0303 	bic.w	r3, r3, #3
 8007f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1d      	ldr	r2, [pc, #116]	@ (800800c <TIM_OC3_SetConfig+0xd0>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d10d      	bne.n	8007fb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a14      	ldr	r2, [pc, #80]	@ (800800c <TIM_OC3_SetConfig+0xd0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d113      	bne.n	8007fe6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	621a      	str	r2, [r3, #32]
}
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40012c00 	.word	0x40012c00

08008010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4313      	orrs	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800805a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	031b      	lsls	r3, r3, #12
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a0f      	ldr	r2, [pc, #60]	@ (80080a8 <TIM_OC4_SetConfig+0x98>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d109      	bne.n	8008084 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	019b      	lsls	r3, r3, #6
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr
 80080a8:	40012c00 	.word	0x40012c00

080080ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0201 	bic.w	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f023 030a 	bic.w	r3, r3, #10
 80080e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr

08008108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	f023 0210 	bic.w	r2, r3, #16
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	031b      	lsls	r3, r3, #12
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008144:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	621a      	str	r2, [r3, #32]
}
 800815c:	bf00      	nop
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr

08008166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	f043 0307 	orr.w	r3, r3, #7
 8008188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	609a      	str	r2, [r3, #8]
}
 8008190:	bf00      	nop
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr

0800819a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800819a:	b480      	push	{r7}
 800819c:	b087      	sub	sp, #28
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	607a      	str	r2, [r7, #4]
 80081a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	021a      	lsls	r2, r3, #8
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	431a      	orrs	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	609a      	str	r2, [r3, #8]
}
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bc80      	pop	{r7}
 80081d6:	4770      	bx	lr

080081d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 031f 	and.w	r3, r3, #31
 80081ea:	2201      	movs	r2, #1
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	43db      	mvns	r3, r3
 80081fa:	401a      	ands	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f003 031f 	and.w	r3, r3, #31
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	fa01 f303 	lsl.w	r3, r1, r3
 8008210:	431a      	orrs	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008234:	2302      	movs	r3, #2
 8008236:	e046      	b.n	80082c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a16      	ldr	r2, [pc, #88]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00e      	beq.n	800829a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008284:	d009      	beq.n	800829a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a12      	ldr	r2, [pc, #72]	@ (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d004      	beq.n	800829a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a10      	ldr	r2, [pc, #64]	@ (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d10c      	bne.n	80082b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	40000400 	.word	0x40000400
 80082d8:	40000800 	.word	0x40000800

080082dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bc80      	pop	{r7}
 80082ec:	4770      	bx	lr

080082ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr

08008300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e042      	b.n	8008398 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fc f8b8 	bl	800449c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2224      	movs	r2, #36	@ 0x24
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f91d 	bl	8008584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	695a      	ldr	r2, [r3, #20]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08a      	sub	sp, #40	@ 0x28
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	4613      	mov	r3, r2
 80083ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d16d      	bne.n	800849c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <HAL_UART_Transmit+0x2c>
 80083c6:	88fb      	ldrh	r3, [r7, #6]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e066      	b.n	800849e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2221      	movs	r2, #33	@ 0x21
 80083da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083de:	f7fc f9fd 	bl	80047dc <HAL_GetTick>
 80083e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	88fa      	ldrh	r2, [r7, #6]
 80083e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f8:	d108      	bne.n	800840c <HAL_UART_Transmit+0x6c>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	e003      	b.n	8008414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008414:	e02a      	b.n	800846c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2200      	movs	r2, #0
 800841e:	2180      	movs	r1, #128	@ 0x80
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f840 	bl	80084a6 <UART_WaitOnFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e036      	b.n	800849e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	3302      	adds	r3, #2
 800844a:	61bb      	str	r3, [r7, #24]
 800844c:	e007      	b.n	800845e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	3301      	adds	r3, #1
 800845c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1cf      	bne.n	8008416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2200      	movs	r2, #0
 800847e:	2140      	movs	r1, #64	@ 0x40
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f810 	bl	80084a6 <UART_WaitOnFlagUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e006      	b.n	800849e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	e000      	b.n	800849e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800849c:	2302      	movs	r3, #2
  }
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b090      	sub	sp, #64	@ 0x40
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	603b      	str	r3, [r7, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084b6:	e050      	b.n	800855a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084be:	d04c      	beq.n	800855a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d007      	beq.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80084c6:	f7fc f989 	bl	80047dc <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d241      	bcs.n	800855a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	330c      	adds	r3, #12
 80084dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80084ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80084f8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e5      	bne.n	80084d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3314      	adds	r3, #20
 8008510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	613b      	str	r3, [r7, #16]
   return(result);
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3314      	adds	r3, #20
 8008528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800852a:	623a      	str	r2, [r7, #32]
 800852c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	69f9      	ldr	r1, [r7, #28]
 8008530:	6a3a      	ldr	r2, [r7, #32]
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	61bb      	str	r3, [r7, #24]
   return(result);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e5      	bne.n	800850a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2220      	movs	r2, #32
 8008542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e00f      	b.n	800857a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	429a      	cmp	r2, r3
 8008576:	d09f      	beq.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3740      	adds	r7, #64	@ 0x40
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80085be:	f023 030c 	bic.w	r3, r3, #12
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	430b      	orrs	r3, r1
 80085ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008698 <UART_SetConfig+0x114>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d103      	bne.n	80085f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085ec:	f7fe fb34 	bl	8006c58 <HAL_RCC_GetPCLK2Freq>
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	e002      	b.n	80085fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80085f4:	f7fe fb1c 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 80085f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009a      	lsls	r2, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	4a22      	ldr	r2, [pc, #136]	@ (800869c <UART_SetConfig+0x118>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	0119      	lsls	r1, r3, #4
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009a      	lsls	r2, r3, #2
 8008624:	441a      	add	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008630:	4b1a      	ldr	r3, [pc, #104]	@ (800869c <UART_SetConfig+0x118>)
 8008632:	fba3 0302 	umull	r0, r3, r3, r2
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	2064      	movs	r0, #100	@ 0x64
 800863a:	fb00 f303 	mul.w	r3, r0, r3
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	3332      	adds	r3, #50	@ 0x32
 8008644:	4a15      	ldr	r2, [pc, #84]	@ (800869c <UART_SetConfig+0x118>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008650:	4419      	add	r1, r3
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009a      	lsls	r2, r3, #2
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	fbb2 f2f3 	udiv	r2, r2, r3
 8008668:	4b0c      	ldr	r3, [pc, #48]	@ (800869c <UART_SetConfig+0x118>)
 800866a:	fba3 0302 	umull	r0, r3, r3, r2
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	2064      	movs	r0, #100	@ 0x64
 8008672:	fb00 f303 	mul.w	r3, r0, r3
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	3332      	adds	r3, #50	@ 0x32
 800867c:	4a07      	ldr	r2, [pc, #28]	@ (800869c <UART_SetConfig+0x118>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	440a      	add	r2, r1
 800868e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	40013800 	.word	0x40013800
 800869c:	51eb851f 	.word	0x51eb851f

080086a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a6:	f3ef 8305 	mrs	r3, IPSR
 80086aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80086ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10f      	bne.n	80086d2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b2:	f3ef 8310 	mrs	r3, PRIMASK
 80086b6:	607b      	str	r3, [r7, #4]
  return(result);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <osKernelInitialize+0x32>
 80086be:	4b10      	ldr	r3, [pc, #64]	@ (8008700 <osKernelInitialize+0x60>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d109      	bne.n	80086da <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086c6:	f3ef 8311 	mrs	r3, BASEPRI
 80086ca:	603b      	str	r3, [r7, #0]
  return(result);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80086d2:	f06f 0305 	mvn.w	r3, #5
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e00c      	b.n	80086f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80086da:	4b09      	ldr	r3, [pc, #36]	@ (8008700 <osKernelInitialize+0x60>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d105      	bne.n	80086ee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80086e2:	4b07      	ldr	r3, [pc, #28]	@ (8008700 <osKernelInitialize+0x60>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	e002      	b.n	80086f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80086ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr
 8008700:	20001edc 	.word	0x20001edc

08008704 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800870a:	f3ef 8305 	mrs	r3, IPSR
 800870e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008710:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10f      	bne.n	8008736 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008716:	f3ef 8310 	mrs	r3, PRIMASK
 800871a:	607b      	str	r3, [r7, #4]
  return(result);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <osKernelStart+0x32>
 8008722:	4b11      	ldr	r3, [pc, #68]	@ (8008768 <osKernelStart+0x64>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d109      	bne.n	800873e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800872a:	f3ef 8311 	mrs	r3, BASEPRI
 800872e:	603b      	str	r3, [r7, #0]
  return(result);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008736:	f06f 0305 	mvn.w	r3, #5
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	e00e      	b.n	800875c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800873e:	4b0a      	ldr	r3, [pc, #40]	@ (8008768 <osKernelStart+0x64>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d107      	bne.n	8008756 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008746:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <osKernelStart+0x64>)
 8008748:	2202      	movs	r2, #2
 800874a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800874c:	f001 fe6c 	bl	800a428 <vTaskStartScheduler>
      stat = osOK;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	e002      	b.n	800875c <osKernelStart+0x58>
    } else {
      stat = osError;
 8008756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800875a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20001edc 	.word	0x20001edc

0800876c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b092      	sub	sp, #72	@ 0x48
 8008770:	af04      	add	r7, sp, #16
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800877c:	f3ef 8305 	mrs	r3, IPSR
 8008780:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 8094 	bne.w	80088b2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800878a:	f3ef 8310 	mrs	r3, PRIMASK
 800878e:	623b      	str	r3, [r7, #32]
  return(result);
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 808d 	bne.w	80088b2 <osThreadNew+0x146>
 8008798:	4b48      	ldr	r3, [pc, #288]	@ (80088bc <osThreadNew+0x150>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d106      	bne.n	80087ae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087a0:	f3ef 8311 	mrs	r3, BASEPRI
 80087a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f040 8082 	bne.w	80088b2 <osThreadNew+0x146>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d07e      	beq.n	80088b2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80087b4:	2380      	movs	r3, #128	@ 0x80
 80087b6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80087b8:	2318      	movs	r3, #24
 80087ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80087bc:	2300      	movs	r3, #0
 80087be:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80087c0:	f107 031b 	add.w	r3, r7, #27
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d045      	beq.n	800885e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <osThreadNew+0x74>
        name = attr->name;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d008      	beq.n	8008806 <osThreadNew+0x9a>
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f6:	2b38      	cmp	r3, #56	@ 0x38
 80087f8:	d805      	bhi.n	8008806 <osThreadNew+0x9a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <osThreadNew+0x9e>
        return (NULL);
 8008806:	2300      	movs	r3, #0
 8008808:	e054      	b.n	80088b4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	089b      	lsrs	r3, r3, #2
 8008818:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00e      	beq.n	8008840 <osThreadNew+0xd4>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2bab      	cmp	r3, #171	@ 0xab
 8008828:	d90a      	bls.n	8008840 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <osThreadNew+0xd4>
        mem = 1;
 800883a:	2301      	movs	r3, #1
 800883c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800883e:	e010      	b.n	8008862 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10c      	bne.n	8008862 <osThreadNew+0xf6>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d108      	bne.n	8008862 <osThreadNew+0xf6>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <osThreadNew+0xf6>
          mem = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800885c:	e001      	b.n	8008862 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8008862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008864:	2b01      	cmp	r3, #1
 8008866:	d110      	bne.n	800888a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008870:	9202      	str	r2, [sp, #8]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800887c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 fbe6 	bl	800a050 <xTaskCreateStatic>
 8008884:	4603      	mov	r3, r0
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e013      	b.n	80088b2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	2b00      	cmp	r3, #0
 800888e:	d110      	bne.n	80088b2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	b29a      	uxth	r2, r3
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f001 fc33 	bl	800a10e <xTaskCreate>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d001      	beq.n	80088b2 <osThreadNew+0x146>
          hTask = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088b2:	697b      	ldr	r3, [r7, #20]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3738      	adds	r7, #56	@ 0x38
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20001edc 	.word	0x20001edc

080088c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088c8:	f3ef 8305 	mrs	r3, IPSR
 80088cc:	613b      	str	r3, [r7, #16]
  return(result);
 80088ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10f      	bne.n	80088f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088d4:	f3ef 8310 	mrs	r3, PRIMASK
 80088d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <osDelay+0x34>
 80088e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008918 <osDelay+0x58>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d109      	bne.n	80088fc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088e8:	f3ef 8311 	mrs	r3, BASEPRI
 80088ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <osDelay+0x3c>
    stat = osErrorISR;
 80088f4:	f06f 0305 	mvn.w	r3, #5
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e007      	b.n	800890c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fd58 	bl	800a3bc <vTaskDelay>
    }
  }

  return (stat);
 800890c:	697b      	ldr	r3, [r7, #20]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20001edc 	.word	0x20001edc

0800891c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	@ 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008928:	f3ef 8305 	mrs	r3, IPSR
 800892c:	613b      	str	r3, [r7, #16]
  return(result);
 800892e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8085 	bne.w	8008a40 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008936:	f3ef 8310 	mrs	r3, PRIMASK
 800893a:	60fb      	str	r3, [r7, #12]
  return(result);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d17e      	bne.n	8008a40 <osMutexNew+0x124>
 8008942:	4b42      	ldr	r3, [pc, #264]	@ (8008a4c <osMutexNew+0x130>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d105      	bne.n	8008956 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800894a:	f3ef 8311 	mrs	r3, BASEPRI
 800894e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d174      	bne.n	8008a40 <osMutexNew+0x124>
    if (attr != NULL) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <osMutexNew+0x48>
      type = attr->attr_bits;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	623b      	str	r3, [r7, #32]
 8008962:	e001      	b.n	8008968 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <osMutexNew+0x5c>
      rmtx = 1U;
 8008972:	2301      	movs	r3, #1
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	e001      	b.n	800897c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d15c      	bne.n	8008a40 <osMutexNew+0x124>
      mem = -1;
 8008986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800898a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d015      	beq.n	80089be <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d006      	beq.n	80089a8 <osMutexNew+0x8c>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	2b4f      	cmp	r3, #79	@ 0x4f
 80089a0:	d902      	bls.n	80089a8 <osMutexNew+0x8c>
          mem = 1;
 80089a2:	2301      	movs	r3, #1
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	e00c      	b.n	80089c2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d108      	bne.n	80089c2 <osMutexNew+0xa6>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <osMutexNew+0xa6>
            mem = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61bb      	str	r3, [r7, #24]
 80089bc:	e001      	b.n	80089c2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d112      	bne.n	80089ee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	4619      	mov	r1, r3
 80089d4:	2004      	movs	r0, #4
 80089d6:	f000 fce3 	bl	80093a0 <xQueueCreateMutexStatic>
 80089da:	6278      	str	r0, [r7, #36]	@ 0x24
 80089dc:	e016      	b.n	8008a0c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	4619      	mov	r1, r3
 80089e4:	2001      	movs	r0, #1
 80089e6:	f000 fcdb 	bl	80093a0 <xQueueCreateMutexStatic>
 80089ea:	6278      	str	r0, [r7, #36]	@ 0x24
 80089ec:	e00e      	b.n	8008a0c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d004      	beq.n	8008a04 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80089fa:	2004      	movs	r0, #4
 80089fc:	f000 fcb8 	bl	8009370 <xQueueCreateMutex>
 8008a00:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a02:	e003      	b.n	8008a0c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008a04:	2001      	movs	r0, #1
 8008a06:	f000 fcb3 	bl	8009370 <xQueueCreateMutex>
 8008a0a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00c      	beq.n	8008a2c <osMutexNew+0x110>
        if (attr != NULL) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <osMutexNew+0x104>
          name = attr->name;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e001      	b.n	8008a24 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008a24:	6979      	ldr	r1, [r7, #20]
 8008a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a28:	f001 fab6 	bl	8009f98 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d006      	beq.n	8008a40 <osMutexNew+0x124>
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3728      	adds	r7, #40	@ 0x28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20001edc 	.word	0x20001edc

08008a50 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6e:	f3ef 8305 	mrs	r3, IPSR
 8008a72:	613b      	str	r3, [r7, #16]
  return(result);
 8008a74:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10f      	bne.n	8008a9a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <osMutexAcquire+0x4a>
 8008a86:	4b20      	ldr	r3, [pc, #128]	@ (8008b08 <osMutexAcquire+0xb8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d109      	bne.n	8008aa2 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a92:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008a9a:	f06f 0305 	mvn.w	r3, #5
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e02c      	b.n	8008afc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d103      	bne.n	8008ab0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008aa8:	f06f 0303 	mvn.w	r3, #3
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	e025      	b.n	8008afc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d011      	beq.n	8008ada <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	69b8      	ldr	r0, [r7, #24]
 8008aba:	f000 fcc1 	bl	8009440 <xQueueTakeMutexRecursive>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d01b      	beq.n	8008afc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008aca:	f06f 0301 	mvn.w	r3, #1
 8008ace:	61fb      	str	r3, [r7, #28]
 8008ad0:	e014      	b.n	8008afc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008ad2:	f06f 0302 	mvn.w	r3, #2
 8008ad6:	61fb      	str	r3, [r7, #28]
 8008ad8:	e010      	b.n	8008afc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	69b8      	ldr	r0, [r7, #24]
 8008ade:	f000 ff67 	bl	80099b0 <xQueueSemaphoreTake>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d009      	beq.n	8008afc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008aee:	f06f 0301 	mvn.w	r3, #1
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e002      	b.n	8008afc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008af6:	f06f 0302 	mvn.w	r3, #2
 8008afa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008afc:	69fb      	ldr	r3, [r7, #28]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3720      	adds	r7, #32
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20001edc 	.word	0x20001edc

08008b0c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f023 0301 	bic.w	r3, r3, #1
 8008b1a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b28:	f3ef 8305 	mrs	r3, IPSR
 8008b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8008b2e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10f      	bne.n	8008b54 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b34:	f3ef 8310 	mrs	r3, PRIMASK
 8008b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d109      	bne.n	8008b54 <osMutexRelease+0x48>
 8008b40:	4b19      	ldr	r3, [pc, #100]	@ (8008ba8 <osMutexRelease+0x9c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d109      	bne.n	8008b5c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b48:	f3ef 8311 	mrs	r3, BASEPRI
 8008b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <osMutexRelease+0x50>
    stat = osErrorISR;
 8008b54:	f06f 0305 	mvn.w	r3, #5
 8008b58:	61fb      	str	r3, [r7, #28]
 8008b5a:	e01f      	b.n	8008b9c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008b62:	f06f 0303 	mvn.w	r3, #3
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	e018      	b.n	8008b9c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008b70:	69b8      	ldr	r0, [r7, #24]
 8008b72:	f000 fc30 	bl	80093d6 <xQueueGiveMutexRecursive>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d00f      	beq.n	8008b9c <osMutexRelease+0x90>
        stat = osErrorResource;
 8008b7c:	f06f 0302 	mvn.w	r3, #2
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	e00b      	b.n	8008b9c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008b84:	2300      	movs	r3, #0
 8008b86:	2200      	movs	r2, #0
 8008b88:	2100      	movs	r1, #0
 8008b8a:	69b8      	ldr	r0, [r7, #24]
 8008b8c:	f000 fc90 	bl	80094b0 <xQueueGenericSend>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d002      	beq.n	8008b9c <osMutexRelease+0x90>
        stat = osErrorResource;
 8008b96:	f06f 0302 	mvn.w	r3, #2
 8008b9a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008b9c:	69fb      	ldr	r3, [r7, #28]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20001edc 	.word	0x20001edc

08008bac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08c      	sub	sp, #48	@ 0x30
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bbc:	f3ef 8305 	mrs	r3, IPSR
 8008bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bc2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d16f      	bne.n	8008ca8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d169      	bne.n	8008ca8 <osMessageQueueNew+0xfc>
 8008bd4:	4b37      	ldr	r3, [pc, #220]	@ (8008cb4 <osMessageQueueNew+0x108>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d105      	bne.n	8008be8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8008be0:	613b      	str	r3, [r7, #16]
  return(result);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d15f      	bne.n	8008ca8 <osMessageQueueNew+0xfc>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d05c      	beq.n	8008ca8 <osMessageQueueNew+0xfc>
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d059      	beq.n	8008ca8 <osMessageQueueNew+0xfc>
    mem = -1;
 8008bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bf8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d029      	beq.n	8008c54 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d012      	beq.n	8008c2e <osMessageQueueNew+0x82>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	2b4f      	cmp	r3, #79	@ 0x4f
 8008c0e:	d90e      	bls.n	8008c2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <osMessageQueueNew+0x82>
        mem = 1;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	623b      	str	r3, [r7, #32]
 8008c2c:	e014      	b.n	8008c58 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d110      	bne.n	8008c58 <osMessageQueueNew+0xac>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10c      	bne.n	8008c58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d108      	bne.n	8008c58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d104      	bne.n	8008c58 <osMessageQueueNew+0xac>
          mem = 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	623b      	str	r3, [r7, #32]
 8008c52:	e001      	b.n	8008c58 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d10b      	bne.n	8008c76 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691a      	ldr	r2, [r3, #16]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	2100      	movs	r1, #0
 8008c68:	9100      	str	r1, [sp, #0]
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fa87 	bl	8009180 <xQueueGenericCreateStatic>
 8008c72:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c74:	e008      	b.n	8008c88 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d105      	bne.n	8008c88 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 faf9 	bl	8009278 <xQueueGenericCreate>
 8008c86:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00c      	beq.n	8008ca8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <osMessageQueueNew+0xf0>
        name = attr->name;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	61fb      	str	r3, [r7, #28]
 8008c9a:	e001      	b.n	8008ca0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008ca0:	69f9      	ldr	r1, [r7, #28]
 8008ca2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ca4:	f001 f978 	bl	8009f98 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3728      	adds	r7, #40	@ 0x28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20001edc 	.word	0x20001edc

08008cb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	@ 0x28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cd0:	f3ef 8305 	mrs	r3, IPSR
 8008cd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8008cd6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10f      	bne.n	8008cfc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8008ce0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d109      	bne.n	8008cfc <osMessageQueuePut+0x44>
 8008ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8008d98 <osMessageQueuePut+0xe0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d12e      	bne.n	8008d4e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8008cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d028      	beq.n	8008d4e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <osMessageQueuePut+0x56>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <osMessageQueuePut+0x56>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008d0e:	f06f 0303 	mvn.w	r3, #3
 8008d12:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d14:	e039      	b.n	8008d8a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d1a:	f107 0210 	add.w	r2, r7, #16
 8008d1e:	2300      	movs	r3, #0
 8008d20:	68b9      	ldr	r1, [r7, #8]
 8008d22:	6a38      	ldr	r0, [r7, #32]
 8008d24:	f000 fcc6 	bl	80096b4 <xQueueGenericSendFromISR>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d003      	beq.n	8008d36 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008d2e:	f06f 0302 	mvn.w	r3, #2
 8008d32:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d34:	e029      	b.n	8008d8a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d026      	beq.n	8008d8a <osMessageQueuePut+0xd2>
 8008d3c:	4b17      	ldr	r3, [pc, #92]	@ (8008d9c <osMessageQueuePut+0xe4>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d4c:	e01d      	b.n	8008d8a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <osMessageQueuePut+0xa2>
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008d5a:	f06f 0303 	mvn.w	r3, #3
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d60:	e014      	b.n	8008d8c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d62:	2300      	movs	r3, #0
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	68b9      	ldr	r1, [r7, #8]
 8008d68:	6a38      	ldr	r0, [r7, #32]
 8008d6a:	f000 fba1 	bl	80094b0 <xQueueGenericSend>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d00b      	beq.n	8008d8c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008d7a:	f06f 0301 	mvn.w	r3, #1
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d80:	e004      	b.n	8008d8c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008d82:	f06f 0302 	mvn.w	r3, #2
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d88:	e000      	b.n	8008d8c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d8a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	@ 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20001edc 	.word	0x20001edc
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	@ 0x28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008db6:	f3ef 8305 	mrs	r3, IPSR
 8008dba:	61fb      	str	r3, [r7, #28]
  return(result);
 8008dbc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10f      	bne.n	8008de2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d109      	bne.n	8008de2 <osMessageQueueGet+0x42>
 8008dce:	4b2b      	ldr	r3, [pc, #172]	@ (8008e7c <osMessageQueueGet+0xdc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d12e      	bne.n	8008e34 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8008dda:	617b      	str	r3, [r7, #20]
  return(result);
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d028      	beq.n	8008e34 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <osMessageQueueGet+0x54>
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <osMessageQueueGet+0x54>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008df4:	f06f 0303 	mvn.w	r3, #3
 8008df8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dfa:	e038      	b.n	8008e6e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008e00:	f107 0310 	add.w	r3, r7, #16
 8008e04:	461a      	mov	r2, r3
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	6a38      	ldr	r0, [r7, #32]
 8008e0a:	f000 fee1 	bl	8009bd0 <xQueueReceiveFromISR>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d003      	beq.n	8008e1c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008e14:	f06f 0302 	mvn.w	r3, #2
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e1a:	e028      	b.n	8008e6e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d025      	beq.n	8008e6e <osMessageQueueGet+0xce>
 8008e22:	4b17      	ldr	r3, [pc, #92]	@ (8008e80 <osMessageQueueGet+0xe0>)
 8008e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e32:	e01c      	b.n	8008e6e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <osMessageQueueGet+0xa0>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d103      	bne.n	8008e48 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008e40:	f06f 0303 	mvn.w	r3, #3
 8008e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e46:	e013      	b.n	8008e70 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	6a38      	ldr	r0, [r7, #32]
 8008e4e:	f000 fccd 	bl	80097ec <xQueueReceive>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d00b      	beq.n	8008e70 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008e5e:	f06f 0301 	mvn.w	r3, #1
 8008e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e64:	e004      	b.n	8008e70 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008e66:	f06f 0302 	mvn.w	r3, #2
 8008e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e6c:	e000      	b.n	8008e70 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3728      	adds	r7, #40	@ 0x28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20001edc 	.word	0x20001edc
 8008e80:	e000ed04 	.word	0xe000ed04

08008e84 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d102      	bne.n	8008e9c <osMessageQueueGetCount+0x18>
    count = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	e01e      	b.n	8008eda <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e9c:	f3ef 8305 	mrs	r3, IPSR
 8008ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10f      	bne.n	8008ec8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8008eac:	613b      	str	r3, [r7, #16]
  return(result);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d109      	bne.n	8008ec8 <osMessageQueueGetCount+0x44>
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee4 <osMessageQueueGetCount+0x60>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d10a      	bne.n	8008ed2 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8008ec0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008ec8:	69b8      	ldr	r0, [r7, #24]
 8008eca:	f000 ff22 	bl	8009d12 <uxQueueMessagesWaitingFromISR>
 8008ece:	61f8      	str	r0, [r7, #28]
 8008ed0:	e003      	b.n	8008eda <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008ed2:	69b8      	ldr	r0, [r7, #24]
 8008ed4:	f000 fefe 	bl	8009cd4 <uxQueueMessagesWaiting>
 8008ed8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8008eda:	69fb      	ldr	r3, [r7, #28]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20001edc 	.word	0x20001edc

08008ee8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4a06      	ldr	r2, [pc, #24]	@ (8008f10 <vApplicationGetIdleTaskMemory+0x28>)
 8008ef8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	4a05      	ldr	r2, [pc, #20]	@ (8008f14 <vApplicationGetIdleTaskMemory+0x2c>)
 8008efe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2280      	movs	r2, #128	@ 0x80
 8008f04:	601a      	str	r2, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr
 8008f10:	20001ee0 	.word	0x20001ee0
 8008f14:	20001f8c 	.word	0x20001f8c

08008f18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4a07      	ldr	r2, [pc, #28]	@ (8008f44 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	4a06      	ldr	r2, [pc, #24]	@ (8008f48 <vApplicationGetTimerTaskMemory+0x30>)
 8008f2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f36:	601a      	str	r2, [r3, #0]
}
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	2000218c 	.word	0x2000218c
 8008f48:	20002238 	.word	0x20002238

08008f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f103 0208 	add.w	r2, r3, #8
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f103 0208 	add.w	r2, r3, #8
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f103 0208 	add.w	r2, r3, #8
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bc80      	pop	{r7}
 8008f88:	4770      	bx	lr

08008f8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc80      	pop	{r7}
 8008fa0:	4770      	bx	lr

08008fa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	1c5a      	adds	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ffe:	d103      	bne.n	8009008 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	e00c      	b.n	8009022 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3308      	adds	r3, #8
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	e002      	b.n	8009016 <vListInsert+0x2e>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	429a      	cmp	r2, r3
 8009020:	d2f6      	bcs.n	8009010 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	601a      	str	r2, [r3, #0]
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	bc80      	pop	{r7}
 8009056:	4770      	bx	lr

08009058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6892      	ldr	r2, [r2, #8]
 800906e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6852      	ldr	r2, [r2, #4]
 8009078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d103      	bne.n	800908c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	1e5a      	subs	r2, r3, #1
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr
	...

080090ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10b      	bne.n	80090d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090d8:	f002 fc48 	bl	800b96c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e4:	68f9      	ldr	r1, [r7, #12]
 80090e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80090e8:	fb01 f303 	mul.w	r3, r1, r3
 80090ec:	441a      	add	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009108:	3b01      	subs	r3, #1
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800910e:	fb01 f303 	mul.w	r3, r1, r3
 8009112:	441a      	add	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	22ff      	movs	r2, #255	@ 0xff
 800911c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	22ff      	movs	r2, #255	@ 0xff
 8009124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d114      	bne.n	8009158 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01a      	beq.n	800916c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3310      	adds	r3, #16
 800913a:	4618      	mov	r0, r3
 800913c:	f001 fc3c 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d012      	beq.n	800916c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009146:	4b0d      	ldr	r3, [pc, #52]	@ (800917c <xQueueGenericReset+0xd0>)
 8009148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	e009      	b.n	800916c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3310      	adds	r3, #16
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fef5 	bl	8008f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3324      	adds	r3, #36	@ 0x24
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff fef0 	bl	8008f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800916c:	f002 fc2e 	bl	800b9cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009170:	2301      	movs	r3, #1
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	@ 0x38
 8009184:	af02      	add	r7, sp, #8
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10b      	bne.n	80091ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	e7fd      	b.n	80091a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10b      	bne.n	80091ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	e7fd      	b.n	80091c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <xQueueGenericCreateStatic+0x56>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <xQueueGenericCreateStatic+0x5a>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <xQueueGenericCreateStatic+0x5c>
 80091da:	2300      	movs	r3, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	623b      	str	r3, [r7, #32]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d102      	bne.n	8009204 <xQueueGenericCreateStatic+0x84>
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <xQueueGenericCreateStatic+0x88>
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <xQueueGenericCreateStatic+0x8a>
 8009208:	2300      	movs	r3, #0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10b      	bne.n	8009226 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	61fb      	str	r3, [r7, #28]
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	e7fd      	b.n	8009222 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009226:	2350      	movs	r3, #80	@ 0x50
 8009228:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2b50      	cmp	r3, #80	@ 0x50
 800922e:	d00b      	beq.n	8009248 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	61bb      	str	r3, [r7, #24]
}
 8009242:	bf00      	nop
 8009244:	bf00      	nop
 8009246:	e7fd      	b.n	8009244 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800924c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00d      	beq.n	800926e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800925a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800925e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	4613      	mov	r3, r2
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 f844 	bl	80092f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800926e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009270:	4618      	mov	r0, r3
 8009272:	3730      	adds	r7, #48	@ 0x30
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08a      	sub	sp, #40	@ 0x28
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10b      	bne.n	80092a4 <xQueueGenericCreate+0x2c>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	613b      	str	r3, [r7, #16]
}
 800929e:	bf00      	nop
 80092a0:	bf00      	nop
 80092a2:	e7fd      	b.n	80092a0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d102      	bne.n	80092b0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
 80092ae:	e004      	b.n	80092ba <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	fb02 f303 	mul.w	r3, r2, r3
 80092b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	3350      	adds	r3, #80	@ 0x50
 80092be:	4618      	mov	r0, r3
 80092c0:	f002 fc56 	bl	800bb70 <pvPortMalloc>
 80092c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00f      	beq.n	80092ec <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	3350      	adds	r3, #80	@ 0x50
 80092d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092da:	79fa      	ldrb	r2, [r7, #7]
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 f805 	bl	80092f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80092ec:	69bb      	ldr	r3, [r7, #24]
	}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d103      	bne.n	8009312 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	e002      	b.n	8009318 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009324:	2101      	movs	r1, #1
 8009326:	69b8      	ldr	r0, [r7, #24]
 8009328:	f7ff fec0 	bl	80090ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009334:	bf00      	nop
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00e      	beq.n	8009368 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800935c:	2300      	movs	r3, #0
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f8a4 	bl	80094b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800937a:	2301      	movs	r3, #1
 800937c:	617b      	str	r3, [r7, #20]
 800937e:	2300      	movs	r3, #0
 8009380:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	461a      	mov	r2, r3
 8009386:	6939      	ldr	r1, [r7, #16]
 8009388:	6978      	ldr	r0, [r7, #20]
 800938a:	f7ff ff75 	bl	8009278 <xQueueGenericCreate>
 800938e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7ff ffd3 	bl	800933c <prvInitialiseMutex>

		return pxNewQueue;
 8009396:	68fb      	ldr	r3, [r7, #12]
	}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af02      	add	r7, sp, #8
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093ac:	2301      	movs	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	2300      	movs	r3, #0
 80093b2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	6939      	ldr	r1, [r7, #16]
 80093be:	6978      	ldr	r0, [r7, #20]
 80093c0:	f7ff fede 	bl	8009180 <xQueueGenericCreateStatic>
 80093c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff ffb8 	bl	800933c <prvInitialiseMutex>

		return pxNewQueue;
 80093cc:	68fb      	ldr	r3, [r7, #12]
	}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80093d6:	b590      	push	{r4, r7, lr}
 80093d8:	b087      	sub	sp, #28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10b      	bne.n	8009400 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	60fb      	str	r3, [r7, #12]
}
 80093fa:	bf00      	nop
 80093fc:	bf00      	nop
 80093fe:	e7fd      	b.n	80093fc <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	685c      	ldr	r4, [r3, #4]
 8009404:	f001 fca4 	bl	800ad50 <xTaskGetCurrentTaskHandle>
 8009408:	4603      	mov	r3, r0
 800940a:	429c      	cmp	r4, r3
 800940c:	d111      	bne.n	8009432 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	1e5a      	subs	r2, r3, #1
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d105      	bne.n	800942c <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009420:	2300      	movs	r3, #0
 8009422:	2200      	movs	r2, #0
 8009424:	2100      	movs	r1, #0
 8009426:	6938      	ldr	r0, [r7, #16]
 8009428:	f000 f842 	bl	80094b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800942c:	2301      	movs	r3, #1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	e001      	b.n	8009436 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009432:	2300      	movs	r3, #0
 8009434:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009436:	697b      	ldr	r3, [r7, #20]
	}
 8009438:	4618      	mov	r0, r3
 800943a:	371c      	adds	r7, #28
 800943c:	46bd      	mov	sp, r7
 800943e:	bd90      	pop	{r4, r7, pc}

08009440 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10b      	bne.n	800946c <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	60fb      	str	r3, [r7, #12]
}
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	e7fd      	b.n	8009468 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685c      	ldr	r4, [r3, #4]
 8009470:	f001 fc6e 	bl	800ad50 <xTaskGetCurrentTaskHandle>
 8009474:	4603      	mov	r3, r0
 8009476:	429c      	cmp	r4, r3
 8009478:	d107      	bne.n	800948a <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009484:	2301      	movs	r3, #1
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	e00c      	b.n	80094a4 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6938      	ldr	r0, [r7, #16]
 800948e:	f000 fa8f 	bl	80099b0 <xQueueSemaphoreTake>
 8009492:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d004      	beq.n	80094a4 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80094a4:	697b      	ldr	r3, [r7, #20]
	}
 80094a6:	4618      	mov	r0, r3
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd90      	pop	{r4, r7, pc}
	...

080094b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08e      	sub	sp, #56	@ 0x38
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10b      	bne.n	80094e4 <xQueueGenericSend+0x34>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80094de:	bf00      	nop
 80094e0:	bf00      	nop
 80094e2:	e7fd      	b.n	80094e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d103      	bne.n	80094f2 <xQueueGenericSend+0x42>
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <xQueueGenericSend+0x46>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <xQueueGenericSend+0x48>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10b      	bne.n	8009514 <xQueueGenericSend+0x64>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	e7fd      	b.n	8009510 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d103      	bne.n	8009522 <xQueueGenericSend+0x72>
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <xQueueGenericSend+0x76>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <xQueueGenericSend+0x78>
 8009526:	2300      	movs	r3, #0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10b      	bne.n	8009544 <xQueueGenericSend+0x94>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	623b      	str	r3, [r7, #32]
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	e7fd      	b.n	8009540 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009544:	f001 fc12 	bl	800ad6c <xTaskGetSchedulerState>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <xQueueGenericSend+0xa4>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <xQueueGenericSend+0xa8>
 8009554:	2301      	movs	r3, #1
 8009556:	e000      	b.n	800955a <xQueueGenericSend+0xaa>
 8009558:	2300      	movs	r3, #0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10b      	bne.n	8009576 <xQueueGenericSend+0xc6>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	61fb      	str	r3, [r7, #28]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009576:	f002 f9f9 	bl	800b96c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009582:	429a      	cmp	r2, r3
 8009584:	d302      	bcc.n	800958c <xQueueGenericSend+0xdc>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b02      	cmp	r3, #2
 800958a:	d129      	bne.n	80095e0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	68b9      	ldr	r1, [r7, #8]
 8009590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009592:	f000 fbf1 	bl	8009d78 <prvCopyDataToQueue>
 8009596:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	d010      	beq.n	80095c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	3324      	adds	r3, #36	@ 0x24
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 fa07 	bl	800a9b8 <xTaskRemoveFromEventList>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d013      	beq.n	80095d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095b0:	4b3f      	ldr	r3, [pc, #252]	@ (80096b0 <xQueueGenericSend+0x200>)
 80095b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	e00a      	b.n	80095d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095c8:	4b39      	ldr	r3, [pc, #228]	@ (80096b0 <xQueueGenericSend+0x200>)
 80095ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095d8:	f002 f9f8 	bl	800b9cc <vPortExitCritical>
				return pdPASS;
 80095dc:	2301      	movs	r3, #1
 80095de:	e063      	b.n	80096a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d103      	bne.n	80095ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095e6:	f002 f9f1 	bl	800b9cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	e05c      	b.n	80096a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095f4:	f107 0314 	add.w	r3, r7, #20
 80095f8:	4618      	mov	r0, r3
 80095fa:	f001 fa41 	bl	800aa80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095fe:	2301      	movs	r3, #1
 8009600:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009602:	f002 f9e3 	bl	800b9cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009606:	f000 ff7f 	bl	800a508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800960a:	f002 f9af 	bl	800b96c <vPortEnterCritical>
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009614:	b25b      	sxtb	r3, r3
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800961a:	d103      	bne.n	8009624 <xQueueGenericSend+0x174>
 800961c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009626:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800962a:	b25b      	sxtb	r3, r3
 800962c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009630:	d103      	bne.n	800963a <xQueueGenericSend+0x18a>
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800963a:	f002 f9c7 	bl	800b9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800963e:	1d3a      	adds	r2, r7, #4
 8009640:	f107 0314 	add.w	r3, r7, #20
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f001 fa30 	bl	800aaac <xTaskCheckForTimeOut>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d124      	bne.n	800969c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009652:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009654:	f000 fc88 	bl	8009f68 <prvIsQueueFull>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d018      	beq.n	8009690 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800965e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009660:	3310      	adds	r3, #16
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	4611      	mov	r1, r2
 8009666:	4618      	mov	r0, r3
 8009668:	f001 f954 	bl	800a914 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800966c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800966e:	f000 fc13 	bl	8009e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009672:	f000 ff57 	bl	800a524 <xTaskResumeAll>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	f47f af7c 	bne.w	8009576 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800967e:	4b0c      	ldr	r3, [pc, #48]	@ (80096b0 <xQueueGenericSend+0x200>)
 8009680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	e772      	b.n	8009576 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009692:	f000 fc01 	bl	8009e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009696:	f000 ff45 	bl	800a524 <xTaskResumeAll>
 800969a:	e76c      	b.n	8009576 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800969c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800969e:	f000 fbfb 	bl	8009e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096a2:	f000 ff3f 	bl	800a524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096a6:	2300      	movs	r3, #0
		}
	}
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3738      	adds	r7, #56	@ 0x38
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08e      	sub	sp, #56	@ 0x38
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80096c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10b      	bne.n	80096e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096de:	bf00      	nop
 80096e0:	bf00      	nop
 80096e2:	e7fd      	b.n	80096e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d103      	bne.n	80096f2 <xQueueGenericSendFromISR+0x3e>
 80096ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <xQueueGenericSendFromISR+0x42>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <xQueueGenericSendFromISR+0x44>
 80096f6:	2300      	movs	r3, #0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10b      	bne.n	8009714 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	623b      	str	r3, [r7, #32]
}
 800970e:	bf00      	nop
 8009710:	bf00      	nop
 8009712:	e7fd      	b.n	8009710 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b02      	cmp	r3, #2
 8009718:	d103      	bne.n	8009722 <xQueueGenericSendFromISR+0x6e>
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800971e:	2b01      	cmp	r3, #1
 8009720:	d101      	bne.n	8009726 <xQueueGenericSendFromISR+0x72>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <xQueueGenericSendFromISR+0x74>
 8009726:	2300      	movs	r3, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10b      	bne.n	8009744 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	61fb      	str	r3, [r7, #28]
}
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	e7fd      	b.n	8009740 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009744:	f002 f9d4 	bl	800baf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009748:	f3ef 8211 	mrs	r2, BASEPRI
 800974c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	61ba      	str	r2, [r7, #24]
 800975e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009760:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009762:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976c:	429a      	cmp	r2, r3
 800976e:	d302      	bcc.n	8009776 <xQueueGenericSendFromISR+0xc2>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b02      	cmp	r3, #2
 8009774:	d12c      	bne.n	80097d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800977c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	68b9      	ldr	r1, [r7, #8]
 8009784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009786:	f000 faf7 	bl	8009d78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800978a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009792:	d112      	bne.n	80097ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d016      	beq.n	80097ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	3324      	adds	r3, #36	@ 0x24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 f909 	bl	800a9b8 <xTaskRemoveFromEventList>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00e      	beq.n	80097ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00b      	beq.n	80097ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	e007      	b.n	80097ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80097be:	3301      	adds	r3, #1
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	b25a      	sxtb	r2, r3
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80097ca:	2301      	movs	r3, #1
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80097ce:	e001      	b.n	80097d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3738      	adds	r7, #56	@ 0x38
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08c      	sub	sp, #48	@ 0x30
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097f8:	2300      	movs	r3, #0
 80097fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10b      	bne.n	800981e <xQueueReceive+0x32>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	623b      	str	r3, [r7, #32]
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	e7fd      	b.n	800981a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <xQueueReceive+0x40>
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <xQueueReceive+0x44>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <xQueueReceive+0x46>
 8009830:	2300      	movs	r3, #0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <xQueueReceive+0x62>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	61fb      	str	r3, [r7, #28]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800984e:	f001 fa8d 	bl	800ad6c <xTaskGetSchedulerState>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d102      	bne.n	800985e <xQueueReceive+0x72>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <xQueueReceive+0x76>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <xQueueReceive+0x78>
 8009862:	2300      	movs	r3, #0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10b      	bne.n	8009880 <xQueueReceive+0x94>
	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	61bb      	str	r3, [r7, #24]
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	e7fd      	b.n	800987c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009880:	f002 f874 	bl	800b96c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800988a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988c:	2b00      	cmp	r3, #0
 800988e:	d01f      	beq.n	80098d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009894:	f000 fada 	bl	8009e4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00f      	beq.n	80098c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	3310      	adds	r3, #16
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 f883 	bl	800a9b8 <xTaskRemoveFromEventList>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d007      	beq.n	80098c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098b8:	4b3c      	ldr	r3, [pc, #240]	@ (80099ac <xQueueReceive+0x1c0>)
 80098ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098c8:	f002 f880 	bl	800b9cc <vPortExitCritical>
				return pdPASS;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e069      	b.n	80099a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098d6:	f002 f879 	bl	800b9cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098da:	2300      	movs	r3, #0
 80098dc:	e062      	b.n	80099a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d106      	bne.n	80098f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098e4:	f107 0310 	add.w	r3, r7, #16
 80098e8:	4618      	mov	r0, r3
 80098ea:	f001 f8c9 	bl	800aa80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098f2:	f002 f86b 	bl	800b9cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098f6:	f000 fe07 	bl	800a508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098fa:	f002 f837 	bl	800b96c <vPortEnterCritical>
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009904:	b25b      	sxtb	r3, r3
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800990a:	d103      	bne.n	8009914 <xQueueReceive+0x128>
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800991a:	b25b      	sxtb	r3, r3
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009920:	d103      	bne.n	800992a <xQueueReceive+0x13e>
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800992a:	f002 f84f 	bl	800b9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800992e:	1d3a      	adds	r2, r7, #4
 8009930:	f107 0310 	add.w	r3, r7, #16
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f001 f8b8 	bl	800aaac <xTaskCheckForTimeOut>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d123      	bne.n	800998a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009944:	f000 fafa 	bl	8009f3c <prvIsQueueEmpty>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d017      	beq.n	800997e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	3324      	adds	r3, #36	@ 0x24
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f000 ffdc 	bl	800a914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800995c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800995e:	f000 fa9b 	bl	8009e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009962:	f000 fddf 	bl	800a524 <xTaskResumeAll>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d189      	bne.n	8009880 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800996c:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <xQueueReceive+0x1c0>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	e780      	b.n	8009880 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800997e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009980:	f000 fa8a 	bl	8009e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009984:	f000 fdce 	bl	800a524 <xTaskResumeAll>
 8009988:	e77a      	b.n	8009880 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800998a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800998c:	f000 fa84 	bl	8009e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009990:	f000 fdc8 	bl	800a524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009996:	f000 fad1 	bl	8009f3c <prvIsQueueEmpty>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	f43f af6f 	beq.w	8009880 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3730      	adds	r7, #48	@ 0x30
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08e      	sub	sp, #56	@ 0x38
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80099c2:	2300      	movs	r3, #0
 80099c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10b      	bne.n	80099e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	623b      	str	r3, [r7, #32]
}
 80099de:	bf00      	nop
 80099e0:	bf00      	nop
 80099e2:	e7fd      	b.n	80099e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	61fb      	str	r3, [r7, #28]
}
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
 8009a02:	e7fd      	b.n	8009a00 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a04:	f001 f9b2 	bl	800ad6c <xTaskGetSchedulerState>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <xQueueSemaphoreTake+0x64>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <xQueueSemaphoreTake+0x68>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e000      	b.n	8009a1a <xQueueSemaphoreTake+0x6a>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10b      	bne.n	8009a36 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	61bb      	str	r3, [r7, #24]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a36:	f001 ff99 	bl	800b96c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d024      	beq.n	8009a90 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a48:	1e5a      	subs	r2, r3, #1
 8009a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d104      	bne.n	8009a60 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009a56:	f001 fb0d 	bl	800b074 <pvTaskIncrementMutexHeldCount>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00f      	beq.n	8009a88 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6a:	3310      	adds	r3, #16
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 ffa3 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d007      	beq.n	8009a88 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a78:	4b54      	ldr	r3, [pc, #336]	@ (8009bcc <xQueueSemaphoreTake+0x21c>)
 8009a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a88:	f001 ffa0 	bl	800b9cc <vPortExitCritical>
				return pdPASS;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e098      	b.n	8009bc2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d112      	bne.n	8009abc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00b      	beq.n	8009ab4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	617b      	str	r3, [r7, #20]
}
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
 8009ab2:	e7fd      	b.n	8009ab0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009ab4:	f001 ff8a 	bl	800b9cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e082      	b.n	8009bc2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ac2:	f107 030c 	add.w	r3, r7, #12
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 ffda 	bl	800aa80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009acc:	2301      	movs	r3, #1
 8009ace:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ad0:	f001 ff7c 	bl	800b9cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ad4:	f000 fd18 	bl	800a508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ad8:	f001 ff48 	bl	800b96c <vPortEnterCritical>
 8009adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ade:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ae2:	b25b      	sxtb	r3, r3
 8009ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ae8:	d103      	bne.n	8009af2 <xQueueSemaphoreTake+0x142>
 8009aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009af8:	b25b      	sxtb	r3, r3
 8009afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009afe:	d103      	bne.n	8009b08 <xQueueSemaphoreTake+0x158>
 8009b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b08:	f001 ff60 	bl	800b9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b0c:	463a      	mov	r2, r7
 8009b0e:	f107 030c 	add.w	r3, r7, #12
 8009b12:	4611      	mov	r1, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 ffc9 	bl	800aaac <xTaskCheckForTimeOut>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d132      	bne.n	8009b86 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b22:	f000 fa0b 	bl	8009f3c <prvIsQueueEmpty>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d026      	beq.n	8009b7a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d109      	bne.n	8009b48 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009b34:	f001 ff1a 	bl	800b96c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 f933 	bl	800ada8 <xTaskPriorityInherit>
 8009b42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009b44:	f001 ff42 	bl	800b9cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4a:	3324      	adds	r3, #36	@ 0x24
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 fedf 	bl	800a914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b58:	f000 f99e 	bl	8009e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b5c:	f000 fce2 	bl	800a524 <xTaskResumeAll>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f47f af67 	bne.w	8009a36 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009b68:	4b18      	ldr	r3, [pc, #96]	@ (8009bcc <xQueueSemaphoreTake+0x21c>)
 8009b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	e75d      	b.n	8009a36 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b7c:	f000 f98c 	bl	8009e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b80:	f000 fcd0 	bl	800a524 <xTaskResumeAll>
 8009b84:	e757      	b.n	8009a36 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b88:	f000 f986 	bl	8009e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b8c:	f000 fcca 	bl	800a524 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b92:	f000 f9d3 	bl	8009f3c <prvIsQueueEmpty>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f43f af4c 	beq.w	8009a36 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00d      	beq.n	8009bc0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009ba4:	f001 fee2 	bl	800b96c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009baa:	f000 f8ce 	bl	8009d4a <prvGetDisinheritPriorityAfterTimeout>
 8009bae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f001 f9d4 	bl	800af64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009bbc:	f001 ff06 	bl	800b9cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3738      	adds	r7, #56	@ 0x38
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	e000ed04 	.word	0xe000ed04

08009bd0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08e      	sub	sp, #56	@ 0x38
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	623b      	str	r3, [r7, #32]
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <xQueueReceiveFromISR+0x3c>
 8009c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <xQueueReceiveFromISR+0x40>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e000      	b.n	8009c12 <xQueueReceiveFromISR+0x42>
 8009c10:	2300      	movs	r3, #0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	61fb      	str	r3, [r7, #28]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c2e:	f001 ff5f 	bl	800baf0 <vPortValidateInterruptPriority>
	__asm volatile
 8009c32:	f3ef 8211 	mrs	r2, BASEPRI
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	61ba      	str	r2, [r7, #24]
 8009c48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d02f      	beq.n	8009cba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c68:	f000 f8f0 	bl	8009e4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	1e5a      	subs	r2, r3, #1
 8009c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c7c:	d112      	bne.n	8009ca4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d016      	beq.n	8009cb4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c88:	3310      	adds	r3, #16
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fe94 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00e      	beq.n	8009cb4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	e007      	b.n	8009cb4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ca8:	3301      	adds	r3, #1
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	b25a      	sxtb	r2, r3
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb8:	e001      	b.n	8009cbe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f383 8811 	msr	BASEPRI, r3
}
 8009cc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3738      	adds	r7, #56	@ 0x38
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10b      	bne.n	8009cfa <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	60bb      	str	r3, [r7, #8]
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	e7fd      	b.n	8009cf6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009cfa:	f001 fe37 	bl	800b96c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d02:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009d04:	f001 fe62 	bl	800b9cc <vPortExitCritical>

	return uxReturn;
 8009d08:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10b      	bne.n	8009d38 <uxQueueMessagesWaitingFromISR+0x26>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	60bb      	str	r3, [r7, #8]
}
 8009d32:	bf00      	nop
 8009d34:	bf00      	nop
 8009d36:	e7fd      	b.n	8009d34 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr

08009d4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d006      	beq.n	8009d68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	e001      	b.n	8009d6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
	}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr

08009d78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10d      	bne.n	8009db2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d14d      	bne.n	8009e3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 f86e 	bl	800ae84 <xTaskPriorityDisinherit>
 8009da8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	605a      	str	r2, [r3, #4]
 8009db0:	e043      	b.n	8009e3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d119      	bne.n	8009dec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6898      	ldr	r0, [r3, #8]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	68b9      	ldr	r1, [r7, #8]
 8009dc4:	f002 f95c 	bl	800c080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd0:	441a      	add	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	689a      	ldr	r2, [r3, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d32b      	bcc.n	8009e3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	609a      	str	r2, [r3, #8]
 8009dea:	e026      	b.n	8009e3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	68d8      	ldr	r0, [r3, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df4:	461a      	mov	r2, r3
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	f002 f942 	bl	800c080 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e04:	425b      	negs	r3, r3
 8009e06:	441a      	add	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d207      	bcs.n	8009e28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e20:	425b      	negs	r3, r3
 8009e22:	441a      	add	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d105      	bne.n	8009e3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009e42:	697b      	ldr	r3, [r7, #20]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d018      	beq.n	8009e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	441a      	add	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d303      	bcc.n	8009e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68d9      	ldr	r1, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e88:	461a      	mov	r2, r3
 8009e8a:	6838      	ldr	r0, [r7, #0]
 8009e8c:	f002 f8f8 	bl	800c080 <memcpy>
	}
}
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ea0:	f001 fd64 	bl	800b96c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009eac:	e011      	b.n	8009ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d012      	beq.n	8009edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3324      	adds	r3, #36	@ 0x24
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fd7c 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ec6:	f000 fe55 	bl	800ab74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	dce9      	bgt.n	8009eae <prvUnlockQueue+0x16>
 8009eda:	e000      	b.n	8009ede <prvUnlockQueue+0x46>
					break;
 8009edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	22ff      	movs	r2, #255	@ 0xff
 8009ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009ee6:	f001 fd71 	bl	800b9cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009eea:	f001 fd3f 	bl	800b96c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ef6:	e011      	b.n	8009f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d012      	beq.n	8009f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3310      	adds	r3, #16
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 fd57 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f10:	f000 fe30 	bl	800ab74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	dce9      	bgt.n	8009ef8 <prvUnlockQueue+0x60>
 8009f24:	e000      	b.n	8009f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	22ff      	movs	r2, #255	@ 0xff
 8009f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009f30:	f001 fd4c 	bl	800b9cc <vPortExitCritical>
}
 8009f34:	bf00      	nop
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f44:	f001 fd12 	bl	800b96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f50:	2301      	movs	r3, #1
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	e001      	b.n	8009f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f5a:	f001 fd37 	bl	800b9cc <vPortExitCritical>

	return xReturn;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f70:	f001 fcfc 	bl	800b96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d102      	bne.n	8009f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e001      	b.n	8009f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f8a:	f001 fd1f 	bl	800b9cc <vPortExitCritical>

	return xReturn;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	e014      	b.n	8009fd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe4 <vQueueAddToRegistry+0x4c>)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10b      	bne.n	8009fcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009fb4:	490b      	ldr	r1, [pc, #44]	@ (8009fe4 <vQueueAddToRegistry+0x4c>)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009fbe:	4a09      	ldr	r2, [pc, #36]	@ (8009fe4 <vQueueAddToRegistry+0x4c>)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009fca:	e006      	b.n	8009fda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b07      	cmp	r3, #7
 8009fd6:	d9e7      	bls.n	8009fa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bc80      	pop	{r7}
 8009fe2:	4770      	bx	lr
 8009fe4:	20002638 	.word	0x20002638

08009fe8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ff8:	f001 fcb8 	bl	800b96c <vPortEnterCritical>
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a002:	b25b      	sxtb	r3, r3
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a008:	d103      	bne.n	800a012 <vQueueWaitForMessageRestricted+0x2a>
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a018:	b25b      	sxtb	r3, r3
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a01e:	d103      	bne.n	800a028 <vQueueWaitForMessageRestricted+0x40>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a028:	f001 fcd0 	bl	800b9cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a030:	2b00      	cmp	r3, #0
 800a032:	d106      	bne.n	800a042 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	3324      	adds	r3, #36	@ 0x24
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	68b9      	ldr	r1, [r7, #8]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fc8f 	bl	800a960 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a042:	6978      	ldr	r0, [r7, #20]
 800a044:	f7ff ff28 	bl	8009e98 <prvUnlockQueue>
	}
 800a048:	bf00      	nop
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08e      	sub	sp, #56	@ 0x38
 800a054:	af04      	add	r7, sp, #16
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10b      	bne.n	800a07c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	623b      	str	r3, [r7, #32]
}
 800a076:	bf00      	nop
 800a078:	bf00      	nop
 800a07a:	e7fd      	b.n	800a078 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10b      	bne.n	800a09a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	61fb      	str	r3, [r7, #28]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a09a:	23ac      	movs	r3, #172	@ 0xac
 800a09c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2bac      	cmp	r3, #172	@ 0xac
 800a0a2:	d00b      	beq.n	800a0bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	61bb      	str	r3, [r7, #24]
}
 800a0b6:	bf00      	nop
 800a0b8:	bf00      	nop
 800a0ba:	e7fd      	b.n	800a0b8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01e      	beq.n	800a100 <xTaskCreateStatic+0xb0>
 800a0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d01b      	beq.n	800a100 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	f107 0314 	add.w	r3, r7, #20
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	68b9      	ldr	r1, [r7, #8]
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 f850 	bl	800a198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0fa:	f000 f8ef 	bl	800a2dc <prvAddNewTaskToReadyList>
 800a0fe:	e001      	b.n	800a104 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a104:	697b      	ldr	r3, [r7, #20]
	}
 800a106:	4618      	mov	r0, r3
 800a108:	3728      	adds	r7, #40	@ 0x28
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b08c      	sub	sp, #48	@ 0x30
 800a112:	af04      	add	r7, sp, #16
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	603b      	str	r3, [r7, #0]
 800a11a:	4613      	mov	r3, r2
 800a11c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a11e:	88fb      	ldrh	r3, [r7, #6]
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4618      	mov	r0, r3
 800a124:	f001 fd24 	bl	800bb70 <pvPortMalloc>
 800a128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00e      	beq.n	800a14e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a130:	20ac      	movs	r0, #172	@ 0xac
 800a132:	f001 fd1d 	bl	800bb70 <pvPortMalloc>
 800a136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	631a      	str	r2, [r3, #48]	@ 0x30
 800a144:	e005      	b.n	800a152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a146:	6978      	ldr	r0, [r7, #20]
 800a148:	f001 fdda 	bl	800bd00 <vPortFree>
 800a14c:	e001      	b.n	800a152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d017      	beq.n	800a188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a160:	88fa      	ldrh	r2, [r7, #6]
 800a162:	2300      	movs	r3, #0
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	9302      	str	r3, [sp, #8]
 800a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f000 f80e 	bl	800a198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a17c:	69f8      	ldr	r0, [r7, #28]
 800a17e:	f000 f8ad 	bl	800a2dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a182:	2301      	movs	r3, #1
 800a184:	61bb      	str	r3, [r7, #24]
 800a186:	e002      	b.n	800a18e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a18c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a18e:	69bb      	ldr	r3, [r7, #24]
	}
 800a190:	4618      	mov	r0, r3
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	21a5      	movs	r1, #165	@ 0xa5
 800a1b2:	f001 fedb 	bl	800bf6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	f023 0307 	bic.w	r3, r3, #7
 800a1ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	617b      	str	r3, [r7, #20]
}
 800a1ec:	bf00      	nop
 800a1ee:	bf00      	nop
 800a1f0:	e7fd      	b.n	800a1ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	61fb      	str	r3, [r7, #28]
 800a1f6:	e012      	b.n	800a21e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	7819      	ldrb	r1, [r3, #0]
 800a200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	4413      	add	r3, r2
 800a206:	3334      	adds	r3, #52	@ 0x34
 800a208:	460a      	mov	r2, r1
 800a20a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4413      	add	r3, r2
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d006      	beq.n	800a226 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	3301      	adds	r3, #1
 800a21c:	61fb      	str	r3, [r7, #28]
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	2b0f      	cmp	r3, #15
 800a222:	d9e9      	bls.n	800a1f8 <prvInitialiseNewTask+0x60>
 800a224:	e000      	b.n	800a228 <prvInitialiseNewTask+0x90>
		{
			break;
 800a226:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a232:	2b37      	cmp	r3, #55	@ 0x37
 800a234:	d901      	bls.n	800a23a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a236:	2337      	movs	r3, #55	@ 0x37
 800a238:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a23e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a244:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a248:	2200      	movs	r2, #0
 800a24a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24e:	3304      	adds	r3, #4
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe fe9a 	bl	8008f8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a258:	3318      	adds	r3, #24
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fe95 	bl	8008f8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a264:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a268:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a274:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	2200      	movs	r2, #0
 800a27a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	2200      	movs	r2, #0
 800a288:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	3358      	adds	r3, #88	@ 0x58
 800a290:	224c      	movs	r2, #76	@ 0x4c
 800a292:	2100      	movs	r1, #0
 800a294:	4618      	mov	r0, r3
 800a296:	f001 fe69 	bl	800bf6c <memset>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	4a0c      	ldr	r2, [pc, #48]	@ (800a2d0 <prvInitialiseNewTask+0x138>)
 800a29e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a2d4 <prvInitialiseNewTask+0x13c>)
 800a2a4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	4a0b      	ldr	r2, [pc, #44]	@ (800a2d8 <prvInitialiseNewTask+0x140>)
 800a2aa:	665a      	str	r2, [r3, #100]	@ 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	69b8      	ldr	r0, [r7, #24]
 800a2b2:	f001 fa67 	bl	800b784 <pxPortInitialiseStack>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2c8:	bf00      	nop
 800a2ca:	3720      	adds	r7, #32
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20003840 	.word	0x20003840
 800a2d4:	200038a8 	.word	0x200038a8
 800a2d8:	20003910 	.word	0x20003910

0800a2dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a2e4:	f001 fb42 	bl	800b96c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a2e8:	4b2d      	ldr	r3, [pc, #180]	@ (800a3a0 <prvAddNewTaskToReadyList+0xc4>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	4a2c      	ldr	r2, [pc, #176]	@ (800a3a0 <prvAddNewTaskToReadyList+0xc4>)
 800a2f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a2f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a3a4 <prvAddNewTaskToReadyList+0xc8>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d109      	bne.n	800a30e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a2fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a3a4 <prvAddNewTaskToReadyList+0xc8>)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a300:	4b27      	ldr	r3, [pc, #156]	@ (800a3a0 <prvAddNewTaskToReadyList+0xc4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d110      	bne.n	800a32a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a308:	f000 fc5a 	bl	800abc0 <prvInitialiseTaskLists>
 800a30c:	e00d      	b.n	800a32a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a30e:	4b26      	ldr	r3, [pc, #152]	@ (800a3a8 <prvAddNewTaskToReadyList+0xcc>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d109      	bne.n	800a32a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a316:	4b23      	ldr	r3, [pc, #140]	@ (800a3a4 <prvAddNewTaskToReadyList+0xc8>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a320:	429a      	cmp	r2, r3
 800a322:	d802      	bhi.n	800a32a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a324:	4a1f      	ldr	r2, [pc, #124]	@ (800a3a4 <prvAddNewTaskToReadyList+0xc8>)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a32a:	4b20      	ldr	r3, [pc, #128]	@ (800a3ac <prvAddNewTaskToReadyList+0xd0>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3301      	adds	r3, #1
 800a330:	4a1e      	ldr	r2, [pc, #120]	@ (800a3ac <prvAddNewTaskToReadyList+0xd0>)
 800a332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a334:	4b1d      	ldr	r3, [pc, #116]	@ (800a3ac <prvAddNewTaskToReadyList+0xd0>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a340:	4b1b      	ldr	r3, [pc, #108]	@ (800a3b0 <prvAddNewTaskToReadyList+0xd4>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	429a      	cmp	r2, r3
 800a346:	d903      	bls.n	800a350 <prvAddNewTaskToReadyList+0x74>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a34c:	4a18      	ldr	r2, [pc, #96]	@ (800a3b0 <prvAddNewTaskToReadyList+0xd4>)
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4a15      	ldr	r2, [pc, #84]	@ (800a3b4 <prvAddNewTaskToReadyList+0xd8>)
 800a35e:	441a      	add	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3304      	adds	r3, #4
 800a364:	4619      	mov	r1, r3
 800a366:	4610      	mov	r0, r2
 800a368:	f7fe fe1b 	bl	8008fa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a36c:	f001 fb2e 	bl	800b9cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a370:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <prvAddNewTaskToReadyList+0xcc>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00e      	beq.n	800a396 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a378:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a4 <prvAddNewTaskToReadyList+0xc8>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a382:	429a      	cmp	r2, r3
 800a384:	d207      	bcs.n	800a396 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a386:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b8 <prvAddNewTaskToReadyList+0xdc>)
 800a388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a396:	bf00      	nop
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20002b4c 	.word	0x20002b4c
 800a3a4:	20002678 	.word	0x20002678
 800a3a8:	20002b58 	.word	0x20002b58
 800a3ac:	20002b68 	.word	0x20002b68
 800a3b0:	20002b54 	.word	0x20002b54
 800a3b4:	2000267c 	.word	0x2000267c
 800a3b8:	e000ed04 	.word	0xe000ed04

0800a3bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d018      	beq.n	800a400 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a3ce:	4b14      	ldr	r3, [pc, #80]	@ (800a420 <vTaskDelay+0x64>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00b      	beq.n	800a3ee <vTaskDelay+0x32>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	60bb      	str	r3, [r7, #8]
}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	e7fd      	b.n	800a3ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a3ee:	f000 f88b 	bl	800a508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fe51 	bl	800b09c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a3fa:	f000 f893 	bl	800a524 <xTaskResumeAll>
 800a3fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d107      	bne.n	800a416 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a406:	4b07      	ldr	r3, [pc, #28]	@ (800a424 <vTaskDelay+0x68>)
 800a408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a416:	bf00      	nop
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20002b74 	.word	0x20002b74
 800a424:	e000ed04 	.word	0xe000ed04

0800a428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b08a      	sub	sp, #40	@ 0x28
 800a42c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a42e:	2300      	movs	r3, #0
 800a430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a436:	463a      	mov	r2, r7
 800a438:	1d39      	adds	r1, r7, #4
 800a43a:	f107 0308 	add.w	r3, r7, #8
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fd52 	bl	8008ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	9202      	str	r2, [sp, #8]
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	2300      	movs	r3, #0
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	2300      	movs	r3, #0
 800a454:	460a      	mov	r2, r1
 800a456:	4924      	ldr	r1, [pc, #144]	@ (800a4e8 <vTaskStartScheduler+0xc0>)
 800a458:	4824      	ldr	r0, [pc, #144]	@ (800a4ec <vTaskStartScheduler+0xc4>)
 800a45a:	f7ff fdf9 	bl	800a050 <xTaskCreateStatic>
 800a45e:	4603      	mov	r3, r0
 800a460:	4a23      	ldr	r2, [pc, #140]	@ (800a4f0 <vTaskStartScheduler+0xc8>)
 800a462:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a464:	4b22      	ldr	r3, [pc, #136]	@ (800a4f0 <vTaskStartScheduler+0xc8>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a46c:	2301      	movs	r3, #1
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	e001      	b.n	800a476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d102      	bne.n	800a482 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a47c:	f000 fe62 	bl	800b144 <xTimerCreateTimerTask>
 800a480:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d11b      	bne.n	800a4c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	613b      	str	r3, [r7, #16]
}
 800a49a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a49c:	4b15      	ldr	r3, [pc, #84]	@ (800a4f4 <vTaskStartScheduler+0xcc>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3358      	adds	r3, #88	@ 0x58
 800a4a2:	4a15      	ldr	r2, [pc, #84]	@ (800a4f8 <vTaskStartScheduler+0xd0>)
 800a4a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4a6:	4b15      	ldr	r3, [pc, #84]	@ (800a4fc <vTaskStartScheduler+0xd4>)
 800a4a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4ae:	4b14      	ldr	r3, [pc, #80]	@ (800a500 <vTaskStartScheduler+0xd8>)
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a4b4:	4b13      	ldr	r3, [pc, #76]	@ (800a504 <vTaskStartScheduler+0xdc>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4ba:	f001 f9e5 	bl	800b888 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4be:	e00f      	b.n	800a4e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4c6:	d10b      	bne.n	800a4e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	60fb      	str	r3, [r7, #12]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <vTaskStartScheduler+0xb4>
}
 800a4e0:	bf00      	nop
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0800d71c 	.word	0x0800d71c
 800a4ec:	0800ab8d 	.word	0x0800ab8d
 800a4f0:	20002b70 	.word	0x20002b70
 800a4f4:	20002678 	.word	0x20002678
 800a4f8:	200008c4 	.word	0x200008c4
 800a4fc:	20002b6c 	.word	0x20002b6c
 800a500:	20002b58 	.word	0x20002b58
 800a504:	20002b50 	.word	0x20002b50

0800a508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a508:	b480      	push	{r7}
 800a50a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a50c:	4b04      	ldr	r3, [pc, #16]	@ (800a520 <vTaskSuspendAll+0x18>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3301      	adds	r3, #1
 800a512:	4a03      	ldr	r2, [pc, #12]	@ (800a520 <vTaskSuspendAll+0x18>)
 800a514:	6013      	str	r3, [r2, #0]
}
 800a516:	bf00      	nop
 800a518:	46bd      	mov	sp, r7
 800a51a:	bc80      	pop	{r7}
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	20002b74 	.word	0x20002b74

0800a524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a52e:	2300      	movs	r3, #0
 800a530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a532:	4b42      	ldr	r3, [pc, #264]	@ (800a63c <xTaskResumeAll+0x118>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10b      	bne.n	800a552 <xTaskResumeAll+0x2e>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	603b      	str	r3, [r7, #0]
}
 800a54c:	bf00      	nop
 800a54e:	bf00      	nop
 800a550:	e7fd      	b.n	800a54e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a552:	f001 fa0b 	bl	800b96c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a556:	4b39      	ldr	r3, [pc, #228]	@ (800a63c <xTaskResumeAll+0x118>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	4a37      	ldr	r2, [pc, #220]	@ (800a63c <xTaskResumeAll+0x118>)
 800a55e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a560:	4b36      	ldr	r3, [pc, #216]	@ (800a63c <xTaskResumeAll+0x118>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d162      	bne.n	800a62e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a568:	4b35      	ldr	r3, [pc, #212]	@ (800a640 <xTaskResumeAll+0x11c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d05e      	beq.n	800a62e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a570:	e02f      	b.n	800a5d2 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a572:	4b34      	ldr	r3, [pc, #208]	@ (800a644 <xTaskResumeAll+0x120>)
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3318      	adds	r3, #24
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fd6a 	bl	8009058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe fd65 	bl	8009058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a592:	4b2d      	ldr	r3, [pc, #180]	@ (800a648 <xTaskResumeAll+0x124>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d903      	bls.n	800a5a2 <xTaskResumeAll+0x7e>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	4a2a      	ldr	r2, [pc, #168]	@ (800a648 <xTaskResumeAll+0x124>)
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4a27      	ldr	r2, [pc, #156]	@ (800a64c <xTaskResumeAll+0x128>)
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7fe fcf2 	bl	8008fa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c2:	4b23      	ldr	r3, [pc, #140]	@ (800a650 <xTaskResumeAll+0x12c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d302      	bcc.n	800a5d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a5cc:	4b21      	ldr	r3, [pc, #132]	@ (800a654 <xTaskResumeAll+0x130>)
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a644 <xTaskResumeAll+0x120>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1cb      	bne.n	800a572 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a5e0:	f000 fb92 	bl	800ad08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a658 <xTaskResumeAll+0x134>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d010      	beq.n	800a612 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a5f0:	f000 f844 	bl	800a67c <xTaskIncrementTick>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a5fa:	4b16      	ldr	r3, [pc, #88]	@ (800a654 <xTaskResumeAll+0x130>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3b01      	subs	r3, #1
 800a604:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1f1      	bne.n	800a5f0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800a60c:	4b12      	ldr	r3, [pc, #72]	@ (800a658 <xTaskResumeAll+0x134>)
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a612:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <xTaskResumeAll+0x130>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a61a:	2301      	movs	r3, #1
 800a61c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a61e:	4b0f      	ldr	r3, [pc, #60]	@ (800a65c <xTaskResumeAll+0x138>)
 800a620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a62e:	f001 f9cd 	bl	800b9cc <vPortExitCritical>

	return xAlreadyYielded;
 800a632:	68bb      	ldr	r3, [r7, #8]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20002b74 	.word	0x20002b74
 800a640:	20002b4c 	.word	0x20002b4c
 800a644:	20002b0c 	.word	0x20002b0c
 800a648:	20002b54 	.word	0x20002b54
 800a64c:	2000267c 	.word	0x2000267c
 800a650:	20002678 	.word	0x20002678
 800a654:	20002b60 	.word	0x20002b60
 800a658:	20002b5c 	.word	0x20002b5c
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a666:	4b04      	ldr	r3, [pc, #16]	@ (800a678 <xTaskGetTickCount+0x18>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a66c:	687b      	ldr	r3, [r7, #4]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	bc80      	pop	{r7}
 800a676:	4770      	bx	lr
 800a678:	20002b50 	.word	0x20002b50

0800a67c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a682:	2300      	movs	r3, #0
 800a684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a686:	4b52      	ldr	r3, [pc, #328]	@ (800a7d0 <xTaskIncrementTick+0x154>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f040 808f 	bne.w	800a7ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a690:	4b50      	ldr	r3, [pc, #320]	@ (800a7d4 <xTaskIncrementTick+0x158>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a698:	4a4e      	ldr	r2, [pc, #312]	@ (800a7d4 <xTaskIncrementTick+0x158>)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d121      	bne.n	800a6e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6a4:	4b4c      	ldr	r3, [pc, #304]	@ (800a7d8 <xTaskIncrementTick+0x15c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00b      	beq.n	800a6c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	603b      	str	r3, [r7, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	e7fd      	b.n	800a6c2 <xTaskIncrementTick+0x46>
 800a6c6:	4b44      	ldr	r3, [pc, #272]	@ (800a7d8 <xTaskIncrementTick+0x15c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	4b43      	ldr	r3, [pc, #268]	@ (800a7dc <xTaskIncrementTick+0x160>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a41      	ldr	r2, [pc, #260]	@ (800a7d8 <xTaskIncrementTick+0x15c>)
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	4a41      	ldr	r2, [pc, #260]	@ (800a7dc <xTaskIncrementTick+0x160>)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	4b41      	ldr	r3, [pc, #260]	@ (800a7e0 <xTaskIncrementTick+0x164>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	4a3f      	ldr	r2, [pc, #252]	@ (800a7e0 <xTaskIncrementTick+0x164>)
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	f000 fb10 	bl	800ad08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a6e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7e4 <xTaskIncrementTick+0x168>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d34e      	bcc.n	800a790 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6f2:	4b39      	ldr	r3, [pc, #228]	@ (800a7d8 <xTaskIncrementTick+0x15c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <xTaskIncrementTick+0x84>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <xTaskIncrementTick+0x86>
 800a700:	2300      	movs	r3, #0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a706:	4b37      	ldr	r3, [pc, #220]	@ (800a7e4 <xTaskIncrementTick+0x168>)
 800a708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a70c:	601a      	str	r2, [r3, #0]
					break;
 800a70e:	e03f      	b.n	800a790 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a710:	4b31      	ldr	r3, [pc, #196]	@ (800a7d8 <xTaskIncrementTick+0x15c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	d203      	bcs.n	800a730 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a728:	4a2e      	ldr	r2, [pc, #184]	@ (800a7e4 <xTaskIncrementTick+0x168>)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6013      	str	r3, [r2, #0]
						break;
 800a72e:	e02f      	b.n	800a790 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	3304      	adds	r3, #4
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fc8f 	bl	8009058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	3318      	adds	r3, #24
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe fc86 	bl	8009058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a750:	4b25      	ldr	r3, [pc, #148]	@ (800a7e8 <xTaskIncrementTick+0x16c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	429a      	cmp	r2, r3
 800a756:	d903      	bls.n	800a760 <xTaskIncrementTick+0xe4>
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75c:	4a22      	ldr	r2, [pc, #136]	@ (800a7e8 <xTaskIncrementTick+0x16c>)
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a764:	4613      	mov	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4a1f      	ldr	r2, [pc, #124]	@ (800a7ec <xTaskIncrementTick+0x170>)
 800a76e:	441a      	add	r2, r3
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	3304      	adds	r3, #4
 800a774:	4619      	mov	r1, r3
 800a776:	4610      	mov	r0, r2
 800a778:	f7fe fc13 	bl	8008fa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a780:	4b1b      	ldr	r3, [pc, #108]	@ (800a7f0 <xTaskIncrementTick+0x174>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a786:	429a      	cmp	r2, r3
 800a788:	d3b3      	bcc.n	800a6f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a78a:	2301      	movs	r3, #1
 800a78c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a78e:	e7b0      	b.n	800a6f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a790:	4b17      	ldr	r3, [pc, #92]	@ (800a7f0 <xTaskIncrementTick+0x174>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a796:	4915      	ldr	r1, [pc, #84]	@ (800a7ec <xTaskIncrementTick+0x170>)
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	440b      	add	r3, r1
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d907      	bls.n	800a7b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	e004      	b.n	800a7b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a7ae:	4b11      	ldr	r3, [pc, #68]	@ (800a7f4 <xTaskIncrementTick+0x178>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	4a0f      	ldr	r2, [pc, #60]	@ (800a7f4 <xTaskIncrementTick+0x178>)
 800a7b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a7f8 <xTaskIncrementTick+0x17c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a7c4:	697b      	ldr	r3, [r7, #20]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3718      	adds	r7, #24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20002b74 	.word	0x20002b74
 800a7d4:	20002b50 	.word	0x20002b50
 800a7d8:	20002b04 	.word	0x20002b04
 800a7dc:	20002b08 	.word	0x20002b08
 800a7e0:	20002b64 	.word	0x20002b64
 800a7e4:	20002b6c 	.word	0x20002b6c
 800a7e8:	20002b54 	.word	0x20002b54
 800a7ec:	2000267c 	.word	0x2000267c
 800a7f0:	20002678 	.word	0x20002678
 800a7f4:	20002b5c 	.word	0x20002b5c
 800a7f8:	20002b60 	.word	0x20002b60

0800a7fc <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800a80c:	4b08      	ldr	r3, [pc, #32]	@ (800a830 <vTaskSetApplicationTaskTag+0x34>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e001      	b.n	800a818 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800a818:	f001 f8a8 	bl	800b96c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	655a      	str	r2, [r3, #84]	@ 0x54
		taskEXIT_CRITICAL();
 800a822:	f001 f8d3 	bl	800b9cc <vPortExitCritical>
	}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20002678 	.word	0x20002678

0800a834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a83a:	4b30      	ldr	r3, [pc, #192]	@ (800a8fc <vTaskSwitchContext+0xc8>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a842:	4b2f      	ldr	r3, [pc, #188]	@ (800a900 <vTaskSwitchContext+0xcc>)
 800a844:	2201      	movs	r2, #1
 800a846:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a848:	e053      	b.n	800a8f2 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 800a84a:	4b2d      	ldr	r3, [pc, #180]	@ (800a900 <vTaskSwitchContext+0xcc>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800a850:	4b2c      	ldr	r3, [pc, #176]	@ (800a904 <vTaskSwitchContext+0xd0>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a856:	4618      	mov	r0, r3
 800a858:	f7f8 fbae 	bl	8002fb8 <AE_callback_out>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a85c:	4b2a      	ldr	r3, [pc, #168]	@ (800a908 <vTaskSwitchContext+0xd4>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	e011      	b.n	800a888 <vTaskSwitchContext+0x54>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10b      	bne.n	800a882 <vTaskSwitchContext+0x4e>
	__asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	607b      	str	r3, [r7, #4]
}
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
 800a880:	e7fd      	b.n	800a87e <vTaskSwitchContext+0x4a>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3b01      	subs	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	4920      	ldr	r1, [pc, #128]	@ (800a90c <vTaskSwitchContext+0xd8>)
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	4613      	mov	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	440b      	add	r3, r1
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d0e3      	beq.n	800a864 <vTaskSwitchContext+0x30>
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4a19      	ldr	r2, [pc, #100]	@ (800a90c <vTaskSwitchContext+0xd8>)
 800a8a8:	4413      	add	r3, r2
 800a8aa:	60bb      	str	r3, [r7, #8]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	605a      	str	r2, [r3, #4]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	3308      	adds	r3, #8
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d104      	bne.n	800a8cc <vTaskSwitchContext+0x98>
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	685a      	ldr	r2, [r3, #4]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	605a      	str	r2, [r3, #4]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a904 <vTaskSwitchContext+0xd0>)
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a908 <vTaskSwitchContext+0xd4>)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800a8dc:	4b09      	ldr	r3, [pc, #36]	@ (800a904 <vTaskSwitchContext+0xd0>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7f8 fb3e 	bl	8002f64 <AE_callback_in>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8e8:	4b06      	ldr	r3, [pc, #24]	@ (800a904 <vTaskSwitchContext+0xd0>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3358      	adds	r3, #88	@ 0x58
 800a8ee:	4a08      	ldr	r2, [pc, #32]	@ (800a910 <vTaskSwitchContext+0xdc>)
 800a8f0:	6013      	str	r3, [r2, #0]
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20002b74 	.word	0x20002b74
 800a900:	20002b60 	.word	0x20002b60
 800a904:	20002678 	.word	0x20002678
 800a908:	20002b54 	.word	0x20002b54
 800a90c:	2000267c 	.word	0x2000267c
 800a910:	200008c4 	.word	0x200008c4

0800a914 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10b      	bne.n	800a93c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	60fb      	str	r3, [r7, #12]
}
 800a936:	bf00      	nop
 800a938:	bf00      	nop
 800a93a:	e7fd      	b.n	800a938 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a93c:	4b07      	ldr	r3, [pc, #28]	@ (800a95c <vTaskPlaceOnEventList+0x48>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3318      	adds	r3, #24
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7fe fb4f 	bl	8008fe8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a94a:	2101      	movs	r1, #1
 800a94c:	6838      	ldr	r0, [r7, #0]
 800a94e:	f000 fba5 	bl	800b09c <prvAddCurrentTaskToDelayedList>
}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20002678 	.word	0x20002678

0800a960 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10b      	bne.n	800a98a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	617b      	str	r3, [r7, #20]
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	e7fd      	b.n	800a986 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a98a:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3318      	adds	r3, #24
 800a990:	4619      	mov	r1, r3
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7fe fb05 	bl	8008fa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a99e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	68b8      	ldr	r0, [r7, #8]
 800a9a8:	f000 fb78 	bl	800b09c <prvAddCurrentTaskToDelayedList>
	}
 800a9ac:	bf00      	nop
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	20002678 	.word	0x20002678

0800a9b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10b      	bne.n	800a9e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	60fb      	str	r3, [r7, #12]
}
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	e7fd      	b.n	800a9e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	3318      	adds	r3, #24
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe fb34 	bl	8009058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9f0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa68 <xTaskRemoveFromEventList+0xb0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d11d      	bne.n	800aa34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe fb2b 	bl	8009058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa06:	4b19      	ldr	r3, [pc, #100]	@ (800aa6c <xTaskRemoveFromEventList+0xb4>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d903      	bls.n	800aa16 <xTaskRemoveFromEventList+0x5e>
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa12:	4a16      	ldr	r2, [pc, #88]	@ (800aa6c <xTaskRemoveFromEventList+0xb4>)
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4a13      	ldr	r2, [pc, #76]	@ (800aa70 <xTaskRemoveFromEventList+0xb8>)
 800aa24:	441a      	add	r2, r3
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f7fe fab8 	bl	8008fa2 <vListInsertEnd>
 800aa32:	e005      	b.n	800aa40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	3318      	adds	r3, #24
 800aa38:	4619      	mov	r1, r3
 800aa3a:	480e      	ldr	r0, [pc, #56]	@ (800aa74 <xTaskRemoveFromEventList+0xbc>)
 800aa3c:	f7fe fab1 	bl	8008fa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa44:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <xTaskRemoveFromEventList+0xc0>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d905      	bls.n	800aa5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa52:	4b0a      	ldr	r3, [pc, #40]	@ (800aa7c <xTaskRemoveFromEventList+0xc4>)
 800aa54:	2201      	movs	r2, #1
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	e001      	b.n	800aa5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800aa5e:	697b      	ldr	r3, [r7, #20]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20002b74 	.word	0x20002b74
 800aa6c:	20002b54 	.word	0x20002b54
 800aa70:	2000267c 	.word	0x2000267c
 800aa74:	20002b0c 	.word	0x20002b0c
 800aa78:	20002678 	.word	0x20002678
 800aa7c:	20002b60 	.word	0x20002b60

0800aa80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa88:	4b06      	ldr	r3, [pc, #24]	@ (800aaa4 <vTaskInternalSetTimeOutState+0x24>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa90:	4b05      	ldr	r3, [pc, #20]	@ (800aaa8 <vTaskInternalSetTimeOutState+0x28>)
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	605a      	str	r2, [r3, #4]
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bc80      	pop	{r7}
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20002b64 	.word	0x20002b64
 800aaa8:	20002b50 	.word	0x20002b50

0800aaac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10b      	bne.n	800aad4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	613b      	str	r3, [r7, #16]
}
 800aace:	bf00      	nop
 800aad0:	bf00      	nop
 800aad2:	e7fd      	b.n	800aad0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10b      	bne.n	800aaf2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	60fb      	str	r3, [r7, #12]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aaf2:	f000 ff3b 	bl	800b96c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aaf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab6c <xTaskCheckForTimeOut+0xc0>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab0e:	d102      	bne.n	800ab16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	61fb      	str	r3, [r7, #28]
 800ab14:	e023      	b.n	800ab5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	4b15      	ldr	r3, [pc, #84]	@ (800ab70 <xTaskCheckForTimeOut+0xc4>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d007      	beq.n	800ab32 <xTaskCheckForTimeOut+0x86>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d302      	bcc.n	800ab32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	e015      	b.n	800ab5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d20b      	bcs.n	800ab54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	1ad2      	subs	r2, r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff ff99 	bl	800aa80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61fb      	str	r3, [r7, #28]
 800ab52:	e004      	b.n	800ab5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab5e:	f000 ff35 	bl	800b9cc <vPortExitCritical>

	return xReturn;
 800ab62:	69fb      	ldr	r3, [r7, #28]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3720      	adds	r7, #32
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20002b50 	.word	0x20002b50
 800ab70:	20002b64 	.word	0x20002b64

0800ab74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab78:	4b03      	ldr	r3, [pc, #12]	@ (800ab88 <vTaskMissedYield+0x14>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
}
 800ab7e:	bf00      	nop
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	20002b60 	.word	0x20002b60

0800ab8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab94:	f000 f854 	bl	800ac40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab98:	4b07      	ldr	r3, [pc, #28]	@ (800abb8 <prvIdleTask+0x2c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d907      	bls.n	800abb0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800aba0:	4b06      	ldr	r3, [pc, #24]	@ (800abbc <prvIdleTask+0x30>)
 800aba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800abb0:	f7f7 fede 	bl	8002970 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800abb4:	e7ee      	b.n	800ab94 <prvIdleTask+0x8>
 800abb6:	bf00      	nop
 800abb8:	2000267c 	.word	0x2000267c
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abc6:	2300      	movs	r3, #0
 800abc8:	607b      	str	r3, [r7, #4]
 800abca:	e00c      	b.n	800abe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	4613      	mov	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4a12      	ldr	r2, [pc, #72]	@ (800ac20 <prvInitialiseTaskLists+0x60>)
 800abd8:	4413      	add	r3, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe f9b6 	bl	8008f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	3301      	adds	r3, #1
 800abe4:	607b      	str	r3, [r7, #4]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b37      	cmp	r3, #55	@ 0x37
 800abea:	d9ef      	bls.n	800abcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abec:	480d      	ldr	r0, [pc, #52]	@ (800ac24 <prvInitialiseTaskLists+0x64>)
 800abee:	f7fe f9ad 	bl	8008f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abf2:	480d      	ldr	r0, [pc, #52]	@ (800ac28 <prvInitialiseTaskLists+0x68>)
 800abf4:	f7fe f9aa 	bl	8008f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abf8:	480c      	ldr	r0, [pc, #48]	@ (800ac2c <prvInitialiseTaskLists+0x6c>)
 800abfa:	f7fe f9a7 	bl	8008f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abfe:	480c      	ldr	r0, [pc, #48]	@ (800ac30 <prvInitialiseTaskLists+0x70>)
 800ac00:	f7fe f9a4 	bl	8008f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac04:	480b      	ldr	r0, [pc, #44]	@ (800ac34 <prvInitialiseTaskLists+0x74>)
 800ac06:	f7fe f9a1 	bl	8008f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac0a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac38 <prvInitialiseTaskLists+0x78>)
 800ac0c:	4a05      	ldr	r2, [pc, #20]	@ (800ac24 <prvInitialiseTaskLists+0x64>)
 800ac0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac10:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <prvInitialiseTaskLists+0x7c>)
 800ac12:	4a05      	ldr	r2, [pc, #20]	@ (800ac28 <prvInitialiseTaskLists+0x68>)
 800ac14:	601a      	str	r2, [r3, #0]
}
 800ac16:	bf00      	nop
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	2000267c 	.word	0x2000267c
 800ac24:	20002adc 	.word	0x20002adc
 800ac28:	20002af0 	.word	0x20002af0
 800ac2c:	20002b0c 	.word	0x20002b0c
 800ac30:	20002b20 	.word	0x20002b20
 800ac34:	20002b38 	.word	0x20002b38
 800ac38:	20002b04 	.word	0x20002b04
 800ac3c:	20002b08 	.word	0x20002b08

0800ac40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac46:	e019      	b.n	800ac7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac48:	f000 fe90 	bl	800b96c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ac4c:	4b10      	ldr	r3, [pc, #64]	@ (800ac90 <prvCheckTasksWaitingTermination+0x50>)
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe f9fd 	bl	8009058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac94 <prvCheckTasksWaitingTermination+0x54>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	4a0b      	ldr	r2, [pc, #44]	@ (800ac94 <prvCheckTasksWaitingTermination+0x54>)
 800ac66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac68:	4b0b      	ldr	r3, [pc, #44]	@ (800ac98 <prvCheckTasksWaitingTermination+0x58>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	4a0a      	ldr	r2, [pc, #40]	@ (800ac98 <prvCheckTasksWaitingTermination+0x58>)
 800ac70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac72:	f000 feab 	bl	800b9cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f810 	bl	800ac9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac7c:	4b06      	ldr	r3, [pc, #24]	@ (800ac98 <prvCheckTasksWaitingTermination+0x58>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1e1      	bne.n	800ac48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20002b20 	.word	0x20002b20
 800ac94:	20002b4c 	.word	0x20002b4c
 800ac98:	20002b34 	.word	0x20002b34

0800ac9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3358      	adds	r3, #88	@ 0x58
 800aca8:	4618      	mov	r0, r3
 800acaa:	f001 f967 	bl	800bf7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d108      	bne.n	800acca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbc:	4618      	mov	r0, r3
 800acbe:	f001 f81f 	bl	800bd00 <vPortFree>
				vPortFree( pxTCB );
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 f81c 	bl	800bd00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acc8:	e019      	b.n	800acfe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d103      	bne.n	800acdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 f813 	bl	800bd00 <vPortFree>
	}
 800acda:	e010      	b.n	800acfe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d00b      	beq.n	800acfe <prvDeleteTCB+0x62>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60fb      	str	r3, [r7, #12]
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	e7fd      	b.n	800acfa <prvDeleteTCB+0x5e>
	}
 800acfe:	bf00      	nop
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad48 <prvResetNextTaskUnblockTime+0x40>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <prvResetNextTaskUnblockTime+0x14>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e000      	b.n	800ad1e <prvResetNextTaskUnblockTime+0x16>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad22:	4b0a      	ldr	r3, [pc, #40]	@ (800ad4c <prvResetNextTaskUnblockTime+0x44>)
 800ad24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad2a:	e008      	b.n	800ad3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ad2c:	4b06      	ldr	r3, [pc, #24]	@ (800ad48 <prvResetNextTaskUnblockTime+0x40>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	4a04      	ldr	r2, [pc, #16]	@ (800ad4c <prvResetNextTaskUnblockTime+0x44>)
 800ad3c:	6013      	str	r3, [r2, #0]
}
 800ad3e:	bf00      	nop
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bc80      	pop	{r7}
 800ad46:	4770      	bx	lr
 800ad48:	20002b04 	.word	0x20002b04
 800ad4c:	20002b6c 	.word	0x20002b6c

0800ad50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ad56:	4b04      	ldr	r3, [pc, #16]	@ (800ad68 <xTaskGetCurrentTaskHandle+0x18>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ad5c:	687b      	ldr	r3, [r7, #4]
	}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bc80      	pop	{r7}
 800ad66:	4770      	bx	lr
 800ad68:	20002678 	.word	0x20002678

0800ad6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad72:	4b0b      	ldr	r3, [pc, #44]	@ (800ada0 <xTaskGetSchedulerState+0x34>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d102      	bne.n	800ad80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	607b      	str	r3, [r7, #4]
 800ad7e:	e008      	b.n	800ad92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad80:	4b08      	ldr	r3, [pc, #32]	@ (800ada4 <xTaskGetSchedulerState+0x38>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad88:	2302      	movs	r3, #2
 800ad8a:	607b      	str	r3, [r7, #4]
 800ad8c:	e001      	b.n	800ad92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad92:	687b      	ldr	r3, [r7, #4]
	}
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bc80      	pop	{r7}
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	20002b58 	.word	0x20002b58
 800ada4:	20002b74 	.word	0x20002b74

0800ada8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800adb4:	2300      	movs	r3, #0
 800adb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d056      	beq.n	800ae6c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ae78 <xTaskPriorityInherit+0xd0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc8:	429a      	cmp	r2, r3
 800adca:	d246      	bcs.n	800ae5a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	2b00      	cmp	r3, #0
 800add2:	db06      	blt.n	800ade2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add4:	4b28      	ldr	r3, [pc, #160]	@ (800ae78 <xTaskPriorityInherit+0xd0>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6959      	ldr	r1, [r3, #20]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4a22      	ldr	r2, [pc, #136]	@ (800ae7c <xTaskPriorityInherit+0xd4>)
 800adf4:	4413      	add	r3, r2
 800adf6:	4299      	cmp	r1, r3
 800adf8:	d101      	bne.n	800adfe <xTaskPriorityInherit+0x56>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e000      	b.n	800ae00 <xTaskPriorityInherit+0x58>
 800adfe:	2300      	movs	r3, #0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d022      	beq.n	800ae4a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	3304      	adds	r3, #4
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe f925 	bl	8009058 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae78 <xTaskPriorityInherit+0xd0>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae1c:	4b18      	ldr	r3, [pc, #96]	@ (800ae80 <xTaskPriorityInherit+0xd8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d903      	bls.n	800ae2c <xTaskPriorityInherit+0x84>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae28:	4a15      	ldr	r2, [pc, #84]	@ (800ae80 <xTaskPriorityInherit+0xd8>)
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4a10      	ldr	r2, [pc, #64]	@ (800ae7c <xTaskPriorityInherit+0xd4>)
 800ae3a:	441a      	add	r2, r3
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	4619      	mov	r1, r3
 800ae42:	4610      	mov	r0, r2
 800ae44:	f7fe f8ad 	bl	8008fa2 <vListInsertEnd>
 800ae48:	e004      	b.n	800ae54 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae78 <xTaskPriorityInherit+0xd0>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	e008      	b.n	800ae6c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae5e:	4b06      	ldr	r3, [pc, #24]	@ (800ae78 <xTaskPriorityInherit+0xd0>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d201      	bcs.n	800ae6c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
	}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20002678 	.word	0x20002678
 800ae7c:	2000267c 	.word	0x2000267c
 800ae80:	20002b54 	.word	0x20002b54

0800ae84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d058      	beq.n	800af4c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae9a:	4b2f      	ldr	r3, [pc, #188]	@ (800af58 <xTaskPriorityDisinherit+0xd4>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d00b      	beq.n	800aebc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60fb      	str	r3, [r7, #12]
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	e7fd      	b.n	800aeb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10b      	bne.n	800aedc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	60bb      	str	r3, [r7, #8]
}
 800aed6:	bf00      	nop
 800aed8:	bf00      	nop
 800aeda:	e7fd      	b.n	800aed8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee0:	1e5a      	subs	r2, r3, #1
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d02c      	beq.n	800af4c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d128      	bne.n	800af4c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	3304      	adds	r3, #4
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe f8aa 	bl	8009058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af1c:	4b0f      	ldr	r3, [pc, #60]	@ (800af5c <xTaskPriorityDisinherit+0xd8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d903      	bls.n	800af2c <xTaskPriorityDisinherit+0xa8>
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af28:	4a0c      	ldr	r2, [pc, #48]	@ (800af5c <xTaskPriorityDisinherit+0xd8>)
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4a09      	ldr	r2, [pc, #36]	@ (800af60 <xTaskPriorityDisinherit+0xdc>)
 800af3a:	441a      	add	r2, r3
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fe f82d 	bl	8008fa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af48:	2301      	movs	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af4c:	697b      	ldr	r3, [r7, #20]
	}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20002678 	.word	0x20002678
 800af5c:	20002b54 	.word	0x20002b54
 800af60:	2000267c 	.word	0x2000267c

0800af64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af64:	b580      	push	{r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af72:	2301      	movs	r3, #1
 800af74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d071      	beq.n	800b060 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10b      	bne.n	800af9c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	60fb      	str	r3, [r7, #12]
}
 800af96:	bf00      	nop
 800af98:	bf00      	nop
 800af9a:	e7fd      	b.n	800af98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d902      	bls.n	800afac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	61fb      	str	r3, [r7, #28]
 800afaa:	e002      	b.n	800afb2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afb0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb6:	69fa      	ldr	r2, [r7, #28]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d051      	beq.n	800b060 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d14c      	bne.n	800b060 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800afc6:	4b28      	ldr	r3, [pc, #160]	@ (800b068 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d10b      	bne.n	800afe8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	60bb      	str	r3, [r7, #8]
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	69fa      	ldr	r2, [r7, #28]
 800aff2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	db04      	blt.n	800b006 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	6959      	ldr	r1, [r3, #20]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	4613      	mov	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4a15      	ldr	r2, [pc, #84]	@ (800b06c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b016:	4413      	add	r3, r2
 800b018:	4299      	cmp	r1, r3
 800b01a:	d101      	bne.n	800b020 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800b020:	2300      	movs	r3, #0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d01c      	beq.n	800b060 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	3304      	adds	r3, #4
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe f814 	bl	8009058 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b034:	4b0e      	ldr	r3, [pc, #56]	@ (800b070 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d903      	bls.n	800b044 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b040:	4a0b      	ldr	r2, [pc, #44]	@ (800b070 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4a06      	ldr	r2, [pc, #24]	@ (800b06c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b052:	441a      	add	r2, r3
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	3304      	adds	r3, #4
 800b058:	4619      	mov	r1, r3
 800b05a:	4610      	mov	r0, r2
 800b05c:	f7fd ffa1 	bl	8008fa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b060:	bf00      	nop
 800b062:	3720      	adds	r7, #32
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20002678 	.word	0x20002678
 800b06c:	2000267c 	.word	0x2000267c
 800b070:	20002b54 	.word	0x20002b54

0800b074 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b078:	4b07      	ldr	r3, [pc, #28]	@ (800b098 <pvTaskIncrementMutexHeldCount+0x24>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d004      	beq.n	800b08a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b080:	4b05      	ldr	r3, [pc, #20]	@ (800b098 <pvTaskIncrementMutexHeldCount+0x24>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b086:	3201      	adds	r2, #1
 800b088:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b08a:	4b03      	ldr	r3, [pc, #12]	@ (800b098 <pvTaskIncrementMutexHeldCount+0x24>)
 800b08c:	681b      	ldr	r3, [r3, #0]
	}
 800b08e:	4618      	mov	r0, r3
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	20002678 	.word	0x20002678

0800b09c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b0a6:	4b21      	ldr	r3, [pc, #132]	@ (800b12c <prvAddCurrentTaskToDelayedList+0x90>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0ac:	4b20      	ldr	r3, [pc, #128]	@ (800b130 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fd ffd0 	bl	8009058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0be:	d10a      	bne.n	800b0d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d007      	beq.n	800b0d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b130 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4819      	ldr	r0, [pc, #100]	@ (800b134 <prvAddCurrentTaskToDelayedList+0x98>)
 800b0d0:	f7fd ff67 	bl	8008fa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b0d4:	e026      	b.n	800b124 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4413      	add	r3, r2
 800b0dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0de:	4b14      	ldr	r3, [pc, #80]	@ (800b130 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d209      	bcs.n	800b102 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0ee:	4b12      	ldr	r3, [pc, #72]	@ (800b138 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b130 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fd ff74 	bl	8008fe8 <vListInsert>
}
 800b100:	e010      	b.n	800b124 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b102:	4b0e      	ldr	r3, [pc, #56]	@ (800b13c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	4b0a      	ldr	r3, [pc, #40]	@ (800b130 <prvAddCurrentTaskToDelayedList+0x94>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7fd ff6a 	bl	8008fe8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b114:	4b0a      	ldr	r3, [pc, #40]	@ (800b140 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d202      	bcs.n	800b124 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b11e:	4a08      	ldr	r2, [pc, #32]	@ (800b140 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	6013      	str	r3, [r2, #0]
}
 800b124:	bf00      	nop
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20002b50 	.word	0x20002b50
 800b130:	20002678 	.word	0x20002678
 800b134:	20002b38 	.word	0x20002b38
 800b138:	20002b08 	.word	0x20002b08
 800b13c:	20002b04 	.word	0x20002b04
 800b140:	20002b6c 	.word	0x20002b6c

0800b144 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08a      	sub	sp, #40	@ 0x28
 800b148:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b14e:	f000 fad9 	bl	800b704 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b152:	4b1d      	ldr	r3, [pc, #116]	@ (800b1c8 <xTimerCreateTimerTask+0x84>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d021      	beq.n	800b19e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b15e:	2300      	movs	r3, #0
 800b160:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b162:	1d3a      	adds	r2, r7, #4
 800b164:	f107 0108 	add.w	r1, r7, #8
 800b168:	f107 030c 	add.w	r3, r7, #12
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fd fed3 	bl	8008f18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	9202      	str	r2, [sp, #8]
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	2302      	movs	r3, #2
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	2300      	movs	r3, #0
 800b182:	460a      	mov	r2, r1
 800b184:	4911      	ldr	r1, [pc, #68]	@ (800b1cc <xTimerCreateTimerTask+0x88>)
 800b186:	4812      	ldr	r0, [pc, #72]	@ (800b1d0 <xTimerCreateTimerTask+0x8c>)
 800b188:	f7fe ff62 	bl	800a050 <xTaskCreateStatic>
 800b18c:	4603      	mov	r3, r0
 800b18e:	4a11      	ldr	r2, [pc, #68]	@ (800b1d4 <xTimerCreateTimerTask+0x90>)
 800b190:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b192:	4b10      	ldr	r3, [pc, #64]	@ (800b1d4 <xTimerCreateTimerTask+0x90>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b19a:	2301      	movs	r3, #1
 800b19c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	613b      	str	r3, [r7, #16]
}
 800b1b6:	bf00      	nop
 800b1b8:	bf00      	nop
 800b1ba:	e7fd      	b.n	800b1b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b1bc:	697b      	ldr	r3, [r7, #20]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20002ba8 	.word	0x20002ba8
 800b1cc:	0800d724 	.word	0x0800d724
 800b1d0:	0800b2f9 	.word	0x0800b2f9
 800b1d4:	20002bac 	.word	0x20002bac

0800b1d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08a      	sub	sp, #40	@ 0x28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
 800b1e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10b      	bne.n	800b208 <xTimerGenericCommand+0x30>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	623b      	str	r3, [r7, #32]
}
 800b202:	bf00      	nop
 800b204:	bf00      	nop
 800b206:	e7fd      	b.n	800b204 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b208:	4b19      	ldr	r3, [pc, #100]	@ (800b270 <xTimerGenericCommand+0x98>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d02a      	beq.n	800b266 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b05      	cmp	r3, #5
 800b220:	dc18      	bgt.n	800b254 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b222:	f7ff fda3 	bl	800ad6c <xTaskGetSchedulerState>
 800b226:	4603      	mov	r3, r0
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d109      	bne.n	800b240 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b22c:	4b10      	ldr	r3, [pc, #64]	@ (800b270 <xTimerGenericCommand+0x98>)
 800b22e:	6818      	ldr	r0, [r3, #0]
 800b230:	f107 0110 	add.w	r1, r7, #16
 800b234:	2300      	movs	r3, #0
 800b236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b238:	f7fe f93a 	bl	80094b0 <xQueueGenericSend>
 800b23c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b23e:	e012      	b.n	800b266 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b240:	4b0b      	ldr	r3, [pc, #44]	@ (800b270 <xTimerGenericCommand+0x98>)
 800b242:	6818      	ldr	r0, [r3, #0]
 800b244:	f107 0110 	add.w	r1, r7, #16
 800b248:	2300      	movs	r3, #0
 800b24a:	2200      	movs	r2, #0
 800b24c:	f7fe f930 	bl	80094b0 <xQueueGenericSend>
 800b250:	6278      	str	r0, [r7, #36]	@ 0x24
 800b252:	e008      	b.n	800b266 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b254:	4b06      	ldr	r3, [pc, #24]	@ (800b270 <xTimerGenericCommand+0x98>)
 800b256:	6818      	ldr	r0, [r3, #0]
 800b258:	f107 0110 	add.w	r1, r7, #16
 800b25c:	2300      	movs	r3, #0
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	f7fe fa28 	bl	80096b4 <xQueueGenericSendFromISR>
 800b264:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3728      	adds	r7, #40	@ 0x28
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	20002ba8 	.word	0x20002ba8

0800b274 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af02      	add	r7, sp, #8
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b27e:	4b1d      	ldr	r3, [pc, #116]	@ (800b2f4 <prvProcessExpiredTimer+0x80>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	3304      	adds	r3, #4
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fd fee3 	bl	8009058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d123      	bne.n	800b2e2 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	699a      	ldr	r2, [r3, #24]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	18d1      	adds	r1, r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	6978      	ldr	r0, [r7, #20]
 800b2a8:	f000 f8cc 	bl	800b444 <prvInsertTimerInActiveList>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d017      	beq.n	800b2e2 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	6978      	ldr	r0, [r7, #20]
 800b2be:	f7ff ff8b 	bl	800b1d8 <xTimerGenericCommand>
 800b2c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10b      	bne.n	800b2e2 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	60fb      	str	r3, [r7, #12]
}
 800b2dc:	bf00      	nop
 800b2de:	bf00      	nop
 800b2e0:	e7fd      	b.n	800b2de <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e6:	6978      	ldr	r0, [r7, #20]
 800b2e8:	4798      	blx	r3
}
 800b2ea:	bf00      	nop
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20002ba0 	.word	0x20002ba0

0800b2f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b300:	f107 0308 	add.w	r3, r7, #8
 800b304:	4618      	mov	r0, r3
 800b306:	f000 f859 	bl	800b3bc <prvGetNextExpireTime>
 800b30a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	4619      	mov	r1, r3
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f805 	bl	800b320 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b316:	f000 f8d7 	bl	800b4c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b31a:	bf00      	nop
 800b31c:	e7f0      	b.n	800b300 <prvTimerTask+0x8>
	...

0800b320 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b32a:	f7ff f8ed 	bl	800a508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b32e:	f107 0308 	add.w	r3, r7, #8
 800b332:	4618      	mov	r0, r3
 800b334:	f000 f866 	bl	800b404 <prvSampleTimeNow>
 800b338:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d130      	bne.n	800b3a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <prvProcessTimerOrBlockTask+0x3c>
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d806      	bhi.n	800b35c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b34e:	f7ff f8e9 	bl	800a524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b352:	68f9      	ldr	r1, [r7, #12]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7ff ff8d 	bl	800b274 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b35a:	e024      	b.n	800b3a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d008      	beq.n	800b374 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b362:	4b13      	ldr	r3, [pc, #76]	@ (800b3b0 <prvProcessTimerOrBlockTask+0x90>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bf0c      	ite	eq
 800b36c:	2301      	moveq	r3, #1
 800b36e:	2300      	movne	r3, #0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b374:	4b0f      	ldr	r3, [pc, #60]	@ (800b3b4 <prvProcessTimerOrBlockTask+0x94>)
 800b376:	6818      	ldr	r0, [r3, #0]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4619      	mov	r1, r3
 800b382:	f7fe fe31 	bl	8009fe8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b386:	f7ff f8cd 	bl	800a524 <xTaskResumeAll>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10a      	bne.n	800b3a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b390:	4b09      	ldr	r3, [pc, #36]	@ (800b3b8 <prvProcessTimerOrBlockTask+0x98>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
}
 800b3a0:	e001      	b.n	800b3a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b3a2:	f7ff f8bf 	bl	800a524 <xTaskResumeAll>
}
 800b3a6:	bf00      	nop
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20002ba4 	.word	0x20002ba4
 800b3b4:	20002ba8 	.word	0x20002ba8
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b400 <prvGetNextExpireTime+0x44>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	bf0c      	ite	eq
 800b3ce:	2301      	moveq	r3, #1
 800b3d0:	2300      	movne	r3, #0
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3e2:	4b07      	ldr	r3, [pc, #28]	@ (800b400 <prvGetNextExpireTime+0x44>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
 800b3ec:	e001      	b.n	800b3f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bc80      	pop	{r7}
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	20002ba0 	.word	0x20002ba0

0800b404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b40c:	f7ff f928 	bl	800a660 <xTaskGetTickCount>
 800b410:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b412:	4b0b      	ldr	r3, [pc, #44]	@ (800b440 <prvSampleTimeNow+0x3c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d205      	bcs.n	800b428 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b41c:	f000 f910 	bl	800b640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	e002      	b.n	800b42e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b42e:	4a04      	ldr	r2, [pc, #16]	@ (800b440 <prvSampleTimeNow+0x3c>)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b434:	68fb      	ldr	r3, [r7, #12]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20002bb0 	.word	0x20002bb0

0800b444 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
 800b450:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b452:	2300      	movs	r3, #0
 800b454:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d812      	bhi.n	800b490 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	429a      	cmp	r2, r3
 800b476:	d302      	bcc.n	800b47e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b478:	2301      	movs	r3, #1
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	e01b      	b.n	800b4b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b47e:	4b10      	ldr	r3, [pc, #64]	@ (800b4c0 <prvInsertTimerInActiveList+0x7c>)
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3304      	adds	r3, #4
 800b486:	4619      	mov	r1, r3
 800b488:	4610      	mov	r0, r2
 800b48a:	f7fd fdad 	bl	8008fe8 <vListInsert>
 800b48e:	e012      	b.n	800b4b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d206      	bcs.n	800b4a6 <prvInsertTimerInActiveList+0x62>
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d302      	bcc.n	800b4a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	617b      	str	r3, [r7, #20]
 800b4a4:	e007      	b.n	800b4b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4a6:	4b07      	ldr	r3, [pc, #28]	@ (800b4c4 <prvInsertTimerInActiveList+0x80>)
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3304      	adds	r3, #4
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	f7fd fd99 	bl	8008fe8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b4b6:	697b      	ldr	r3, [r7, #20]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20002ba4 	.word	0x20002ba4
 800b4c4:	20002ba0 	.word	0x20002ba0

0800b4c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08e      	sub	sp, #56	@ 0x38
 800b4cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4ce:	e0a5      	b.n	800b61c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	da19      	bge.n	800b50a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4d6:	1d3b      	adds	r3, r7, #4
 800b4d8:	3304      	adds	r3, #4
 800b4da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10b      	bne.n	800b4fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	61fb      	str	r3, [r7, #28]
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop
 800b4f8:	e7fd      	b.n	800b4f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b500:	6850      	ldr	r0, [r2, #4]
 800b502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b504:	6892      	ldr	r2, [r2, #8]
 800b506:	4611      	mov	r1, r2
 800b508:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f2c0 8085 	blt.w	800b61c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d004      	beq.n	800b528 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b520:	3304      	adds	r3, #4
 800b522:	4618      	mov	r0, r3
 800b524:	f7fd fd98 	bl	8009058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b528:	463b      	mov	r3, r7
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff ff6a 	bl	800b404 <prvSampleTimeNow>
 800b530:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b09      	cmp	r3, #9
 800b536:	d86c      	bhi.n	800b612 <prvProcessReceivedCommands+0x14a>
 800b538:	a201      	add	r2, pc, #4	@ (adr r2, 800b540 <prvProcessReceivedCommands+0x78>)
 800b53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53e:	bf00      	nop
 800b540:	0800b569 	.word	0x0800b569
 800b544:	0800b569 	.word	0x0800b569
 800b548:	0800b569 	.word	0x0800b569
 800b54c:	0800b613 	.word	0x0800b613
 800b550:	0800b5c7 	.word	0x0800b5c7
 800b554:	0800b601 	.word	0x0800b601
 800b558:	0800b569 	.word	0x0800b569
 800b55c:	0800b569 	.word	0x0800b569
 800b560:	0800b613 	.word	0x0800b613
 800b564:	0800b5c7 	.word	0x0800b5c7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	18d1      	adds	r1, r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b576:	f7ff ff65 	bl	800b444 <prvInsertTimerInActiveList>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d04a      	beq.n	800b616 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b586:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d142      	bne.n	800b616 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	441a      	add	r2, r3
 800b598:	2300      	movs	r3, #0
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	2300      	movs	r3, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5a2:	f7ff fe19 	bl	800b1d8 <xTimerGenericCommand>
 800b5a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d133      	bne.n	800b616 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	61bb      	str	r3, [r7, #24]
}
 800b5c0:	bf00      	nop
 800b5c2:	bf00      	nop
 800b5c4:	e7fd      	b.n	800b5c2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10b      	bne.n	800b5ec <prvProcessReceivedCommands+0x124>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	617b      	str	r3, [r7, #20]
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	e7fd      	b.n	800b5e8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ee:	699a      	ldr	r2, [r3, #24]
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	18d1      	adds	r1, r2, r3
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5fa:	f7ff ff23 	bl	800b444 <prvInsertTimerInActiveList>
					break;
 800b5fe:	e00d      	b.n	800b61c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b602:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d107      	bne.n	800b61a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800b60a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b60c:	f000 fb78 	bl	800bd00 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b610:	e003      	b.n	800b61a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800b612:	bf00      	nop
 800b614:	e002      	b.n	800b61c <prvProcessReceivedCommands+0x154>
					break;
 800b616:	bf00      	nop
 800b618:	e000      	b.n	800b61c <prvProcessReceivedCommands+0x154>
					break;
 800b61a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b61c:	4b07      	ldr	r3, [pc, #28]	@ (800b63c <prvProcessReceivedCommands+0x174>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	1d39      	adds	r1, r7, #4
 800b622:	2200      	movs	r2, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe f8e1 	bl	80097ec <xQueueReceive>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f47f af4f 	bne.w	800b4d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	3730      	adds	r7, #48	@ 0x30
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20002ba8 	.word	0x20002ba8

0800b640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b646:	e046      	b.n	800b6d6 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b648:	4b2c      	ldr	r3, [pc, #176]	@ (800b6fc <prvSwitchTimerLists+0xbc>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b652:	4b2a      	ldr	r3, [pc, #168]	@ (800b6fc <prvSwitchTimerLists+0xbc>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3304      	adds	r3, #4
 800b660:	4618      	mov	r0, r3
 800b662:	f7fd fcf9 	bl	8009058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	69db      	ldr	r3, [r3, #28]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d12f      	bne.n	800b6d6 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	4413      	add	r3, r2
 800b67e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	429a      	cmp	r2, r3
 800b686:	d90e      	bls.n	800b6a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b694:	4b19      	ldr	r3, [pc, #100]	@ (800b6fc <prvSwitchTimerLists+0xbc>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4610      	mov	r0, r2
 800b6a0:	f7fd fca2 	bl	8008fe8 <vListInsert>
 800b6a4:	e017      	b.n	800b6d6 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff fd91 	bl	800b1d8 <xTimerGenericCommand>
 800b6b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10b      	bne.n	800b6d6 <prvSwitchTimerLists+0x96>
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	603b      	str	r3, [r7, #0]
}
 800b6d0:	bf00      	nop
 800b6d2:	bf00      	nop
 800b6d4:	e7fd      	b.n	800b6d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6d6:	4b09      	ldr	r3, [pc, #36]	@ (800b6fc <prvSwitchTimerLists+0xbc>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1b3      	bne.n	800b648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b6e0:	4b06      	ldr	r3, [pc, #24]	@ (800b6fc <prvSwitchTimerLists+0xbc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b6e6:	4b06      	ldr	r3, [pc, #24]	@ (800b700 <prvSwitchTimerLists+0xc0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a04      	ldr	r2, [pc, #16]	@ (800b6fc <prvSwitchTimerLists+0xbc>)
 800b6ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b6ee:	4a04      	ldr	r2, [pc, #16]	@ (800b700 <prvSwitchTimerLists+0xc0>)
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	6013      	str	r3, [r2, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20002ba0 	.word	0x20002ba0
 800b700:	20002ba4 	.word	0x20002ba4

0800b704 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b70a:	f000 f92f 	bl	800b96c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b70e:	4b15      	ldr	r3, [pc, #84]	@ (800b764 <prvCheckForValidListAndQueue+0x60>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d120      	bne.n	800b758 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b716:	4814      	ldr	r0, [pc, #80]	@ (800b768 <prvCheckForValidListAndQueue+0x64>)
 800b718:	f7fd fc18 	bl	8008f4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b71c:	4813      	ldr	r0, [pc, #76]	@ (800b76c <prvCheckForValidListAndQueue+0x68>)
 800b71e:	f7fd fc15 	bl	8008f4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b722:	4b13      	ldr	r3, [pc, #76]	@ (800b770 <prvCheckForValidListAndQueue+0x6c>)
 800b724:	4a10      	ldr	r2, [pc, #64]	@ (800b768 <prvCheckForValidListAndQueue+0x64>)
 800b726:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b728:	4b12      	ldr	r3, [pc, #72]	@ (800b774 <prvCheckForValidListAndQueue+0x70>)
 800b72a:	4a10      	ldr	r2, [pc, #64]	@ (800b76c <prvCheckForValidListAndQueue+0x68>)
 800b72c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b72e:	2300      	movs	r3, #0
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	4b11      	ldr	r3, [pc, #68]	@ (800b778 <prvCheckForValidListAndQueue+0x74>)
 800b734:	4a11      	ldr	r2, [pc, #68]	@ (800b77c <prvCheckForValidListAndQueue+0x78>)
 800b736:	2110      	movs	r1, #16
 800b738:	200a      	movs	r0, #10
 800b73a:	f7fd fd21 	bl	8009180 <xQueueGenericCreateStatic>
 800b73e:	4603      	mov	r3, r0
 800b740:	4a08      	ldr	r2, [pc, #32]	@ (800b764 <prvCheckForValidListAndQueue+0x60>)
 800b742:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b744:	4b07      	ldr	r3, [pc, #28]	@ (800b764 <prvCheckForValidListAndQueue+0x60>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d005      	beq.n	800b758 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b74c:	4b05      	ldr	r3, [pc, #20]	@ (800b764 <prvCheckForValidListAndQueue+0x60>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	490b      	ldr	r1, [pc, #44]	@ (800b780 <prvCheckForValidListAndQueue+0x7c>)
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe fc20 	bl	8009f98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b758:	f000 f938 	bl	800b9cc <vPortExitCritical>
}
 800b75c:	bf00      	nop
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20002ba8 	.word	0x20002ba8
 800b768:	20002b78 	.word	0x20002b78
 800b76c:	20002b8c 	.word	0x20002b8c
 800b770:	20002ba0 	.word	0x20002ba0
 800b774:	20002ba4 	.word	0x20002ba4
 800b778:	20002c54 	.word	0x20002c54
 800b77c:	20002bb4 	.word	0x20002bb4
 800b780:	0800d72c 	.word	0x0800d72c

0800b784 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	3b04      	subs	r3, #4
 800b794:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b79c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3b04      	subs	r3, #4
 800b7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	f023 0201 	bic.w	r2, r3, #1
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3b04      	subs	r3, #4
 800b7b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7b4:	4a08      	ldr	r2, [pc, #32]	@ (800b7d8 <pxPortInitialiseStack+0x54>)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3b14      	subs	r3, #20
 800b7be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	3b20      	subs	r3, #32
 800b7ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bc80      	pop	{r7}
 800b7d6:	4770      	bx	lr
 800b7d8:	0800b7dd 	.word	0x0800b7dd

0800b7dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7e6:	4b12      	ldr	r3, [pc, #72]	@ (800b830 <prvTaskExitError+0x54>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7ee:	d00b      	beq.n	800b808 <prvTaskExitError+0x2c>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	60fb      	str	r3, [r7, #12]
}
 800b802:	bf00      	nop
 800b804:	bf00      	nop
 800b806:	e7fd      	b.n	800b804 <prvTaskExitError+0x28>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	60bb      	str	r3, [r7, #8]
}
 800b81a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b81c:	bf00      	nop
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d0fc      	beq.n	800b81e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bc80      	pop	{r7}
 800b82e:	4770      	bx	lr
 800b830:	200008c0 	.word	0x200008c0
	...

0800b840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b840:	4b07      	ldr	r3, [pc, #28]	@ (800b860 <pxCurrentTCBConst2>)
 800b842:	6819      	ldr	r1, [r3, #0]
 800b844:	6808      	ldr	r0, [r1, #0]
 800b846:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b84a:	f380 8809 	msr	PSP, r0
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f04f 0000 	mov.w	r0, #0
 800b856:	f380 8811 	msr	BASEPRI, r0
 800b85a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b85e:	4770      	bx	lr

0800b860 <pxCurrentTCBConst2>:
 800b860:	20002678 	.word	0x20002678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b868:	4806      	ldr	r0, [pc, #24]	@ (800b884 <prvPortStartFirstTask+0x1c>)
 800b86a:	6800      	ldr	r0, [r0, #0]
 800b86c:	6800      	ldr	r0, [r0, #0]
 800b86e:	f380 8808 	msr	MSP, r0
 800b872:	b662      	cpsie	i
 800b874:	b661      	cpsie	f
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	df00      	svc	0
 800b880:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b882:	bf00      	nop
 800b884:	e000ed08 	.word	0xe000ed08

0800b888 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b88e:	4b32      	ldr	r3, [pc, #200]	@ (800b958 <xPortStartScheduler+0xd0>)
 800b890:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	b2db      	uxtb	r3, r3
 800b898:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	22ff      	movs	r2, #255	@ 0xff
 800b89e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8a8:	78fb      	ldrb	r3, [r7, #3]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	4b2a      	ldr	r3, [pc, #168]	@ (800b95c <xPortStartScheduler+0xd4>)
 800b8b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8b6:	4b2a      	ldr	r3, [pc, #168]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b8b8:	2207      	movs	r2, #7
 800b8ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8bc:	e009      	b.n	800b8d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b8be:	4b28      	ldr	r3, [pc, #160]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	4a26      	ldr	r2, [pc, #152]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b8c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8c8:	78fb      	ldrb	r3, [r7, #3]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8d2:	78fb      	ldrb	r3, [r7, #3]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8da:	2b80      	cmp	r3, #128	@ 0x80
 800b8dc:	d0ef      	beq.n	800b8be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8de:	4b20      	ldr	r3, [pc, #128]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f1c3 0307 	rsb	r3, r3, #7
 800b8e6:	2b04      	cmp	r3, #4
 800b8e8:	d00b      	beq.n	800b902 <xPortStartScheduler+0x7a>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	60bb      	str	r3, [r7, #8]
}
 800b8fc:	bf00      	nop
 800b8fe:	bf00      	nop
 800b900:	e7fd      	b.n	800b8fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b902:	4b17      	ldr	r3, [pc, #92]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	021b      	lsls	r3, r3, #8
 800b908:	4a15      	ldr	r2, [pc, #84]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b90a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b90c:	4b14      	ldr	r3, [pc, #80]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b914:	4a12      	ldr	r2, [pc, #72]	@ (800b960 <xPortStartScheduler+0xd8>)
 800b916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b920:	4b10      	ldr	r3, [pc, #64]	@ (800b964 <xPortStartScheduler+0xdc>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a0f      	ldr	r2, [pc, #60]	@ (800b964 <xPortStartScheduler+0xdc>)
 800b926:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b92a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b92c:	4b0d      	ldr	r3, [pc, #52]	@ (800b964 <xPortStartScheduler+0xdc>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a0c      	ldr	r2, [pc, #48]	@ (800b964 <xPortStartScheduler+0xdc>)
 800b932:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b938:	f000 f8b8 	bl	800baac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b93c:	4b0a      	ldr	r3, [pc, #40]	@ (800b968 <xPortStartScheduler+0xe0>)
 800b93e:	2200      	movs	r2, #0
 800b940:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b942:	f7ff ff91 	bl	800b868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b946:	f7fe ff75 	bl	800a834 <vTaskSwitchContext>
	prvTaskExitError();
 800b94a:	f7ff ff47 	bl	800b7dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	e000e400 	.word	0xe000e400
 800b95c:	20002ca4 	.word	0x20002ca4
 800b960:	20002ca8 	.word	0x20002ca8
 800b964:	e000ed20 	.word	0xe000ed20
 800b968:	200008c0 	.word	0x200008c0

0800b96c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	607b      	str	r3, [r7, #4]
}
 800b984:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b986:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c4 <vPortEnterCritical+0x58>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3301      	adds	r3, #1
 800b98c:	4a0d      	ldr	r2, [pc, #52]	@ (800b9c4 <vPortEnterCritical+0x58>)
 800b98e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b990:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c4 <vPortEnterCritical+0x58>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d110      	bne.n	800b9ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b998:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c8 <vPortEnterCritical+0x5c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00b      	beq.n	800b9ba <vPortEnterCritical+0x4e>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	603b      	str	r3, [r7, #0]
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop
 800b9b8:	e7fd      	b.n	800b9b6 <vPortEnterCritical+0x4a>
	}
}
 800b9ba:	bf00      	nop
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bc80      	pop	{r7}
 800b9c2:	4770      	bx	lr
 800b9c4:	200008c0 	.word	0x200008c0
 800b9c8:	e000ed04 	.word	0xe000ed04

0800b9cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ba1c <vPortExitCritical+0x50>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10b      	bne.n	800b9f2 <vPortExitCritical+0x26>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	607b      	str	r3, [r7, #4]
}
 800b9ec:	bf00      	nop
 800b9ee:	bf00      	nop
 800b9f0:	e7fd      	b.n	800b9ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800ba1c <vPortExitCritical+0x50>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	4a08      	ldr	r2, [pc, #32]	@ (800ba1c <vPortExitCritical+0x50>)
 800b9fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ba1c <vPortExitCritical+0x50>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d105      	bne.n	800ba10 <vPortExitCritical+0x44>
 800ba04:	2300      	movs	r3, #0
 800ba06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	f383 8811 	msr	BASEPRI, r3
}
 800ba0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bc80      	pop	{r7}
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	200008c0 	.word	0x200008c0

0800ba20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba20:	f3ef 8009 	mrs	r0, PSP
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	4b0d      	ldr	r3, [pc, #52]	@ (800ba60 <pxCurrentTCBConst>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba30:	6010      	str	r0, [r2, #0]
 800ba32:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ba36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ba3a:	f380 8811 	msr	BASEPRI, r0
 800ba3e:	f7fe fef9 	bl	800a834 <vTaskSwitchContext>
 800ba42:	f04f 0000 	mov.w	r0, #0
 800ba46:	f380 8811 	msr	BASEPRI, r0
 800ba4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba4e:	6819      	ldr	r1, [r3, #0]
 800ba50:	6808      	ldr	r0, [r1, #0]
 800ba52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba56:	f380 8809 	msr	PSP, r0
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	4770      	bx	lr

0800ba60 <pxCurrentTCBConst>:
 800ba60:	20002678 	.word	0x20002678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop

0800ba68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	607b      	str	r3, [r7, #4]
}
 800ba80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba82:	f7fe fdfb 	bl	800a67c <xTaskIncrementTick>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba8c:	4b06      	ldr	r3, [pc, #24]	@ (800baa8 <SysTick_Handler+0x40>)
 800ba8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	2300      	movs	r3, #0
 800ba96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	f383 8811 	msr	BASEPRI, r3
}
 800ba9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	e000ed04 	.word	0xe000ed04

0800baac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800baac:	b480      	push	{r7}
 800baae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bab0:	4b0a      	ldr	r3, [pc, #40]	@ (800badc <vPortSetupTimerInterrupt+0x30>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bab6:	4b0a      	ldr	r3, [pc, #40]	@ (800bae0 <vPortSetupTimerInterrupt+0x34>)
 800bab8:	2200      	movs	r2, #0
 800baba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800babc:	4b09      	ldr	r3, [pc, #36]	@ (800bae4 <vPortSetupTimerInterrupt+0x38>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a09      	ldr	r2, [pc, #36]	@ (800bae8 <vPortSetupTimerInterrupt+0x3c>)
 800bac2:	fba2 2303 	umull	r2, r3, r2, r3
 800bac6:	099b      	lsrs	r3, r3, #6
 800bac8:	4a08      	ldr	r2, [pc, #32]	@ (800baec <vPortSetupTimerInterrupt+0x40>)
 800baca:	3b01      	subs	r3, #1
 800bacc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bace:	4b03      	ldr	r3, [pc, #12]	@ (800badc <vPortSetupTimerInterrupt+0x30>)
 800bad0:	2207      	movs	r2, #7
 800bad2:	601a      	str	r2, [r3, #0]
}
 800bad4:	bf00      	nop
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bc80      	pop	{r7}
 800bada:	4770      	bx	lr
 800badc:	e000e010 	.word	0xe000e010
 800bae0:	e000e018 	.word	0xe000e018
 800bae4:	200008b4 	.word	0x200008b4
 800bae8:	10624dd3 	.word	0x10624dd3
 800baec:	e000e014 	.word	0xe000e014

0800baf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800baf6:	f3ef 8305 	mrs	r3, IPSR
 800bafa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b0f      	cmp	r3, #15
 800bb00:	d915      	bls.n	800bb2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb02:	4a17      	ldr	r2, [pc, #92]	@ (800bb60 <vPortValidateInterruptPriority+0x70>)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb0c:	4b15      	ldr	r3, [pc, #84]	@ (800bb64 <vPortValidateInterruptPriority+0x74>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	7afa      	ldrb	r2, [r7, #11]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d20b      	bcs.n	800bb2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	607b      	str	r3, [r7, #4]
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	e7fd      	b.n	800bb2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb2e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb68 <vPortValidateInterruptPriority+0x78>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bb36:	4b0d      	ldr	r3, [pc, #52]	@ (800bb6c <vPortValidateInterruptPriority+0x7c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d90b      	bls.n	800bb56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	603b      	str	r3, [r7, #0]
}
 800bb50:	bf00      	nop
 800bb52:	bf00      	nop
 800bb54:	e7fd      	b.n	800bb52 <vPortValidateInterruptPriority+0x62>
	}
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bc80      	pop	{r7}
 800bb5e:	4770      	bx	lr
 800bb60:	e000e3f0 	.word	0xe000e3f0
 800bb64:	20002ca4 	.word	0x20002ca4
 800bb68:	e000ed0c 	.word	0xe000ed0c
 800bb6c:	20002ca8 	.word	0x20002ca8

0800bb70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08a      	sub	sp, #40	@ 0x28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb7c:	f7fe fcc4 	bl	800a508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb80:	4b5a      	ldr	r3, [pc, #360]	@ (800bcec <pvPortMalloc+0x17c>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb88:	f000 f916 	bl	800bdb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb8c:	4b58      	ldr	r3, [pc, #352]	@ (800bcf0 <pvPortMalloc+0x180>)
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4013      	ands	r3, r2
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f040 8090 	bne.w	800bcba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d01e      	beq.n	800bbde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bba0:	2208      	movs	r2, #8
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4413      	add	r3, r2
 800bba6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f003 0307 	and.w	r3, r3, #7
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d015      	beq.n	800bbde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f023 0307 	bic.w	r3, r3, #7
 800bbb8:	3308      	adds	r3, #8
 800bbba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f003 0307 	and.w	r3, r3, #7
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00b      	beq.n	800bbde <pvPortMalloc+0x6e>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	617b      	str	r3, [r7, #20]
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	e7fd      	b.n	800bbda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d06a      	beq.n	800bcba <pvPortMalloc+0x14a>
 800bbe4:	4b43      	ldr	r3, [pc, #268]	@ (800bcf4 <pvPortMalloc+0x184>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d865      	bhi.n	800bcba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbee:	4b42      	ldr	r3, [pc, #264]	@ (800bcf8 <pvPortMalloc+0x188>)
 800bbf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bbf2:	4b41      	ldr	r3, [pc, #260]	@ (800bcf8 <pvPortMalloc+0x188>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbf8:	e004      	b.n	800bc04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d903      	bls.n	800bc16 <pvPortMalloc+0xa6>
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1f1      	bne.n	800bbfa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc16:	4b35      	ldr	r3, [pc, #212]	@ (800bcec <pvPortMalloc+0x17c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d04c      	beq.n	800bcba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2208      	movs	r2, #8
 800bc26:	4413      	add	r3, r2
 800bc28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	1ad2      	subs	r2, r2, r3
 800bc3a:	2308      	movs	r3, #8
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d920      	bls.n	800bc84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4413      	add	r3, r2
 800bc48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	f003 0307 	and.w	r3, r3, #7
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00b      	beq.n	800bc6c <pvPortMalloc+0xfc>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	613b      	str	r3, [r7, #16]
}
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
 800bc6a:	e7fd      	b.n	800bc68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc7e:	69b8      	ldr	r0, [r7, #24]
 800bc80:	f000 f8fc 	bl	800be7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc84:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf4 <pvPortMalloc+0x184>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	4a19      	ldr	r2, [pc, #100]	@ (800bcf4 <pvPortMalloc+0x184>)
 800bc90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc92:	4b18      	ldr	r3, [pc, #96]	@ (800bcf4 <pvPortMalloc+0x184>)
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	4b19      	ldr	r3, [pc, #100]	@ (800bcfc <pvPortMalloc+0x18c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d203      	bcs.n	800bca6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc9e:	4b15      	ldr	r3, [pc, #84]	@ (800bcf4 <pvPortMalloc+0x184>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a16      	ldr	r2, [pc, #88]	@ (800bcfc <pvPortMalloc+0x18c>)
 800bca4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	4b11      	ldr	r3, [pc, #68]	@ (800bcf0 <pvPortMalloc+0x180>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bcba:	f7fe fc33 	bl	800a524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	f003 0307 	and.w	r3, r3, #7
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00b      	beq.n	800bce0 <pvPortMalloc+0x170>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	60fb      	str	r3, [r7, #12]
}
 800bcda:	bf00      	nop
 800bcdc:	bf00      	nop
 800bcde:	e7fd      	b.n	800bcdc <pvPortMalloc+0x16c>
	return pvReturn;
 800bce0:	69fb      	ldr	r3, [r7, #28]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3728      	adds	r7, #40	@ 0x28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20003830 	.word	0x20003830
 800bcf0:	2000383c 	.word	0x2000383c
 800bcf4:	20003834 	.word	0x20003834
 800bcf8:	20003828 	.word	0x20003828
 800bcfc:	20003838 	.word	0x20003838

0800bd00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d04a      	beq.n	800bda8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd12:	2308      	movs	r3, #8
 800bd14:	425b      	negs	r3, r3
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	4413      	add	r3, r2
 800bd1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	4b22      	ldr	r3, [pc, #136]	@ (800bdb0 <vPortFree+0xb0>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4013      	ands	r3, r2
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10b      	bne.n	800bd46 <vPortFree+0x46>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	60fb      	str	r3, [r7, #12]
}
 800bd40:	bf00      	nop
 800bd42:	bf00      	nop
 800bd44:	e7fd      	b.n	800bd42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00b      	beq.n	800bd66 <vPortFree+0x66>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	60bb      	str	r3, [r7, #8]
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	e7fd      	b.n	800bd62 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	4b11      	ldr	r3, [pc, #68]	@ (800bdb0 <vPortFree+0xb0>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d019      	beq.n	800bda8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d115      	bne.n	800bda8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb0 <vPortFree+0xb0>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	43db      	mvns	r3, r3
 800bd86:	401a      	ands	r2, r3
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd8c:	f7fe fbbc 	bl	800a508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	4b07      	ldr	r3, [pc, #28]	@ (800bdb4 <vPortFree+0xb4>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4413      	add	r3, r2
 800bd9a:	4a06      	ldr	r2, [pc, #24]	@ (800bdb4 <vPortFree+0xb4>)
 800bd9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd9e:	6938      	ldr	r0, [r7, #16]
 800bda0:	f000 f86c 	bl	800be7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bda4:	f7fe fbbe 	bl	800a524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bda8:	bf00      	nop
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	2000383c 	.word	0x2000383c
 800bdb4:	20003834 	.word	0x20003834

0800bdb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdbe:	f640 3379 	movw	r3, #2937	@ 0xb79
 800bdc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdc4:	4b27      	ldr	r3, [pc, #156]	@ (800be64 <prvHeapInit+0xac>)
 800bdc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00c      	beq.n	800bdec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3307      	adds	r3, #7
 800bdd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f023 0307 	bic.w	r3, r3, #7
 800bdde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	4a1f      	ldr	r2, [pc, #124]	@ (800be64 <prvHeapInit+0xac>)
 800bde8:	4413      	add	r3, r2
 800bdea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bdf0:	4a1d      	ldr	r2, [pc, #116]	@ (800be68 <prvHeapInit+0xb0>)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdf6:	4b1c      	ldr	r3, [pc, #112]	@ (800be68 <prvHeapInit+0xb0>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	4413      	add	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be04:	2208      	movs	r2, #8
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0307 	bic.w	r3, r3, #7
 800be12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	4a15      	ldr	r2, [pc, #84]	@ (800be6c <prvHeapInit+0xb4>)
 800be18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be1a:	4b14      	ldr	r3, [pc, #80]	@ (800be6c <prvHeapInit+0xb4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2200      	movs	r2, #0
 800be20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be22:	4b12      	ldr	r3, [pc, #72]	@ (800be6c <prvHeapInit+0xb4>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	1ad2      	subs	r2, r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be38:	4b0c      	ldr	r3, [pc, #48]	@ (800be6c <prvHeapInit+0xb4>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	4a0a      	ldr	r2, [pc, #40]	@ (800be70 <prvHeapInit+0xb8>)
 800be46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	4a09      	ldr	r2, [pc, #36]	@ (800be74 <prvHeapInit+0xbc>)
 800be4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be50:	4b09      	ldr	r3, [pc, #36]	@ (800be78 <prvHeapInit+0xc0>)
 800be52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be56:	601a      	str	r2, [r3, #0]
}
 800be58:	bf00      	nop
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bc80      	pop	{r7}
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	20002cac 	.word	0x20002cac
 800be68:	20003828 	.word	0x20003828
 800be6c:	20003830 	.word	0x20003830
 800be70:	20003838 	.word	0x20003838
 800be74:	20003834 	.word	0x20003834
 800be78:	2000383c 	.word	0x2000383c

0800be7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be84:	4b27      	ldr	r3, [pc, #156]	@ (800bf24 <prvInsertBlockIntoFreeList+0xa8>)
 800be86:	60fb      	str	r3, [r7, #12]
 800be88:	e002      	b.n	800be90 <prvInsertBlockIntoFreeList+0x14>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	d8f7      	bhi.n	800be8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	4413      	add	r3, r2
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d108      	bne.n	800bebe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	441a      	add	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	441a      	add	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d118      	bne.n	800bf04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	4b14      	ldr	r3, [pc, #80]	@ (800bf28 <prvInsertBlockIntoFreeList+0xac>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d00d      	beq.n	800befa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	441a      	add	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	e008      	b.n	800bf0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800befa:	4b0b      	ldr	r3, [pc, #44]	@ (800bf28 <prvInsertBlockIntoFreeList+0xac>)
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	e003      	b.n	800bf0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d002      	beq.n	800bf1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf1a:	bf00      	nop
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bc80      	pop	{r7}
 800bf22:	4770      	bx	lr
 800bf24:	20003828 	.word	0x20003828
 800bf28:	20003830 	.word	0x20003830

0800bf2c <siprintf>:
 800bf2c:	b40e      	push	{r1, r2, r3}
 800bf2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf32:	b500      	push	{lr}
 800bf34:	b09c      	sub	sp, #112	@ 0x70
 800bf36:	ab1d      	add	r3, sp, #116	@ 0x74
 800bf38:	9002      	str	r0, [sp, #8]
 800bf3a:	9006      	str	r0, [sp, #24]
 800bf3c:	9107      	str	r1, [sp, #28]
 800bf3e:	9104      	str	r1, [sp, #16]
 800bf40:	4808      	ldr	r0, [pc, #32]	@ (800bf64 <siprintf+0x38>)
 800bf42:	4909      	ldr	r1, [pc, #36]	@ (800bf68 <siprintf+0x3c>)
 800bf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf48:	9105      	str	r1, [sp, #20]
 800bf4a:	6800      	ldr	r0, [r0, #0]
 800bf4c:	a902      	add	r1, sp, #8
 800bf4e:	9301      	str	r3, [sp, #4]
 800bf50:	f000 f9f6 	bl	800c340 <_svfiprintf_r>
 800bf54:	2200      	movs	r2, #0
 800bf56:	9b02      	ldr	r3, [sp, #8]
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	b01c      	add	sp, #112	@ 0x70
 800bf5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf60:	b003      	add	sp, #12
 800bf62:	4770      	bx	lr
 800bf64:	200008c4 	.word	0x200008c4
 800bf68:	ffff0208 	.word	0xffff0208

0800bf6c <memset>:
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	4402      	add	r2, r0
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d100      	bne.n	800bf76 <memset+0xa>
 800bf74:	4770      	bx	lr
 800bf76:	f803 1b01 	strb.w	r1, [r3], #1
 800bf7a:	e7f9      	b.n	800bf70 <memset+0x4>

0800bf7c <_reclaim_reent>:
 800bf7c:	4b29      	ldr	r3, [pc, #164]	@ (800c024 <_reclaim_reent+0xa8>)
 800bf7e:	b570      	push	{r4, r5, r6, lr}
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4604      	mov	r4, r0
 800bf84:	4283      	cmp	r3, r0
 800bf86:	d04b      	beq.n	800c020 <_reclaim_reent+0xa4>
 800bf88:	69c3      	ldr	r3, [r0, #28]
 800bf8a:	b1ab      	cbz	r3, 800bfb8 <_reclaim_reent+0x3c>
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	b16b      	cbz	r3, 800bfac <_reclaim_reent+0x30>
 800bf90:	2500      	movs	r5, #0
 800bf92:	69e3      	ldr	r3, [r4, #28]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	5959      	ldr	r1, [r3, r5]
 800bf98:	2900      	cmp	r1, #0
 800bf9a:	d13b      	bne.n	800c014 <_reclaim_reent+0x98>
 800bf9c:	3504      	adds	r5, #4
 800bf9e:	2d80      	cmp	r5, #128	@ 0x80
 800bfa0:	d1f7      	bne.n	800bf92 <_reclaim_reent+0x16>
 800bfa2:	69e3      	ldr	r3, [r4, #28]
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	68d9      	ldr	r1, [r3, #12]
 800bfa8:	f000 f878 	bl	800c09c <_free_r>
 800bfac:	69e3      	ldr	r3, [r4, #28]
 800bfae:	6819      	ldr	r1, [r3, #0]
 800bfb0:	b111      	cbz	r1, 800bfb8 <_reclaim_reent+0x3c>
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f000 f872 	bl	800c09c <_free_r>
 800bfb8:	6961      	ldr	r1, [r4, #20]
 800bfba:	b111      	cbz	r1, 800bfc2 <_reclaim_reent+0x46>
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f000 f86d 	bl	800c09c <_free_r>
 800bfc2:	69e1      	ldr	r1, [r4, #28]
 800bfc4:	b111      	cbz	r1, 800bfcc <_reclaim_reent+0x50>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 f868 	bl	800c09c <_free_r>
 800bfcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bfce:	b111      	cbz	r1, 800bfd6 <_reclaim_reent+0x5a>
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f000 f863 	bl	800c09c <_free_r>
 800bfd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfd8:	b111      	cbz	r1, 800bfe0 <_reclaim_reent+0x64>
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f000 f85e 	bl	800c09c <_free_r>
 800bfe0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bfe2:	b111      	cbz	r1, 800bfea <_reclaim_reent+0x6e>
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 f859 	bl	800c09c <_free_r>
 800bfea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bfec:	b111      	cbz	r1, 800bff4 <_reclaim_reent+0x78>
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 f854 	bl	800c09c <_free_r>
 800bff4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bff6:	b111      	cbz	r1, 800bffe <_reclaim_reent+0x82>
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 f84f 	bl	800c09c <_free_r>
 800bffe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c000:	b111      	cbz	r1, 800c008 <_reclaim_reent+0x8c>
 800c002:	4620      	mov	r0, r4
 800c004:	f000 f84a 	bl	800c09c <_free_r>
 800c008:	6a23      	ldr	r3, [r4, #32]
 800c00a:	b14b      	cbz	r3, 800c020 <_reclaim_reent+0xa4>
 800c00c:	4620      	mov	r0, r4
 800c00e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c012:	4718      	bx	r3
 800c014:	680e      	ldr	r6, [r1, #0]
 800c016:	4620      	mov	r0, r4
 800c018:	f000 f840 	bl	800c09c <_free_r>
 800c01c:	4631      	mov	r1, r6
 800c01e:	e7bb      	b.n	800bf98 <_reclaim_reent+0x1c>
 800c020:	bd70      	pop	{r4, r5, r6, pc}
 800c022:	bf00      	nop
 800c024:	200008c4 	.word	0x200008c4

0800c028 <__errno>:
 800c028:	4b01      	ldr	r3, [pc, #4]	@ (800c030 <__errno+0x8>)
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	200008c4 	.word	0x200008c4

0800c034 <__libc_init_array>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	2600      	movs	r6, #0
 800c038:	4d0c      	ldr	r5, [pc, #48]	@ (800c06c <__libc_init_array+0x38>)
 800c03a:	4c0d      	ldr	r4, [pc, #52]	@ (800c070 <__libc_init_array+0x3c>)
 800c03c:	1b64      	subs	r4, r4, r5
 800c03e:	10a4      	asrs	r4, r4, #2
 800c040:	42a6      	cmp	r6, r4
 800c042:	d109      	bne.n	800c058 <__libc_init_array+0x24>
 800c044:	f001 fb1e 	bl	800d684 <_init>
 800c048:	2600      	movs	r6, #0
 800c04a:	4d0a      	ldr	r5, [pc, #40]	@ (800c074 <__libc_init_array+0x40>)
 800c04c:	4c0a      	ldr	r4, [pc, #40]	@ (800c078 <__libc_init_array+0x44>)
 800c04e:	1b64      	subs	r4, r4, r5
 800c050:	10a4      	asrs	r4, r4, #2
 800c052:	42a6      	cmp	r6, r4
 800c054:	d105      	bne.n	800c062 <__libc_init_array+0x2e>
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05c:	4798      	blx	r3
 800c05e:	3601      	adds	r6, #1
 800c060:	e7ee      	b.n	800c040 <__libc_init_array+0xc>
 800c062:	f855 3b04 	ldr.w	r3, [r5], #4
 800c066:	4798      	blx	r3
 800c068:	3601      	adds	r6, #1
 800c06a:	e7f2      	b.n	800c052 <__libc_init_array+0x1e>
 800c06c:	0800e358 	.word	0x0800e358
 800c070:	0800e358 	.word	0x0800e358
 800c074:	0800e358 	.word	0x0800e358
 800c078:	0800e35c 	.word	0x0800e35c

0800c07c <__retarget_lock_acquire_recursive>:
 800c07c:	4770      	bx	lr

0800c07e <__retarget_lock_release_recursive>:
 800c07e:	4770      	bx	lr

0800c080 <memcpy>:
 800c080:	440a      	add	r2, r1
 800c082:	4291      	cmp	r1, r2
 800c084:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c088:	d100      	bne.n	800c08c <memcpy+0xc>
 800c08a:	4770      	bx	lr
 800c08c:	b510      	push	{r4, lr}
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	4291      	cmp	r1, r2
 800c094:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c098:	d1f9      	bne.n	800c08e <memcpy+0xe>
 800c09a:	bd10      	pop	{r4, pc}

0800c09c <_free_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4605      	mov	r5, r0
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d040      	beq.n	800c126 <_free_r+0x8a>
 800c0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a8:	1f0c      	subs	r4, r1, #4
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	bfb8      	it	lt
 800c0ae:	18e4      	addlt	r4, r4, r3
 800c0b0:	f000 f8de 	bl	800c270 <__malloc_lock>
 800c0b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c128 <_free_r+0x8c>)
 800c0b6:	6813      	ldr	r3, [r2, #0]
 800c0b8:	b933      	cbnz	r3, 800c0c8 <_free_r+0x2c>
 800c0ba:	6063      	str	r3, [r4, #4]
 800c0bc:	6014      	str	r4, [r2, #0]
 800c0be:	4628      	mov	r0, r5
 800c0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c4:	f000 b8da 	b.w	800c27c <__malloc_unlock>
 800c0c8:	42a3      	cmp	r3, r4
 800c0ca:	d908      	bls.n	800c0de <_free_r+0x42>
 800c0cc:	6820      	ldr	r0, [r4, #0]
 800c0ce:	1821      	adds	r1, r4, r0
 800c0d0:	428b      	cmp	r3, r1
 800c0d2:	bf01      	itttt	eq
 800c0d4:	6819      	ldreq	r1, [r3, #0]
 800c0d6:	685b      	ldreq	r3, [r3, #4]
 800c0d8:	1809      	addeq	r1, r1, r0
 800c0da:	6021      	streq	r1, [r4, #0]
 800c0dc:	e7ed      	b.n	800c0ba <_free_r+0x1e>
 800c0de:	461a      	mov	r2, r3
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	b10b      	cbz	r3, 800c0e8 <_free_r+0x4c>
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	d9fa      	bls.n	800c0de <_free_r+0x42>
 800c0e8:	6811      	ldr	r1, [r2, #0]
 800c0ea:	1850      	adds	r0, r2, r1
 800c0ec:	42a0      	cmp	r0, r4
 800c0ee:	d10b      	bne.n	800c108 <_free_r+0x6c>
 800c0f0:	6820      	ldr	r0, [r4, #0]
 800c0f2:	4401      	add	r1, r0
 800c0f4:	1850      	adds	r0, r2, r1
 800c0f6:	4283      	cmp	r3, r0
 800c0f8:	6011      	str	r1, [r2, #0]
 800c0fa:	d1e0      	bne.n	800c0be <_free_r+0x22>
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	4408      	add	r0, r1
 800c102:	6010      	str	r0, [r2, #0]
 800c104:	6053      	str	r3, [r2, #4]
 800c106:	e7da      	b.n	800c0be <_free_r+0x22>
 800c108:	d902      	bls.n	800c110 <_free_r+0x74>
 800c10a:	230c      	movs	r3, #12
 800c10c:	602b      	str	r3, [r5, #0]
 800c10e:	e7d6      	b.n	800c0be <_free_r+0x22>
 800c110:	6820      	ldr	r0, [r4, #0]
 800c112:	1821      	adds	r1, r4, r0
 800c114:	428b      	cmp	r3, r1
 800c116:	bf01      	itttt	eq
 800c118:	6819      	ldreq	r1, [r3, #0]
 800c11a:	685b      	ldreq	r3, [r3, #4]
 800c11c:	1809      	addeq	r1, r1, r0
 800c11e:	6021      	streq	r1, [r4, #0]
 800c120:	6063      	str	r3, [r4, #4]
 800c122:	6054      	str	r4, [r2, #4]
 800c124:	e7cb      	b.n	800c0be <_free_r+0x22>
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	20003984 	.word	0x20003984

0800c12c <sbrk_aligned>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	4e0f      	ldr	r6, [pc, #60]	@ (800c16c <sbrk_aligned+0x40>)
 800c130:	460c      	mov	r4, r1
 800c132:	6831      	ldr	r1, [r6, #0]
 800c134:	4605      	mov	r5, r0
 800c136:	b911      	cbnz	r1, 800c13e <sbrk_aligned+0x12>
 800c138:	f000 fbaa 	bl	800c890 <_sbrk_r>
 800c13c:	6030      	str	r0, [r6, #0]
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f000 fba5 	bl	800c890 <_sbrk_r>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	d103      	bne.n	800c152 <sbrk_aligned+0x26>
 800c14a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c14e:	4620      	mov	r0, r4
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	1cc4      	adds	r4, r0, #3
 800c154:	f024 0403 	bic.w	r4, r4, #3
 800c158:	42a0      	cmp	r0, r4
 800c15a:	d0f8      	beq.n	800c14e <sbrk_aligned+0x22>
 800c15c:	1a21      	subs	r1, r4, r0
 800c15e:	4628      	mov	r0, r5
 800c160:	f000 fb96 	bl	800c890 <_sbrk_r>
 800c164:	3001      	adds	r0, #1
 800c166:	d1f2      	bne.n	800c14e <sbrk_aligned+0x22>
 800c168:	e7ef      	b.n	800c14a <sbrk_aligned+0x1e>
 800c16a:	bf00      	nop
 800c16c:	20003980 	.word	0x20003980

0800c170 <_malloc_r>:
 800c170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c174:	1ccd      	adds	r5, r1, #3
 800c176:	f025 0503 	bic.w	r5, r5, #3
 800c17a:	3508      	adds	r5, #8
 800c17c:	2d0c      	cmp	r5, #12
 800c17e:	bf38      	it	cc
 800c180:	250c      	movcc	r5, #12
 800c182:	2d00      	cmp	r5, #0
 800c184:	4606      	mov	r6, r0
 800c186:	db01      	blt.n	800c18c <_malloc_r+0x1c>
 800c188:	42a9      	cmp	r1, r5
 800c18a:	d904      	bls.n	800c196 <_malloc_r+0x26>
 800c18c:	230c      	movs	r3, #12
 800c18e:	6033      	str	r3, [r6, #0]
 800c190:	2000      	movs	r0, #0
 800c192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c26c <_malloc_r+0xfc>
 800c19a:	f000 f869 	bl	800c270 <__malloc_lock>
 800c19e:	f8d8 3000 	ldr.w	r3, [r8]
 800c1a2:	461c      	mov	r4, r3
 800c1a4:	bb44      	cbnz	r4, 800c1f8 <_malloc_r+0x88>
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff ffbf 	bl	800c12c <sbrk_aligned>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	d158      	bne.n	800c266 <_malloc_r+0xf6>
 800c1b4:	f8d8 4000 	ldr.w	r4, [r8]
 800c1b8:	4627      	mov	r7, r4
 800c1ba:	2f00      	cmp	r7, #0
 800c1bc:	d143      	bne.n	800c246 <_malloc_r+0xd6>
 800c1be:	2c00      	cmp	r4, #0
 800c1c0:	d04b      	beq.n	800c25a <_malloc_r+0xea>
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	eb04 0903 	add.w	r9, r4, r3
 800c1cc:	f000 fb60 	bl	800c890 <_sbrk_r>
 800c1d0:	4581      	cmp	r9, r0
 800c1d2:	d142      	bne.n	800c25a <_malloc_r+0xea>
 800c1d4:	6821      	ldr	r1, [r4, #0]
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	1a6d      	subs	r5, r5, r1
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7ff ffa6 	bl	800c12c <sbrk_aligned>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d03a      	beq.n	800c25a <_malloc_r+0xea>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	442b      	add	r3, r5
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c1ee:	685a      	ldr	r2, [r3, #4]
 800c1f0:	bb62      	cbnz	r2, 800c24c <_malloc_r+0xdc>
 800c1f2:	f8c8 7000 	str.w	r7, [r8]
 800c1f6:	e00f      	b.n	800c218 <_malloc_r+0xa8>
 800c1f8:	6822      	ldr	r2, [r4, #0]
 800c1fa:	1b52      	subs	r2, r2, r5
 800c1fc:	d420      	bmi.n	800c240 <_malloc_r+0xd0>
 800c1fe:	2a0b      	cmp	r2, #11
 800c200:	d917      	bls.n	800c232 <_malloc_r+0xc2>
 800c202:	1961      	adds	r1, r4, r5
 800c204:	42a3      	cmp	r3, r4
 800c206:	6025      	str	r5, [r4, #0]
 800c208:	bf18      	it	ne
 800c20a:	6059      	strne	r1, [r3, #4]
 800c20c:	6863      	ldr	r3, [r4, #4]
 800c20e:	bf08      	it	eq
 800c210:	f8c8 1000 	streq.w	r1, [r8]
 800c214:	5162      	str	r2, [r4, r5]
 800c216:	604b      	str	r3, [r1, #4]
 800c218:	4630      	mov	r0, r6
 800c21a:	f000 f82f 	bl	800c27c <__malloc_unlock>
 800c21e:	f104 000b 	add.w	r0, r4, #11
 800c222:	1d23      	adds	r3, r4, #4
 800c224:	f020 0007 	bic.w	r0, r0, #7
 800c228:	1ac2      	subs	r2, r0, r3
 800c22a:	bf1c      	itt	ne
 800c22c:	1a1b      	subne	r3, r3, r0
 800c22e:	50a3      	strne	r3, [r4, r2]
 800c230:	e7af      	b.n	800c192 <_malloc_r+0x22>
 800c232:	6862      	ldr	r2, [r4, #4]
 800c234:	42a3      	cmp	r3, r4
 800c236:	bf0c      	ite	eq
 800c238:	f8c8 2000 	streq.w	r2, [r8]
 800c23c:	605a      	strne	r2, [r3, #4]
 800c23e:	e7eb      	b.n	800c218 <_malloc_r+0xa8>
 800c240:	4623      	mov	r3, r4
 800c242:	6864      	ldr	r4, [r4, #4]
 800c244:	e7ae      	b.n	800c1a4 <_malloc_r+0x34>
 800c246:	463c      	mov	r4, r7
 800c248:	687f      	ldr	r7, [r7, #4]
 800c24a:	e7b6      	b.n	800c1ba <_malloc_r+0x4a>
 800c24c:	461a      	mov	r2, r3
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	42a3      	cmp	r3, r4
 800c252:	d1fb      	bne.n	800c24c <_malloc_r+0xdc>
 800c254:	2300      	movs	r3, #0
 800c256:	6053      	str	r3, [r2, #4]
 800c258:	e7de      	b.n	800c218 <_malloc_r+0xa8>
 800c25a:	230c      	movs	r3, #12
 800c25c:	4630      	mov	r0, r6
 800c25e:	6033      	str	r3, [r6, #0]
 800c260:	f000 f80c 	bl	800c27c <__malloc_unlock>
 800c264:	e794      	b.n	800c190 <_malloc_r+0x20>
 800c266:	6005      	str	r5, [r0, #0]
 800c268:	e7d6      	b.n	800c218 <_malloc_r+0xa8>
 800c26a:	bf00      	nop
 800c26c:	20003984 	.word	0x20003984

0800c270 <__malloc_lock>:
 800c270:	4801      	ldr	r0, [pc, #4]	@ (800c278 <__malloc_lock+0x8>)
 800c272:	f7ff bf03 	b.w	800c07c <__retarget_lock_acquire_recursive>
 800c276:	bf00      	nop
 800c278:	2000397c 	.word	0x2000397c

0800c27c <__malloc_unlock>:
 800c27c:	4801      	ldr	r0, [pc, #4]	@ (800c284 <__malloc_unlock+0x8>)
 800c27e:	f7ff befe 	b.w	800c07e <__retarget_lock_release_recursive>
 800c282:	bf00      	nop
 800c284:	2000397c 	.word	0x2000397c

0800c288 <__ssputs_r>:
 800c288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c28c:	461f      	mov	r7, r3
 800c28e:	688e      	ldr	r6, [r1, #8]
 800c290:	4682      	mov	sl, r0
 800c292:	42be      	cmp	r6, r7
 800c294:	460c      	mov	r4, r1
 800c296:	4690      	mov	r8, r2
 800c298:	680b      	ldr	r3, [r1, #0]
 800c29a:	d82d      	bhi.n	800c2f8 <__ssputs_r+0x70>
 800c29c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2a4:	d026      	beq.n	800c2f4 <__ssputs_r+0x6c>
 800c2a6:	6965      	ldr	r5, [r4, #20]
 800c2a8:	6909      	ldr	r1, [r1, #16]
 800c2aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2ae:	eba3 0901 	sub.w	r9, r3, r1
 800c2b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2b6:	1c7b      	adds	r3, r7, #1
 800c2b8:	444b      	add	r3, r9
 800c2ba:	106d      	asrs	r5, r5, #1
 800c2bc:	429d      	cmp	r5, r3
 800c2be:	bf38      	it	cc
 800c2c0:	461d      	movcc	r5, r3
 800c2c2:	0553      	lsls	r3, r2, #21
 800c2c4:	d527      	bpl.n	800c316 <__ssputs_r+0x8e>
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7ff ff52 	bl	800c170 <_malloc_r>
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	b360      	cbz	r0, 800c32a <__ssputs_r+0xa2>
 800c2d0:	464a      	mov	r2, r9
 800c2d2:	6921      	ldr	r1, [r4, #16]
 800c2d4:	f7ff fed4 	bl	800c080 <memcpy>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	6126      	str	r6, [r4, #16]
 800c2e6:	444e      	add	r6, r9
 800c2e8:	6026      	str	r6, [r4, #0]
 800c2ea:	463e      	mov	r6, r7
 800c2ec:	6165      	str	r5, [r4, #20]
 800c2ee:	eba5 0509 	sub.w	r5, r5, r9
 800c2f2:	60a5      	str	r5, [r4, #8]
 800c2f4:	42be      	cmp	r6, r7
 800c2f6:	d900      	bls.n	800c2fa <__ssputs_r+0x72>
 800c2f8:	463e      	mov	r6, r7
 800c2fa:	4632      	mov	r2, r6
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	6820      	ldr	r0, [r4, #0]
 800c300:	f000 faac 	bl	800c85c <memmove>
 800c304:	2000      	movs	r0, #0
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	1b9b      	subs	r3, r3, r6
 800c30a:	60a3      	str	r3, [r4, #8]
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	4433      	add	r3, r6
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c316:	462a      	mov	r2, r5
 800c318:	f000 fad8 	bl	800c8cc <_realloc_r>
 800c31c:	4606      	mov	r6, r0
 800c31e:	2800      	cmp	r0, #0
 800c320:	d1e0      	bne.n	800c2e4 <__ssputs_r+0x5c>
 800c322:	4650      	mov	r0, sl
 800c324:	6921      	ldr	r1, [r4, #16]
 800c326:	f7ff feb9 	bl	800c09c <_free_r>
 800c32a:	230c      	movs	r3, #12
 800c32c:	f8ca 3000 	str.w	r3, [sl]
 800c330:	89a3      	ldrh	r3, [r4, #12]
 800c332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c33a:	81a3      	strh	r3, [r4, #12]
 800c33c:	e7e9      	b.n	800c312 <__ssputs_r+0x8a>
	...

0800c340 <_svfiprintf_r>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	4698      	mov	r8, r3
 800c346:	898b      	ldrh	r3, [r1, #12]
 800c348:	4607      	mov	r7, r0
 800c34a:	061b      	lsls	r3, r3, #24
 800c34c:	460d      	mov	r5, r1
 800c34e:	4614      	mov	r4, r2
 800c350:	b09d      	sub	sp, #116	@ 0x74
 800c352:	d510      	bpl.n	800c376 <_svfiprintf_r+0x36>
 800c354:	690b      	ldr	r3, [r1, #16]
 800c356:	b973      	cbnz	r3, 800c376 <_svfiprintf_r+0x36>
 800c358:	2140      	movs	r1, #64	@ 0x40
 800c35a:	f7ff ff09 	bl	800c170 <_malloc_r>
 800c35e:	6028      	str	r0, [r5, #0]
 800c360:	6128      	str	r0, [r5, #16]
 800c362:	b930      	cbnz	r0, 800c372 <_svfiprintf_r+0x32>
 800c364:	230c      	movs	r3, #12
 800c366:	603b      	str	r3, [r7, #0]
 800c368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c36c:	b01d      	add	sp, #116	@ 0x74
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c372:	2340      	movs	r3, #64	@ 0x40
 800c374:	616b      	str	r3, [r5, #20]
 800c376:	2300      	movs	r3, #0
 800c378:	9309      	str	r3, [sp, #36]	@ 0x24
 800c37a:	2320      	movs	r3, #32
 800c37c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c380:	2330      	movs	r3, #48	@ 0x30
 800c382:	f04f 0901 	mov.w	r9, #1
 800c386:	f8cd 800c 	str.w	r8, [sp, #12]
 800c38a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c524 <_svfiprintf_r+0x1e4>
 800c38e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c392:	4623      	mov	r3, r4
 800c394:	469a      	mov	sl, r3
 800c396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c39a:	b10a      	cbz	r2, 800c3a0 <_svfiprintf_r+0x60>
 800c39c:	2a25      	cmp	r2, #37	@ 0x25
 800c39e:	d1f9      	bne.n	800c394 <_svfiprintf_r+0x54>
 800c3a0:	ebba 0b04 	subs.w	fp, sl, r4
 800c3a4:	d00b      	beq.n	800c3be <_svfiprintf_r+0x7e>
 800c3a6:	465b      	mov	r3, fp
 800c3a8:	4622      	mov	r2, r4
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f7ff ff6b 	bl	800c288 <__ssputs_r>
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	f000 80a7 	beq.w	800c506 <_svfiprintf_r+0x1c6>
 800c3b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3ba:	445a      	add	r2, fp
 800c3bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3be:	f89a 3000 	ldrb.w	r3, [sl]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 809f 	beq.w	800c506 <_svfiprintf_r+0x1c6>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3d2:	f10a 0a01 	add.w	sl, sl, #1
 800c3d6:	9304      	str	r3, [sp, #16]
 800c3d8:	9307      	str	r3, [sp, #28]
 800c3da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3de:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3e0:	4654      	mov	r4, sl
 800c3e2:	2205      	movs	r2, #5
 800c3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e8:	484e      	ldr	r0, [pc, #312]	@ (800c524 <_svfiprintf_r+0x1e4>)
 800c3ea:	f000 fa61 	bl	800c8b0 <memchr>
 800c3ee:	9a04      	ldr	r2, [sp, #16]
 800c3f0:	b9d8      	cbnz	r0, 800c42a <_svfiprintf_r+0xea>
 800c3f2:	06d0      	lsls	r0, r2, #27
 800c3f4:	bf44      	itt	mi
 800c3f6:	2320      	movmi	r3, #32
 800c3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3fc:	0711      	lsls	r1, r2, #28
 800c3fe:	bf44      	itt	mi
 800c400:	232b      	movmi	r3, #43	@ 0x2b
 800c402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c406:	f89a 3000 	ldrb.w	r3, [sl]
 800c40a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c40c:	d015      	beq.n	800c43a <_svfiprintf_r+0xfa>
 800c40e:	4654      	mov	r4, sl
 800c410:	2000      	movs	r0, #0
 800c412:	f04f 0c0a 	mov.w	ip, #10
 800c416:	9a07      	ldr	r2, [sp, #28]
 800c418:	4621      	mov	r1, r4
 800c41a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c41e:	3b30      	subs	r3, #48	@ 0x30
 800c420:	2b09      	cmp	r3, #9
 800c422:	d94b      	bls.n	800c4bc <_svfiprintf_r+0x17c>
 800c424:	b1b0      	cbz	r0, 800c454 <_svfiprintf_r+0x114>
 800c426:	9207      	str	r2, [sp, #28]
 800c428:	e014      	b.n	800c454 <_svfiprintf_r+0x114>
 800c42a:	eba0 0308 	sub.w	r3, r0, r8
 800c42e:	fa09 f303 	lsl.w	r3, r9, r3
 800c432:	4313      	orrs	r3, r2
 800c434:	46a2      	mov	sl, r4
 800c436:	9304      	str	r3, [sp, #16]
 800c438:	e7d2      	b.n	800c3e0 <_svfiprintf_r+0xa0>
 800c43a:	9b03      	ldr	r3, [sp, #12]
 800c43c:	1d19      	adds	r1, r3, #4
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	9103      	str	r1, [sp, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	bfbb      	ittet	lt
 800c446:	425b      	neglt	r3, r3
 800c448:	f042 0202 	orrlt.w	r2, r2, #2
 800c44c:	9307      	strge	r3, [sp, #28]
 800c44e:	9307      	strlt	r3, [sp, #28]
 800c450:	bfb8      	it	lt
 800c452:	9204      	strlt	r2, [sp, #16]
 800c454:	7823      	ldrb	r3, [r4, #0]
 800c456:	2b2e      	cmp	r3, #46	@ 0x2e
 800c458:	d10a      	bne.n	800c470 <_svfiprintf_r+0x130>
 800c45a:	7863      	ldrb	r3, [r4, #1]
 800c45c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c45e:	d132      	bne.n	800c4c6 <_svfiprintf_r+0x186>
 800c460:	9b03      	ldr	r3, [sp, #12]
 800c462:	3402      	adds	r4, #2
 800c464:	1d1a      	adds	r2, r3, #4
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	9203      	str	r2, [sp, #12]
 800c46a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c46e:	9305      	str	r3, [sp, #20]
 800c470:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c528 <_svfiprintf_r+0x1e8>
 800c474:	2203      	movs	r2, #3
 800c476:	4650      	mov	r0, sl
 800c478:	7821      	ldrb	r1, [r4, #0]
 800c47a:	f000 fa19 	bl	800c8b0 <memchr>
 800c47e:	b138      	cbz	r0, 800c490 <_svfiprintf_r+0x150>
 800c480:	2240      	movs	r2, #64	@ 0x40
 800c482:	9b04      	ldr	r3, [sp, #16]
 800c484:	eba0 000a 	sub.w	r0, r0, sl
 800c488:	4082      	lsls	r2, r0
 800c48a:	4313      	orrs	r3, r2
 800c48c:	3401      	adds	r4, #1
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c494:	2206      	movs	r2, #6
 800c496:	4825      	ldr	r0, [pc, #148]	@ (800c52c <_svfiprintf_r+0x1ec>)
 800c498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c49c:	f000 fa08 	bl	800c8b0 <memchr>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d036      	beq.n	800c512 <_svfiprintf_r+0x1d2>
 800c4a4:	4b22      	ldr	r3, [pc, #136]	@ (800c530 <_svfiprintf_r+0x1f0>)
 800c4a6:	bb1b      	cbnz	r3, 800c4f0 <_svfiprintf_r+0x1b0>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	3307      	adds	r3, #7
 800c4ac:	f023 0307 	bic.w	r3, r3, #7
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	9303      	str	r3, [sp, #12]
 800c4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b6:	4433      	add	r3, r6
 800c4b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ba:	e76a      	b.n	800c392 <_svfiprintf_r+0x52>
 800c4bc:	460c      	mov	r4, r1
 800c4be:	2001      	movs	r0, #1
 800c4c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4c4:	e7a8      	b.n	800c418 <_svfiprintf_r+0xd8>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	f04f 0c0a 	mov.w	ip, #10
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	3401      	adds	r4, #1
 800c4d0:	9305      	str	r3, [sp, #20]
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4d8:	3a30      	subs	r2, #48	@ 0x30
 800c4da:	2a09      	cmp	r2, #9
 800c4dc:	d903      	bls.n	800c4e6 <_svfiprintf_r+0x1a6>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0c6      	beq.n	800c470 <_svfiprintf_r+0x130>
 800c4e2:	9105      	str	r1, [sp, #20]
 800c4e4:	e7c4      	b.n	800c470 <_svfiprintf_r+0x130>
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ee:	e7f0      	b.n	800c4d2 <_svfiprintf_r+0x192>
 800c4f0:	ab03      	add	r3, sp, #12
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	462a      	mov	r2, r5
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <_svfiprintf_r+0x1f4>)
 800c4fa:	a904      	add	r1, sp, #16
 800c4fc:	f3af 8000 	nop.w
 800c500:	1c42      	adds	r2, r0, #1
 800c502:	4606      	mov	r6, r0
 800c504:	d1d6      	bne.n	800c4b4 <_svfiprintf_r+0x174>
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	065b      	lsls	r3, r3, #25
 800c50a:	f53f af2d 	bmi.w	800c368 <_svfiprintf_r+0x28>
 800c50e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c510:	e72c      	b.n	800c36c <_svfiprintf_r+0x2c>
 800c512:	ab03      	add	r3, sp, #12
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	462a      	mov	r2, r5
 800c518:	4638      	mov	r0, r7
 800c51a:	4b06      	ldr	r3, [pc, #24]	@ (800c534 <_svfiprintf_r+0x1f4>)
 800c51c:	a904      	add	r1, sp, #16
 800c51e:	f000 f87d 	bl	800c61c <_printf_i>
 800c522:	e7ed      	b.n	800c500 <_svfiprintf_r+0x1c0>
 800c524:	0800df4a 	.word	0x0800df4a
 800c528:	0800df50 	.word	0x0800df50
 800c52c:	0800df54 	.word	0x0800df54
 800c530:	00000000 	.word	0x00000000
 800c534:	0800c289 	.word	0x0800c289

0800c538 <_printf_common>:
 800c538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c53c:	4616      	mov	r6, r2
 800c53e:	4698      	mov	r8, r3
 800c540:	688a      	ldr	r2, [r1, #8]
 800c542:	690b      	ldr	r3, [r1, #16]
 800c544:	4607      	mov	r7, r0
 800c546:	4293      	cmp	r3, r2
 800c548:	bfb8      	it	lt
 800c54a:	4613      	movlt	r3, r2
 800c54c:	6033      	str	r3, [r6, #0]
 800c54e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c552:	460c      	mov	r4, r1
 800c554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c558:	b10a      	cbz	r2, 800c55e <_printf_common+0x26>
 800c55a:	3301      	adds	r3, #1
 800c55c:	6033      	str	r3, [r6, #0]
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	0699      	lsls	r1, r3, #26
 800c562:	bf42      	ittt	mi
 800c564:	6833      	ldrmi	r3, [r6, #0]
 800c566:	3302      	addmi	r3, #2
 800c568:	6033      	strmi	r3, [r6, #0]
 800c56a:	6825      	ldr	r5, [r4, #0]
 800c56c:	f015 0506 	ands.w	r5, r5, #6
 800c570:	d106      	bne.n	800c580 <_printf_common+0x48>
 800c572:	f104 0a19 	add.w	sl, r4, #25
 800c576:	68e3      	ldr	r3, [r4, #12]
 800c578:	6832      	ldr	r2, [r6, #0]
 800c57a:	1a9b      	subs	r3, r3, r2
 800c57c:	42ab      	cmp	r3, r5
 800c57e:	dc2b      	bgt.n	800c5d8 <_printf_common+0xa0>
 800c580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c584:	6822      	ldr	r2, [r4, #0]
 800c586:	3b00      	subs	r3, #0
 800c588:	bf18      	it	ne
 800c58a:	2301      	movne	r3, #1
 800c58c:	0692      	lsls	r2, r2, #26
 800c58e:	d430      	bmi.n	800c5f2 <_printf_common+0xba>
 800c590:	4641      	mov	r1, r8
 800c592:	4638      	mov	r0, r7
 800c594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c598:	47c8      	blx	r9
 800c59a:	3001      	adds	r0, #1
 800c59c:	d023      	beq.n	800c5e6 <_printf_common+0xae>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	6922      	ldr	r2, [r4, #16]
 800c5a2:	f003 0306 	and.w	r3, r3, #6
 800c5a6:	2b04      	cmp	r3, #4
 800c5a8:	bf14      	ite	ne
 800c5aa:	2500      	movne	r5, #0
 800c5ac:	6833      	ldreq	r3, [r6, #0]
 800c5ae:	f04f 0600 	mov.w	r6, #0
 800c5b2:	bf08      	it	eq
 800c5b4:	68e5      	ldreq	r5, [r4, #12]
 800c5b6:	f104 041a 	add.w	r4, r4, #26
 800c5ba:	bf08      	it	eq
 800c5bc:	1aed      	subeq	r5, r5, r3
 800c5be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c5c2:	bf08      	it	eq
 800c5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	bfc4      	itt	gt
 800c5cc:	1a9b      	subgt	r3, r3, r2
 800c5ce:	18ed      	addgt	r5, r5, r3
 800c5d0:	42b5      	cmp	r5, r6
 800c5d2:	d11a      	bne.n	800c60a <_printf_common+0xd2>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e008      	b.n	800c5ea <_printf_common+0xb2>
 800c5d8:	2301      	movs	r3, #1
 800c5da:	4652      	mov	r2, sl
 800c5dc:	4641      	mov	r1, r8
 800c5de:	4638      	mov	r0, r7
 800c5e0:	47c8      	blx	r9
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d103      	bne.n	800c5ee <_printf_common+0xb6>
 800c5e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ee:	3501      	adds	r5, #1
 800c5f0:	e7c1      	b.n	800c576 <_printf_common+0x3e>
 800c5f2:	2030      	movs	r0, #48	@ 0x30
 800c5f4:	18e1      	adds	r1, r4, r3
 800c5f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c600:	4422      	add	r2, r4
 800c602:	3302      	adds	r3, #2
 800c604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c608:	e7c2      	b.n	800c590 <_printf_common+0x58>
 800c60a:	2301      	movs	r3, #1
 800c60c:	4622      	mov	r2, r4
 800c60e:	4641      	mov	r1, r8
 800c610:	4638      	mov	r0, r7
 800c612:	47c8      	blx	r9
 800c614:	3001      	adds	r0, #1
 800c616:	d0e6      	beq.n	800c5e6 <_printf_common+0xae>
 800c618:	3601      	adds	r6, #1
 800c61a:	e7d9      	b.n	800c5d0 <_printf_common+0x98>

0800c61c <_printf_i>:
 800c61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	7e0f      	ldrb	r7, [r1, #24]
 800c622:	4691      	mov	r9, r2
 800c624:	2f78      	cmp	r7, #120	@ 0x78
 800c626:	4680      	mov	r8, r0
 800c628:	460c      	mov	r4, r1
 800c62a:	469a      	mov	sl, r3
 800c62c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c62e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c632:	d807      	bhi.n	800c644 <_printf_i+0x28>
 800c634:	2f62      	cmp	r7, #98	@ 0x62
 800c636:	d80a      	bhi.n	800c64e <_printf_i+0x32>
 800c638:	2f00      	cmp	r7, #0
 800c63a:	f000 80d3 	beq.w	800c7e4 <_printf_i+0x1c8>
 800c63e:	2f58      	cmp	r7, #88	@ 0x58
 800c640:	f000 80ba 	beq.w	800c7b8 <_printf_i+0x19c>
 800c644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c648:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c64c:	e03a      	b.n	800c6c4 <_printf_i+0xa8>
 800c64e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c652:	2b15      	cmp	r3, #21
 800c654:	d8f6      	bhi.n	800c644 <_printf_i+0x28>
 800c656:	a101      	add	r1, pc, #4	@ (adr r1, 800c65c <_printf_i+0x40>)
 800c658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c65c:	0800c6b5 	.word	0x0800c6b5
 800c660:	0800c6c9 	.word	0x0800c6c9
 800c664:	0800c645 	.word	0x0800c645
 800c668:	0800c645 	.word	0x0800c645
 800c66c:	0800c645 	.word	0x0800c645
 800c670:	0800c645 	.word	0x0800c645
 800c674:	0800c6c9 	.word	0x0800c6c9
 800c678:	0800c645 	.word	0x0800c645
 800c67c:	0800c645 	.word	0x0800c645
 800c680:	0800c645 	.word	0x0800c645
 800c684:	0800c645 	.word	0x0800c645
 800c688:	0800c7cb 	.word	0x0800c7cb
 800c68c:	0800c6f3 	.word	0x0800c6f3
 800c690:	0800c785 	.word	0x0800c785
 800c694:	0800c645 	.word	0x0800c645
 800c698:	0800c645 	.word	0x0800c645
 800c69c:	0800c7ed 	.word	0x0800c7ed
 800c6a0:	0800c645 	.word	0x0800c645
 800c6a4:	0800c6f3 	.word	0x0800c6f3
 800c6a8:	0800c645 	.word	0x0800c645
 800c6ac:	0800c645 	.word	0x0800c645
 800c6b0:	0800c78d 	.word	0x0800c78d
 800c6b4:	6833      	ldr	r3, [r6, #0]
 800c6b6:	1d1a      	adds	r2, r3, #4
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6032      	str	r2, [r6, #0]
 800c6bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e09e      	b.n	800c806 <_printf_i+0x1ea>
 800c6c8:	6833      	ldr	r3, [r6, #0]
 800c6ca:	6820      	ldr	r0, [r4, #0]
 800c6cc:	1d19      	adds	r1, r3, #4
 800c6ce:	6031      	str	r1, [r6, #0]
 800c6d0:	0606      	lsls	r6, r0, #24
 800c6d2:	d501      	bpl.n	800c6d8 <_printf_i+0xbc>
 800c6d4:	681d      	ldr	r5, [r3, #0]
 800c6d6:	e003      	b.n	800c6e0 <_printf_i+0xc4>
 800c6d8:	0645      	lsls	r5, r0, #25
 800c6da:	d5fb      	bpl.n	800c6d4 <_printf_i+0xb8>
 800c6dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6e0:	2d00      	cmp	r5, #0
 800c6e2:	da03      	bge.n	800c6ec <_printf_i+0xd0>
 800c6e4:	232d      	movs	r3, #45	@ 0x2d
 800c6e6:	426d      	negs	r5, r5
 800c6e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6ec:	230a      	movs	r3, #10
 800c6ee:	4859      	ldr	r0, [pc, #356]	@ (800c854 <_printf_i+0x238>)
 800c6f0:	e011      	b.n	800c716 <_printf_i+0xfa>
 800c6f2:	6821      	ldr	r1, [r4, #0]
 800c6f4:	6833      	ldr	r3, [r6, #0]
 800c6f6:	0608      	lsls	r0, r1, #24
 800c6f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6fc:	d402      	bmi.n	800c704 <_printf_i+0xe8>
 800c6fe:	0649      	lsls	r1, r1, #25
 800c700:	bf48      	it	mi
 800c702:	b2ad      	uxthmi	r5, r5
 800c704:	2f6f      	cmp	r7, #111	@ 0x6f
 800c706:	6033      	str	r3, [r6, #0]
 800c708:	bf14      	ite	ne
 800c70a:	230a      	movne	r3, #10
 800c70c:	2308      	moveq	r3, #8
 800c70e:	4851      	ldr	r0, [pc, #324]	@ (800c854 <_printf_i+0x238>)
 800c710:	2100      	movs	r1, #0
 800c712:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c716:	6866      	ldr	r6, [r4, #4]
 800c718:	2e00      	cmp	r6, #0
 800c71a:	bfa8      	it	ge
 800c71c:	6821      	ldrge	r1, [r4, #0]
 800c71e:	60a6      	str	r6, [r4, #8]
 800c720:	bfa4      	itt	ge
 800c722:	f021 0104 	bicge.w	r1, r1, #4
 800c726:	6021      	strge	r1, [r4, #0]
 800c728:	b90d      	cbnz	r5, 800c72e <_printf_i+0x112>
 800c72a:	2e00      	cmp	r6, #0
 800c72c:	d04b      	beq.n	800c7c6 <_printf_i+0x1aa>
 800c72e:	4616      	mov	r6, r2
 800c730:	fbb5 f1f3 	udiv	r1, r5, r3
 800c734:	fb03 5711 	mls	r7, r3, r1, r5
 800c738:	5dc7      	ldrb	r7, [r0, r7]
 800c73a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c73e:	462f      	mov	r7, r5
 800c740:	42bb      	cmp	r3, r7
 800c742:	460d      	mov	r5, r1
 800c744:	d9f4      	bls.n	800c730 <_printf_i+0x114>
 800c746:	2b08      	cmp	r3, #8
 800c748:	d10b      	bne.n	800c762 <_printf_i+0x146>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	07df      	lsls	r7, r3, #31
 800c74e:	d508      	bpl.n	800c762 <_printf_i+0x146>
 800c750:	6923      	ldr	r3, [r4, #16]
 800c752:	6861      	ldr	r1, [r4, #4]
 800c754:	4299      	cmp	r1, r3
 800c756:	bfde      	ittt	le
 800c758:	2330      	movle	r3, #48	@ 0x30
 800c75a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c75e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c762:	1b92      	subs	r2, r2, r6
 800c764:	6122      	str	r2, [r4, #16]
 800c766:	464b      	mov	r3, r9
 800c768:	4621      	mov	r1, r4
 800c76a:	4640      	mov	r0, r8
 800c76c:	f8cd a000 	str.w	sl, [sp]
 800c770:	aa03      	add	r2, sp, #12
 800c772:	f7ff fee1 	bl	800c538 <_printf_common>
 800c776:	3001      	adds	r0, #1
 800c778:	d14a      	bne.n	800c810 <_printf_i+0x1f4>
 800c77a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c77e:	b004      	add	sp, #16
 800c780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	f043 0320 	orr.w	r3, r3, #32
 800c78a:	6023      	str	r3, [r4, #0]
 800c78c:	2778      	movs	r7, #120	@ 0x78
 800c78e:	4832      	ldr	r0, [pc, #200]	@ (800c858 <_printf_i+0x23c>)
 800c790:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	6831      	ldr	r1, [r6, #0]
 800c798:	061f      	lsls	r7, r3, #24
 800c79a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c79e:	d402      	bmi.n	800c7a6 <_printf_i+0x18a>
 800c7a0:	065f      	lsls	r7, r3, #25
 800c7a2:	bf48      	it	mi
 800c7a4:	b2ad      	uxthmi	r5, r5
 800c7a6:	6031      	str	r1, [r6, #0]
 800c7a8:	07d9      	lsls	r1, r3, #31
 800c7aa:	bf44      	itt	mi
 800c7ac:	f043 0320 	orrmi.w	r3, r3, #32
 800c7b0:	6023      	strmi	r3, [r4, #0]
 800c7b2:	b11d      	cbz	r5, 800c7bc <_printf_i+0x1a0>
 800c7b4:	2310      	movs	r3, #16
 800c7b6:	e7ab      	b.n	800c710 <_printf_i+0xf4>
 800c7b8:	4826      	ldr	r0, [pc, #152]	@ (800c854 <_printf_i+0x238>)
 800c7ba:	e7e9      	b.n	800c790 <_printf_i+0x174>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	f023 0320 	bic.w	r3, r3, #32
 800c7c2:	6023      	str	r3, [r4, #0]
 800c7c4:	e7f6      	b.n	800c7b4 <_printf_i+0x198>
 800c7c6:	4616      	mov	r6, r2
 800c7c8:	e7bd      	b.n	800c746 <_printf_i+0x12a>
 800c7ca:	6833      	ldr	r3, [r6, #0]
 800c7cc:	6825      	ldr	r5, [r4, #0]
 800c7ce:	1d18      	adds	r0, r3, #4
 800c7d0:	6961      	ldr	r1, [r4, #20]
 800c7d2:	6030      	str	r0, [r6, #0]
 800c7d4:	062e      	lsls	r6, r5, #24
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	d501      	bpl.n	800c7de <_printf_i+0x1c2>
 800c7da:	6019      	str	r1, [r3, #0]
 800c7dc:	e002      	b.n	800c7e4 <_printf_i+0x1c8>
 800c7de:	0668      	lsls	r0, r5, #25
 800c7e0:	d5fb      	bpl.n	800c7da <_printf_i+0x1be>
 800c7e2:	8019      	strh	r1, [r3, #0]
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4616      	mov	r6, r2
 800c7e8:	6123      	str	r3, [r4, #16]
 800c7ea:	e7bc      	b.n	800c766 <_printf_i+0x14a>
 800c7ec:	6833      	ldr	r3, [r6, #0]
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	1d1a      	adds	r2, r3, #4
 800c7f2:	6032      	str	r2, [r6, #0]
 800c7f4:	681e      	ldr	r6, [r3, #0]
 800c7f6:	6862      	ldr	r2, [r4, #4]
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f000 f859 	bl	800c8b0 <memchr>
 800c7fe:	b108      	cbz	r0, 800c804 <_printf_i+0x1e8>
 800c800:	1b80      	subs	r0, r0, r6
 800c802:	6060      	str	r0, [r4, #4]
 800c804:	6863      	ldr	r3, [r4, #4]
 800c806:	6123      	str	r3, [r4, #16]
 800c808:	2300      	movs	r3, #0
 800c80a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c80e:	e7aa      	b.n	800c766 <_printf_i+0x14a>
 800c810:	4632      	mov	r2, r6
 800c812:	4649      	mov	r1, r9
 800c814:	4640      	mov	r0, r8
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	47d0      	blx	sl
 800c81a:	3001      	adds	r0, #1
 800c81c:	d0ad      	beq.n	800c77a <_printf_i+0x15e>
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	079b      	lsls	r3, r3, #30
 800c822:	d413      	bmi.n	800c84c <_printf_i+0x230>
 800c824:	68e0      	ldr	r0, [r4, #12]
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	4298      	cmp	r0, r3
 800c82a:	bfb8      	it	lt
 800c82c:	4618      	movlt	r0, r3
 800c82e:	e7a6      	b.n	800c77e <_printf_i+0x162>
 800c830:	2301      	movs	r3, #1
 800c832:	4632      	mov	r2, r6
 800c834:	4649      	mov	r1, r9
 800c836:	4640      	mov	r0, r8
 800c838:	47d0      	blx	sl
 800c83a:	3001      	adds	r0, #1
 800c83c:	d09d      	beq.n	800c77a <_printf_i+0x15e>
 800c83e:	3501      	adds	r5, #1
 800c840:	68e3      	ldr	r3, [r4, #12]
 800c842:	9903      	ldr	r1, [sp, #12]
 800c844:	1a5b      	subs	r3, r3, r1
 800c846:	42ab      	cmp	r3, r5
 800c848:	dcf2      	bgt.n	800c830 <_printf_i+0x214>
 800c84a:	e7eb      	b.n	800c824 <_printf_i+0x208>
 800c84c:	2500      	movs	r5, #0
 800c84e:	f104 0619 	add.w	r6, r4, #25
 800c852:	e7f5      	b.n	800c840 <_printf_i+0x224>
 800c854:	0800df5b 	.word	0x0800df5b
 800c858:	0800df6c 	.word	0x0800df6c

0800c85c <memmove>:
 800c85c:	4288      	cmp	r0, r1
 800c85e:	b510      	push	{r4, lr}
 800c860:	eb01 0402 	add.w	r4, r1, r2
 800c864:	d902      	bls.n	800c86c <memmove+0x10>
 800c866:	4284      	cmp	r4, r0
 800c868:	4623      	mov	r3, r4
 800c86a:	d807      	bhi.n	800c87c <memmove+0x20>
 800c86c:	1e43      	subs	r3, r0, #1
 800c86e:	42a1      	cmp	r1, r4
 800c870:	d008      	beq.n	800c884 <memmove+0x28>
 800c872:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c87a:	e7f8      	b.n	800c86e <memmove+0x12>
 800c87c:	4601      	mov	r1, r0
 800c87e:	4402      	add	r2, r0
 800c880:	428a      	cmp	r2, r1
 800c882:	d100      	bne.n	800c886 <memmove+0x2a>
 800c884:	bd10      	pop	{r4, pc}
 800c886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c88a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c88e:	e7f7      	b.n	800c880 <memmove+0x24>

0800c890 <_sbrk_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	2300      	movs	r3, #0
 800c894:	4d05      	ldr	r5, [pc, #20]	@ (800c8ac <_sbrk_r+0x1c>)
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f7f7 ff14 	bl	80046c8 <_sbrk>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_sbrk_r+0x1a>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_sbrk_r+0x1a>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	20003978 	.word	0x20003978

0800c8b0 <memchr>:
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	b510      	push	{r4, lr}
 800c8b4:	b2c9      	uxtb	r1, r1
 800c8b6:	4402      	add	r2, r0
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	d101      	bne.n	800c8c2 <memchr+0x12>
 800c8be:	2000      	movs	r0, #0
 800c8c0:	e003      	b.n	800c8ca <memchr+0x1a>
 800c8c2:	7804      	ldrb	r4, [r0, #0]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	428c      	cmp	r4, r1
 800c8c8:	d1f6      	bne.n	800c8b8 <memchr+0x8>
 800c8ca:	bd10      	pop	{r4, pc}

0800c8cc <_realloc_r>:
 800c8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	4615      	mov	r5, r2
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	b921      	cbnz	r1, 800c8e2 <_realloc_r+0x16>
 800c8d8:	4611      	mov	r1, r2
 800c8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	f7ff bc47 	b.w	800c170 <_malloc_r>
 800c8e2:	b92a      	cbnz	r2, 800c8f0 <_realloc_r+0x24>
 800c8e4:	f7ff fbda 	bl	800c09c <_free_r>
 800c8e8:	2400      	movs	r4, #0
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f0:	f000 f81a 	bl	800c928 <_malloc_usable_size_r>
 800c8f4:	4285      	cmp	r5, r0
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	d802      	bhi.n	800c900 <_realloc_r+0x34>
 800c8fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8fe:	d8f4      	bhi.n	800c8ea <_realloc_r+0x1e>
 800c900:	4629      	mov	r1, r5
 800c902:	4640      	mov	r0, r8
 800c904:	f7ff fc34 	bl	800c170 <_malloc_r>
 800c908:	4607      	mov	r7, r0
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d0ec      	beq.n	800c8e8 <_realloc_r+0x1c>
 800c90e:	42b5      	cmp	r5, r6
 800c910:	462a      	mov	r2, r5
 800c912:	4621      	mov	r1, r4
 800c914:	bf28      	it	cs
 800c916:	4632      	movcs	r2, r6
 800c918:	f7ff fbb2 	bl	800c080 <memcpy>
 800c91c:	4621      	mov	r1, r4
 800c91e:	4640      	mov	r0, r8
 800c920:	f7ff fbbc 	bl	800c09c <_free_r>
 800c924:	463c      	mov	r4, r7
 800c926:	e7e0      	b.n	800c8ea <_realloc_r+0x1e>

0800c928 <_malloc_usable_size_r>:
 800c928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c92c:	1f18      	subs	r0, r3, #4
 800c92e:	2b00      	cmp	r3, #0
 800c930:	bfbc      	itt	lt
 800c932:	580b      	ldrlt	r3, [r1, r0]
 800c934:	18c0      	addlt	r0, r0, r3
 800c936:	4770      	bx	lr

0800c938 <sqrtf>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4605      	mov	r5, r0
 800c93c:	f000 f850 	bl	800c9e0 <__ieee754_sqrtf>
 800c940:	4629      	mov	r1, r5
 800c942:	4604      	mov	r4, r0
 800c944:	4628      	mov	r0, r5
 800c946:	f7f4 fb15 	bl	8000f74 <__aeabi_fcmpun>
 800c94a:	b968      	cbnz	r0, 800c968 <sqrtf+0x30>
 800c94c:	2100      	movs	r1, #0
 800c94e:	4628      	mov	r0, r5
 800c950:	f7f4 fae8 	bl	8000f24 <__aeabi_fcmplt>
 800c954:	b140      	cbz	r0, 800c968 <sqrtf+0x30>
 800c956:	f7ff fb67 	bl	800c028 <__errno>
 800c95a:	2321      	movs	r3, #33	@ 0x21
 800c95c:	2100      	movs	r1, #0
 800c95e:	6003      	str	r3, [r0, #0]
 800c960:	4608      	mov	r0, r1
 800c962:	f7f4 f9f5 	bl	8000d50 <__aeabi_fdiv>
 800c966:	4604      	mov	r4, r0
 800c968:	4620      	mov	r0, r4
 800c96a:	bd38      	pop	{r3, r4, r5, pc}

0800c96c <sinf>:
 800c96c:	b507      	push	{r0, r1, r2, lr}
 800c96e:	4a1b      	ldr	r2, [pc, #108]	@ (800c9dc <sinf+0x70>)
 800c970:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c974:	4293      	cmp	r3, r2
 800c976:	4601      	mov	r1, r0
 800c978:	d806      	bhi.n	800c988 <sinf+0x1c>
 800c97a:	2200      	movs	r2, #0
 800c97c:	2100      	movs	r1, #0
 800c97e:	b003      	add	sp, #12
 800c980:	f85d eb04 	ldr.w	lr, [sp], #4
 800c984:	f000 b970 	b.w	800cc68 <__kernel_sinf>
 800c988:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c98c:	d304      	bcc.n	800c998 <sinf+0x2c>
 800c98e:	f7f4 f821 	bl	80009d4 <__aeabi_fsub>
 800c992:	b003      	add	sp, #12
 800c994:	f85d fb04 	ldr.w	pc, [sp], #4
 800c998:	4669      	mov	r1, sp
 800c99a:	f000 f9db 	bl	800cd54 <__ieee754_rem_pio2f>
 800c99e:	f000 0003 	and.w	r0, r0, #3
 800c9a2:	2801      	cmp	r0, #1
 800c9a4:	d008      	beq.n	800c9b8 <sinf+0x4c>
 800c9a6:	2802      	cmp	r0, #2
 800c9a8:	d00b      	beq.n	800c9c2 <sinf+0x56>
 800c9aa:	b990      	cbnz	r0, 800c9d2 <sinf+0x66>
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	9901      	ldr	r1, [sp, #4]
 800c9b0:	9800      	ldr	r0, [sp, #0]
 800c9b2:	f000 f959 	bl	800cc68 <__kernel_sinf>
 800c9b6:	e7ec      	b.n	800c992 <sinf+0x26>
 800c9b8:	9901      	ldr	r1, [sp, #4]
 800c9ba:	9800      	ldr	r0, [sp, #0]
 800c9bc:	f000 f8d4 	bl	800cb68 <__kernel_cosf>
 800c9c0:	e7e7      	b.n	800c992 <sinf+0x26>
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	9901      	ldr	r1, [sp, #4]
 800c9c6:	9800      	ldr	r0, [sp, #0]
 800c9c8:	f000 f94e 	bl	800cc68 <__kernel_sinf>
 800c9cc:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c9d0:	e7df      	b.n	800c992 <sinf+0x26>
 800c9d2:	9901      	ldr	r1, [sp, #4]
 800c9d4:	9800      	ldr	r0, [sp, #0]
 800c9d6:	f000 f8c7 	bl	800cb68 <__kernel_cosf>
 800c9da:	e7f7      	b.n	800c9cc <sinf+0x60>
 800c9dc:	3f490fd8 	.word	0x3f490fd8

0800c9e0 <__ieee754_sqrtf>:
 800c9e0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800c9e4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	d30a      	bcc.n	800ca08 <__ieee754_sqrtf+0x28>
 800c9f2:	4601      	mov	r1, r0
 800c9f4:	f7f4 f8f8 	bl	8000be8 <__aeabi_fmul>
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7f3 ffec 	bl	80009d8 <__addsf3>
 800ca00:	4604      	mov	r4, r0
 800ca02:	4620      	mov	r0, r4
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	2a00      	cmp	r2, #0
 800ca0a:	d0fa      	beq.n	800ca02 <__ieee754_sqrtf+0x22>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	da06      	bge.n	800ca1e <__ieee754_sqrtf+0x3e>
 800ca10:	4601      	mov	r1, r0
 800ca12:	f7f3 ffdf 	bl	80009d4 <__aeabi_fsub>
 800ca16:	4601      	mov	r1, r0
 800ca18:	f7f4 f99a 	bl	8000d50 <__aeabi_fdiv>
 800ca1c:	e7f0      	b.n	800ca00 <__ieee754_sqrtf+0x20>
 800ca1e:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800ca22:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ca26:	d03e      	beq.n	800caa6 <__ieee754_sqrtf+0xc6>
 800ca28:	2400      	movs	r4, #0
 800ca2a:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800ca2e:	07ca      	lsls	r2, r1, #31
 800ca30:	f04f 0019 	mov.w	r0, #25
 800ca34:	4626      	mov	r6, r4
 800ca36:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800ca3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ca3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca42:	bf58      	it	pl
 800ca44:	005b      	lslpl	r3, r3, #1
 800ca46:	106d      	asrs	r5, r5, #1
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	1872      	adds	r2, r6, r1
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	bfcf      	iteee	gt
 800ca50:	461a      	movgt	r2, r3
 800ca52:	1856      	addle	r6, r2, r1
 800ca54:	1864      	addle	r4, r4, r1
 800ca56:	1a9a      	suble	r2, r3, r2
 800ca58:	3801      	subs	r0, #1
 800ca5a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800ca5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ca62:	d1f2      	bne.n	800ca4a <__ieee754_sqrtf+0x6a>
 800ca64:	b1ba      	cbz	r2, 800ca96 <__ieee754_sqrtf+0xb6>
 800ca66:	4e14      	ldr	r6, [pc, #80]	@ (800cab8 <__ieee754_sqrtf+0xd8>)
 800ca68:	4f14      	ldr	r7, [pc, #80]	@ (800cabc <__ieee754_sqrtf+0xdc>)
 800ca6a:	6830      	ldr	r0, [r6, #0]
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	f7f3 ffb1 	bl	80009d4 <__aeabi_fsub>
 800ca72:	f8d6 8000 	ldr.w	r8, [r6]
 800ca76:	4601      	mov	r1, r0
 800ca78:	4640      	mov	r0, r8
 800ca7a:	f7f4 fa5d 	bl	8000f38 <__aeabi_fcmple>
 800ca7e:	b150      	cbz	r0, 800ca96 <__ieee754_sqrtf+0xb6>
 800ca80:	6830      	ldr	r0, [r6, #0]
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	f7f3 ffa8 	bl	80009d8 <__addsf3>
 800ca88:	6836      	ldr	r6, [r6, #0]
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7f4 fa49 	bl	8000f24 <__aeabi_fcmplt>
 800ca92:	b168      	cbz	r0, 800cab0 <__ieee754_sqrtf+0xd0>
 800ca94:	3402      	adds	r4, #2
 800ca96:	1064      	asrs	r4, r4, #1
 800ca98:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800ca9c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800caa0:	e7af      	b.n	800ca02 <__ieee754_sqrtf+0x22>
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	3201      	adds	r2, #1
 800caa6:	0218      	lsls	r0, r3, #8
 800caa8:	d5fb      	bpl.n	800caa2 <__ieee754_sqrtf+0xc2>
 800caaa:	3a01      	subs	r2, #1
 800caac:	1a89      	subs	r1, r1, r2
 800caae:	e7bb      	b.n	800ca28 <__ieee754_sqrtf+0x48>
 800cab0:	3401      	adds	r4, #1
 800cab2:	f024 0401 	bic.w	r4, r4, #1
 800cab6:	e7ee      	b.n	800ca96 <__ieee754_sqrtf+0xb6>
 800cab8:	20000918 	.word	0x20000918
 800cabc:	20000914 	.word	0x20000914

0800cac0 <rintf>:
 800cac0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cac4:	3b7f      	subs	r3, #127	@ 0x7f
 800cac6:	2b16      	cmp	r3, #22
 800cac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caca:	4601      	mov	r1, r0
 800cacc:	4604      	mov	r4, r0
 800cace:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800cad2:	dc3b      	bgt.n	800cb4c <rintf+0x8c>
 800cad4:	b1ea      	cbz	r2, 800cb12 <rintf+0x52>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800cadc:	da1c      	bge.n	800cb18 <rintf+0x58>
 800cade:	4a20      	ldr	r2, [pc, #128]	@ (800cb60 <rintf+0xa0>)
 800cae0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800cae4:	425b      	negs	r3, r3
 800cae6:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800caea:	0a5b      	lsrs	r3, r3, #9
 800caec:	0d09      	lsrs	r1, r1, #20
 800caee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800caf2:	0509      	lsls	r1, r1, #20
 800caf4:	4319      	orrs	r1, r3
 800caf6:	4628      	mov	r0, r5
 800caf8:	f7f3 ff6e 	bl	80009d8 <__addsf3>
 800cafc:	9001      	str	r0, [sp, #4]
 800cafe:	4629      	mov	r1, r5
 800cb00:	9801      	ldr	r0, [sp, #4]
 800cb02:	f7f3 ff67 	bl	80009d4 <__aeabi_fsub>
 800cb06:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 800cb0a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cb0e:	ea40 0104 	orr.w	r1, r0, r4
 800cb12:	4608      	mov	r0, r1
 800cb14:	b003      	add	sp, #12
 800cb16:	bd30      	pop	{r4, r5, pc}
 800cb18:	4a12      	ldr	r2, [pc, #72]	@ (800cb64 <rintf+0xa4>)
 800cb1a:	411a      	asrs	r2, r3
 800cb1c:	4211      	tst	r1, r2
 800cb1e:	d0f8      	beq.n	800cb12 <rintf+0x52>
 800cb20:	0851      	lsrs	r1, r2, #1
 800cb22:	ea14 0252 	ands.w	r2, r4, r2, lsr #1
 800cb26:	d018      	beq.n	800cb5a <rintf+0x9a>
 800cb28:	ea24 0201 	bic.w	r2, r4, r1
 800cb2c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cb30:	4119      	asrs	r1, r3
 800cb32:	4311      	orrs	r1, r2
 800cb34:	4b0a      	ldr	r3, [pc, #40]	@ (800cb60 <rintf+0xa0>)
 800cb36:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7f3 ff4c 	bl	80009d8 <__addsf3>
 800cb40:	9001      	str	r0, [sp, #4]
 800cb42:	4621      	mov	r1, r4
 800cb44:	9801      	ldr	r0, [sp, #4]
 800cb46:	f7f3 ff45 	bl	80009d4 <__aeabi_fsub>
 800cb4a:	e004      	b.n	800cb56 <rintf+0x96>
 800cb4c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800cb50:	d3df      	bcc.n	800cb12 <rintf+0x52>
 800cb52:	f7f3 ff41 	bl	80009d8 <__addsf3>
 800cb56:	4601      	mov	r1, r0
 800cb58:	e7db      	b.n	800cb12 <rintf+0x52>
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	e7ea      	b.n	800cb34 <rintf+0x74>
 800cb5e:	bf00      	nop
 800cb60:	0800df80 	.word	0x0800df80
 800cb64:	007fffff 	.word	0x007fffff

0800cb68 <__kernel_cosf>:
 800cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800cb70:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800cb74:	4606      	mov	r6, r0
 800cb76:	4688      	mov	r8, r1
 800cb78:	d203      	bcs.n	800cb82 <__kernel_cosf+0x1a>
 800cb7a:	f7f4 fa11 	bl	8000fa0 <__aeabi_f2iz>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d05c      	beq.n	800cc3c <__kernel_cosf+0xd4>
 800cb82:	4631      	mov	r1, r6
 800cb84:	4630      	mov	r0, r6
 800cb86:	f7f4 f82f 	bl	8000be8 <__aeabi_fmul>
 800cb8a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800cb8e:	4604      	mov	r4, r0
 800cb90:	f7f4 f82a 	bl	8000be8 <__aeabi_fmul>
 800cb94:	492b      	ldr	r1, [pc, #172]	@ (800cc44 <__kernel_cosf+0xdc>)
 800cb96:	4607      	mov	r7, r0
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f7f4 f825 	bl	8000be8 <__aeabi_fmul>
 800cb9e:	492a      	ldr	r1, [pc, #168]	@ (800cc48 <__kernel_cosf+0xe0>)
 800cba0:	f7f3 ff1a 	bl	80009d8 <__addsf3>
 800cba4:	4621      	mov	r1, r4
 800cba6:	f7f4 f81f 	bl	8000be8 <__aeabi_fmul>
 800cbaa:	4928      	ldr	r1, [pc, #160]	@ (800cc4c <__kernel_cosf+0xe4>)
 800cbac:	f7f3 ff12 	bl	80009d4 <__aeabi_fsub>
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	f7f4 f819 	bl	8000be8 <__aeabi_fmul>
 800cbb6:	4926      	ldr	r1, [pc, #152]	@ (800cc50 <__kernel_cosf+0xe8>)
 800cbb8:	f7f3 ff0e 	bl	80009d8 <__addsf3>
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	f7f4 f813 	bl	8000be8 <__aeabi_fmul>
 800cbc2:	4924      	ldr	r1, [pc, #144]	@ (800cc54 <__kernel_cosf+0xec>)
 800cbc4:	f7f3 ff06 	bl	80009d4 <__aeabi_fsub>
 800cbc8:	4621      	mov	r1, r4
 800cbca:	f7f4 f80d 	bl	8000be8 <__aeabi_fmul>
 800cbce:	4922      	ldr	r1, [pc, #136]	@ (800cc58 <__kernel_cosf+0xf0>)
 800cbd0:	f7f3 ff02 	bl	80009d8 <__addsf3>
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	f7f4 f807 	bl	8000be8 <__aeabi_fmul>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	f7f4 f804 	bl	8000be8 <__aeabi_fmul>
 800cbe0:	4641      	mov	r1, r8
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	f7f3 ffff 	bl	8000be8 <__aeabi_fmul>
 800cbea:	4601      	mov	r1, r0
 800cbec:	4620      	mov	r0, r4
 800cbee:	f7f3 fef1 	bl	80009d4 <__aeabi_fsub>
 800cbf2:	4b1a      	ldr	r3, [pc, #104]	@ (800cc5c <__kernel_cosf+0xf4>)
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	429d      	cmp	r5, r3
 800cbf8:	d80a      	bhi.n	800cc10 <__kernel_cosf+0xa8>
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f7f3 fee9 	bl	80009d4 <__aeabi_fsub>
 800cc02:	4601      	mov	r1, r0
 800cc04:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cc08:	f7f3 fee4 	bl	80009d4 <__aeabi_fsub>
 800cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc10:	4b13      	ldr	r3, [pc, #76]	@ (800cc60 <__kernel_cosf+0xf8>)
 800cc12:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cc16:	429d      	cmp	r5, r3
 800cc18:	bf8c      	ite	hi
 800cc1a:	4d12      	ldrhi	r5, [pc, #72]	@ (800cc64 <__kernel_cosf+0xfc>)
 800cc1c:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 fed7 	bl	80009d4 <__aeabi_fsub>
 800cc26:	4629      	mov	r1, r5
 800cc28:	4606      	mov	r6, r0
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	f7f3 fed2 	bl	80009d4 <__aeabi_fsub>
 800cc30:	4621      	mov	r1, r4
 800cc32:	f7f3 fecf 	bl	80009d4 <__aeabi_fsub>
 800cc36:	4601      	mov	r1, r0
 800cc38:	4630      	mov	r0, r6
 800cc3a:	e7e5      	b.n	800cc08 <__kernel_cosf+0xa0>
 800cc3c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cc40:	e7e4      	b.n	800cc0c <__kernel_cosf+0xa4>
 800cc42:	bf00      	nop
 800cc44:	ad47d74e 	.word	0xad47d74e
 800cc48:	310f74f6 	.word	0x310f74f6
 800cc4c:	3493f27c 	.word	0x3493f27c
 800cc50:	37d00d01 	.word	0x37d00d01
 800cc54:	3ab60b61 	.word	0x3ab60b61
 800cc58:	3d2aaaab 	.word	0x3d2aaaab
 800cc5c:	3e999999 	.word	0x3e999999
 800cc60:	3f480000 	.word	0x3f480000
 800cc64:	3e900000 	.word	0x3e900000

0800cc68 <__kernel_sinf>:
 800cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cc70:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cc74:	4604      	mov	r4, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	4691      	mov	r9, r2
 800cc7a:	d203      	bcs.n	800cc84 <__kernel_sinf+0x1c>
 800cc7c:	f7f4 f990 	bl	8000fa0 <__aeabi_f2iz>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d035      	beq.n	800ccf0 <__kernel_sinf+0x88>
 800cc84:	4621      	mov	r1, r4
 800cc86:	4620      	mov	r0, r4
 800cc88:	f7f3 ffae 	bl	8000be8 <__aeabi_fmul>
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	4601      	mov	r1, r0
 800cc90:	4620      	mov	r0, r4
 800cc92:	f7f3 ffa9 	bl	8000be8 <__aeabi_fmul>
 800cc96:	4929      	ldr	r1, [pc, #164]	@ (800cd3c <__kernel_sinf+0xd4>)
 800cc98:	4606      	mov	r6, r0
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f7f3 ffa4 	bl	8000be8 <__aeabi_fmul>
 800cca0:	4927      	ldr	r1, [pc, #156]	@ (800cd40 <__kernel_sinf+0xd8>)
 800cca2:	f7f3 fe97 	bl	80009d4 <__aeabi_fsub>
 800cca6:	4629      	mov	r1, r5
 800cca8:	f7f3 ff9e 	bl	8000be8 <__aeabi_fmul>
 800ccac:	4925      	ldr	r1, [pc, #148]	@ (800cd44 <__kernel_sinf+0xdc>)
 800ccae:	f7f3 fe93 	bl	80009d8 <__addsf3>
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	f7f3 ff98 	bl	8000be8 <__aeabi_fmul>
 800ccb8:	4923      	ldr	r1, [pc, #140]	@ (800cd48 <__kernel_sinf+0xe0>)
 800ccba:	f7f3 fe8b 	bl	80009d4 <__aeabi_fsub>
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	f7f3 ff92 	bl	8000be8 <__aeabi_fmul>
 800ccc4:	4921      	ldr	r1, [pc, #132]	@ (800cd4c <__kernel_sinf+0xe4>)
 800ccc6:	f7f3 fe87 	bl	80009d8 <__addsf3>
 800ccca:	4680      	mov	r8, r0
 800cccc:	f1b9 0f00 	cmp.w	r9, #0
 800ccd0:	d111      	bne.n	800ccf6 <__kernel_sinf+0x8e>
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f7f3 ff87 	bl	8000be8 <__aeabi_fmul>
 800ccda:	491d      	ldr	r1, [pc, #116]	@ (800cd50 <__kernel_sinf+0xe8>)
 800ccdc:	f7f3 fe7a 	bl	80009d4 <__aeabi_fsub>
 800cce0:	4631      	mov	r1, r6
 800cce2:	f7f3 ff81 	bl	8000be8 <__aeabi_fmul>
 800cce6:	4601      	mov	r1, r0
 800cce8:	4620      	mov	r0, r4
 800ccea:	f7f3 fe75 	bl	80009d8 <__addsf3>
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f7f3 ff74 	bl	8000be8 <__aeabi_fmul>
 800cd00:	4641      	mov	r1, r8
 800cd02:	4681      	mov	r9, r0
 800cd04:	4630      	mov	r0, r6
 800cd06:	f7f3 ff6f 	bl	8000be8 <__aeabi_fmul>
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	4648      	mov	r0, r9
 800cd0e:	f7f3 fe61 	bl	80009d4 <__aeabi_fsub>
 800cd12:	4629      	mov	r1, r5
 800cd14:	f7f3 ff68 	bl	8000be8 <__aeabi_fmul>
 800cd18:	4639      	mov	r1, r7
 800cd1a:	f7f3 fe5b 	bl	80009d4 <__aeabi_fsub>
 800cd1e:	490c      	ldr	r1, [pc, #48]	@ (800cd50 <__kernel_sinf+0xe8>)
 800cd20:	4605      	mov	r5, r0
 800cd22:	4630      	mov	r0, r6
 800cd24:	f7f3 ff60 	bl	8000be8 <__aeabi_fmul>
 800cd28:	4601      	mov	r1, r0
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f7f3 fe54 	bl	80009d8 <__addsf3>
 800cd30:	4601      	mov	r1, r0
 800cd32:	4620      	mov	r0, r4
 800cd34:	f7f3 fe4e 	bl	80009d4 <__aeabi_fsub>
 800cd38:	e7d9      	b.n	800ccee <__kernel_sinf+0x86>
 800cd3a:	bf00      	nop
 800cd3c:	2f2ec9d3 	.word	0x2f2ec9d3
 800cd40:	32d72f34 	.word	0x32d72f34
 800cd44:	3638ef1b 	.word	0x3638ef1b
 800cd48:	39500d01 	.word	0x39500d01
 800cd4c:	3c088889 	.word	0x3c088889
 800cd50:	3e2aaaab 	.word	0x3e2aaaab

0800cd54 <__ieee754_rem_pio2f>:
 800cd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd58:	4aa4      	ldr	r2, [pc, #656]	@ (800cfec <__ieee754_rem_pio2f+0x298>)
 800cd5a:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800cd5e:	4590      	cmp	r8, r2
 800cd60:	460c      	mov	r4, r1
 800cd62:	4682      	mov	sl, r0
 800cd64:	b087      	sub	sp, #28
 800cd66:	d804      	bhi.n	800cd72 <__ieee754_rem_pio2f+0x1e>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	6008      	str	r0, [r1, #0]
 800cd6c:	604b      	str	r3, [r1, #4]
 800cd6e:	2500      	movs	r5, #0
 800cd70:	e01d      	b.n	800cdae <__ieee754_rem_pio2f+0x5a>
 800cd72:	4a9f      	ldr	r2, [pc, #636]	@ (800cff0 <__ieee754_rem_pio2f+0x29c>)
 800cd74:	4590      	cmp	r8, r2
 800cd76:	d84f      	bhi.n	800ce18 <__ieee754_rem_pio2f+0xc4>
 800cd78:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	499d      	ldr	r1, [pc, #628]	@ (800cff4 <__ieee754_rem_pio2f+0x2a0>)
 800cd80:	4f9d      	ldr	r7, [pc, #628]	@ (800cff8 <__ieee754_rem_pio2f+0x2a4>)
 800cd82:	f025 050f 	bic.w	r5, r5, #15
 800cd86:	dd24      	ble.n	800cdd2 <__ieee754_rem_pio2f+0x7e>
 800cd88:	f7f3 fe24 	bl	80009d4 <__aeabi_fsub>
 800cd8c:	42bd      	cmp	r5, r7
 800cd8e:	4606      	mov	r6, r0
 800cd90:	d011      	beq.n	800cdb6 <__ieee754_rem_pio2f+0x62>
 800cd92:	499a      	ldr	r1, [pc, #616]	@ (800cffc <__ieee754_rem_pio2f+0x2a8>)
 800cd94:	f7f3 fe1e 	bl	80009d4 <__aeabi_fsub>
 800cd98:	4601      	mov	r1, r0
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f7f3 fe19 	bl	80009d4 <__aeabi_fsub>
 800cda2:	4996      	ldr	r1, [pc, #600]	@ (800cffc <__ieee754_rem_pio2f+0x2a8>)
 800cda4:	f7f3 fe16 	bl	80009d4 <__aeabi_fsub>
 800cda8:	6025      	str	r5, [r4, #0]
 800cdaa:	2501      	movs	r5, #1
 800cdac:	6060      	str	r0, [r4, #4]
 800cdae:	4628      	mov	r0, r5
 800cdb0:	b007      	add	sp, #28
 800cdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb6:	4992      	ldr	r1, [pc, #584]	@ (800d000 <__ieee754_rem_pio2f+0x2ac>)
 800cdb8:	f7f3 fe0c 	bl	80009d4 <__aeabi_fsub>
 800cdbc:	4991      	ldr	r1, [pc, #580]	@ (800d004 <__ieee754_rem_pio2f+0x2b0>)
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	f7f3 fe08 	bl	80009d4 <__aeabi_fsub>
 800cdc4:	4601      	mov	r1, r0
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7f3 fe03 	bl	80009d4 <__aeabi_fsub>
 800cdce:	498d      	ldr	r1, [pc, #564]	@ (800d004 <__ieee754_rem_pio2f+0x2b0>)
 800cdd0:	e7e8      	b.n	800cda4 <__ieee754_rem_pio2f+0x50>
 800cdd2:	f7f3 fe01 	bl	80009d8 <__addsf3>
 800cdd6:	42bd      	cmp	r5, r7
 800cdd8:	4606      	mov	r6, r0
 800cdda:	d00f      	beq.n	800cdfc <__ieee754_rem_pio2f+0xa8>
 800cddc:	4987      	ldr	r1, [pc, #540]	@ (800cffc <__ieee754_rem_pio2f+0x2a8>)
 800cdde:	f7f3 fdfb 	bl	80009d8 <__addsf3>
 800cde2:	4601      	mov	r1, r0
 800cde4:	4605      	mov	r5, r0
 800cde6:	4630      	mov	r0, r6
 800cde8:	f7f3 fdf4 	bl	80009d4 <__aeabi_fsub>
 800cdec:	4983      	ldr	r1, [pc, #524]	@ (800cffc <__ieee754_rem_pio2f+0x2a8>)
 800cdee:	f7f3 fdf3 	bl	80009d8 <__addsf3>
 800cdf2:	6025      	str	r5, [r4, #0]
 800cdf4:	6060      	str	r0, [r4, #4]
 800cdf6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cdfa:	e7d8      	b.n	800cdae <__ieee754_rem_pio2f+0x5a>
 800cdfc:	4980      	ldr	r1, [pc, #512]	@ (800d000 <__ieee754_rem_pio2f+0x2ac>)
 800cdfe:	f7f3 fdeb 	bl	80009d8 <__addsf3>
 800ce02:	4980      	ldr	r1, [pc, #512]	@ (800d004 <__ieee754_rem_pio2f+0x2b0>)
 800ce04:	4606      	mov	r6, r0
 800ce06:	f7f3 fde7 	bl	80009d8 <__addsf3>
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f7f3 fde0 	bl	80009d4 <__aeabi_fsub>
 800ce14:	497b      	ldr	r1, [pc, #492]	@ (800d004 <__ieee754_rem_pio2f+0x2b0>)
 800ce16:	e7ea      	b.n	800cdee <__ieee754_rem_pio2f+0x9a>
 800ce18:	4a7b      	ldr	r2, [pc, #492]	@ (800d008 <__ieee754_rem_pio2f+0x2b4>)
 800ce1a:	4590      	cmp	r8, r2
 800ce1c:	f200 8095 	bhi.w	800cf4a <__ieee754_rem_pio2f+0x1f6>
 800ce20:	f000 f8fe 	bl	800d020 <fabsf>
 800ce24:	4979      	ldr	r1, [pc, #484]	@ (800d00c <__ieee754_rem_pio2f+0x2b8>)
 800ce26:	4606      	mov	r6, r0
 800ce28:	f7f3 fede 	bl	8000be8 <__aeabi_fmul>
 800ce2c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800ce30:	f7f3 fdd2 	bl	80009d8 <__addsf3>
 800ce34:	f7f4 f8b4 	bl	8000fa0 <__aeabi_f2iz>
 800ce38:	4605      	mov	r5, r0
 800ce3a:	f7f3 fe81 	bl	8000b40 <__aeabi_i2f>
 800ce3e:	496d      	ldr	r1, [pc, #436]	@ (800cff4 <__ieee754_rem_pio2f+0x2a0>)
 800ce40:	4681      	mov	r9, r0
 800ce42:	f7f3 fed1 	bl	8000be8 <__aeabi_fmul>
 800ce46:	4601      	mov	r1, r0
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f7f3 fdc3 	bl	80009d4 <__aeabi_fsub>
 800ce4e:	496b      	ldr	r1, [pc, #428]	@ (800cffc <__ieee754_rem_pio2f+0x2a8>)
 800ce50:	4607      	mov	r7, r0
 800ce52:	4648      	mov	r0, r9
 800ce54:	f7f3 fec8 	bl	8000be8 <__aeabi_fmul>
 800ce58:	2d1f      	cmp	r5, #31
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	dc0e      	bgt.n	800ce7c <__ieee754_rem_pio2f+0x128>
 800ce5e:	4a6c      	ldr	r2, [pc, #432]	@ (800d010 <__ieee754_rem_pio2f+0x2bc>)
 800ce60:	1e69      	subs	r1, r5, #1
 800ce62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ce66:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800ce6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d004      	beq.n	800ce7c <__ieee754_rem_pio2f+0x128>
 800ce72:	4631      	mov	r1, r6
 800ce74:	4638      	mov	r0, r7
 800ce76:	f7f3 fdad 	bl	80009d4 <__aeabi_fsub>
 800ce7a:	e00b      	b.n	800ce94 <__ieee754_rem_pio2f+0x140>
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	4638      	mov	r0, r7
 800ce80:	f7f3 fda8 	bl	80009d4 <__aeabi_fsub>
 800ce84:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ce88:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800ce8c:	2b08      	cmp	r3, #8
 800ce8e:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800ce92:	dc01      	bgt.n	800ce98 <__ieee754_rem_pio2f+0x144>
 800ce94:	6020      	str	r0, [r4, #0]
 800ce96:	e026      	b.n	800cee6 <__ieee754_rem_pio2f+0x192>
 800ce98:	4959      	ldr	r1, [pc, #356]	@ (800d000 <__ieee754_rem_pio2f+0x2ac>)
 800ce9a:	4648      	mov	r0, r9
 800ce9c:	f7f3 fea4 	bl	8000be8 <__aeabi_fmul>
 800cea0:	4606      	mov	r6, r0
 800cea2:	4601      	mov	r1, r0
 800cea4:	4638      	mov	r0, r7
 800cea6:	f7f3 fd95 	bl	80009d4 <__aeabi_fsub>
 800ceaa:	4601      	mov	r1, r0
 800ceac:	4680      	mov	r8, r0
 800ceae:	4638      	mov	r0, r7
 800ceb0:	f7f3 fd90 	bl	80009d4 <__aeabi_fsub>
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	f7f3 fd8d 	bl	80009d4 <__aeabi_fsub>
 800ceba:	4606      	mov	r6, r0
 800cebc:	4951      	ldr	r1, [pc, #324]	@ (800d004 <__ieee754_rem_pio2f+0x2b0>)
 800cebe:	4648      	mov	r0, r9
 800cec0:	f7f3 fe92 	bl	8000be8 <__aeabi_fmul>
 800cec4:	4631      	mov	r1, r6
 800cec6:	f7f3 fd85 	bl	80009d4 <__aeabi_fsub>
 800ceca:	4601      	mov	r1, r0
 800cecc:	4606      	mov	r6, r0
 800cece:	4640      	mov	r0, r8
 800ced0:	f7f3 fd80 	bl	80009d4 <__aeabi_fsub>
 800ced4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ced8:	ebab 0b03 	sub.w	fp, fp, r3
 800cedc:	f1bb 0f19 	cmp.w	fp, #25
 800cee0:	dc18      	bgt.n	800cf14 <__ieee754_rem_pio2f+0x1c0>
 800cee2:	4647      	mov	r7, r8
 800cee4:	6020      	str	r0, [r4, #0]
 800cee6:	f8d4 8000 	ldr.w	r8, [r4]
 800ceea:	4638      	mov	r0, r7
 800ceec:	4641      	mov	r1, r8
 800ceee:	f7f3 fd71 	bl	80009d4 <__aeabi_fsub>
 800cef2:	4631      	mov	r1, r6
 800cef4:	f7f3 fd6e 	bl	80009d4 <__aeabi_fsub>
 800cef8:	f1ba 0f00 	cmp.w	sl, #0
 800cefc:	6060      	str	r0, [r4, #4]
 800cefe:	f6bf af56 	bge.w	800cdae <__ieee754_rem_pio2f+0x5a>
 800cf02:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800cf06:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800cf0a:	f8c4 8000 	str.w	r8, [r4]
 800cf0e:	6060      	str	r0, [r4, #4]
 800cf10:	426d      	negs	r5, r5
 800cf12:	e74c      	b.n	800cdae <__ieee754_rem_pio2f+0x5a>
 800cf14:	493f      	ldr	r1, [pc, #252]	@ (800d014 <__ieee754_rem_pio2f+0x2c0>)
 800cf16:	4648      	mov	r0, r9
 800cf18:	f7f3 fe66 	bl	8000be8 <__aeabi_fmul>
 800cf1c:	4606      	mov	r6, r0
 800cf1e:	4601      	mov	r1, r0
 800cf20:	4640      	mov	r0, r8
 800cf22:	f7f3 fd57 	bl	80009d4 <__aeabi_fsub>
 800cf26:	4601      	mov	r1, r0
 800cf28:	4607      	mov	r7, r0
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f7f3 fd52 	bl	80009d4 <__aeabi_fsub>
 800cf30:	4631      	mov	r1, r6
 800cf32:	f7f3 fd4f 	bl	80009d4 <__aeabi_fsub>
 800cf36:	4606      	mov	r6, r0
 800cf38:	4937      	ldr	r1, [pc, #220]	@ (800d018 <__ieee754_rem_pio2f+0x2c4>)
 800cf3a:	4648      	mov	r0, r9
 800cf3c:	f7f3 fe54 	bl	8000be8 <__aeabi_fmul>
 800cf40:	4631      	mov	r1, r6
 800cf42:	f7f3 fd47 	bl	80009d4 <__aeabi_fsub>
 800cf46:	4606      	mov	r6, r0
 800cf48:	e793      	b.n	800ce72 <__ieee754_rem_pio2f+0x11e>
 800cf4a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800cf4e:	d305      	bcc.n	800cf5c <__ieee754_rem_pio2f+0x208>
 800cf50:	4601      	mov	r1, r0
 800cf52:	f7f3 fd3f 	bl	80009d4 <__aeabi_fsub>
 800cf56:	6060      	str	r0, [r4, #4]
 800cf58:	6020      	str	r0, [r4, #0]
 800cf5a:	e708      	b.n	800cd6e <__ieee754_rem_pio2f+0x1a>
 800cf5c:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800cf60:	3e86      	subs	r6, #134	@ 0x86
 800cf62:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800cf66:	4640      	mov	r0, r8
 800cf68:	f7f4 f81a 	bl	8000fa0 <__aeabi_f2iz>
 800cf6c:	f7f3 fde8 	bl	8000b40 <__aeabi_i2f>
 800cf70:	4601      	mov	r1, r0
 800cf72:	9003      	str	r0, [sp, #12]
 800cf74:	4640      	mov	r0, r8
 800cf76:	f7f3 fd2d 	bl	80009d4 <__aeabi_fsub>
 800cf7a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800cf7e:	f7f3 fe33 	bl	8000be8 <__aeabi_fmul>
 800cf82:	4607      	mov	r7, r0
 800cf84:	f7f4 f80c 	bl	8000fa0 <__aeabi_f2iz>
 800cf88:	f7f3 fdda 	bl	8000b40 <__aeabi_i2f>
 800cf8c:	4601      	mov	r1, r0
 800cf8e:	9004      	str	r0, [sp, #16]
 800cf90:	4605      	mov	r5, r0
 800cf92:	4638      	mov	r0, r7
 800cf94:	f7f3 fd1e 	bl	80009d4 <__aeabi_fsub>
 800cf98:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800cf9c:	f7f3 fe24 	bl	8000be8 <__aeabi_fmul>
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	9005      	str	r0, [sp, #20]
 800cfa4:	f7f3 ffb4 	bl	8000f10 <__aeabi_fcmpeq>
 800cfa8:	b1f0      	cbz	r0, 800cfe8 <__ieee754_rem_pio2f+0x294>
 800cfaa:	2100      	movs	r1, #0
 800cfac:	4628      	mov	r0, r5
 800cfae:	f7f3 ffaf 	bl	8000f10 <__aeabi_fcmpeq>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	bf14      	ite	ne
 800cfb6:	2301      	movne	r3, #1
 800cfb8:	2302      	moveq	r3, #2
 800cfba:	4a18      	ldr	r2, [pc, #96]	@ (800d01c <__ieee754_rem_pio2f+0x2c8>)
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	9201      	str	r2, [sp, #4]
 800cfc0:	2202      	movs	r2, #2
 800cfc2:	a803      	add	r0, sp, #12
 800cfc4:	9200      	str	r2, [sp, #0]
 800cfc6:	4632      	mov	r2, r6
 800cfc8:	f000 f82e 	bl	800d028 <__kernel_rem_pio2f>
 800cfcc:	f1ba 0f00 	cmp.w	sl, #0
 800cfd0:	4605      	mov	r5, r0
 800cfd2:	f6bf aeec 	bge.w	800cdae <__ieee754_rem_pio2f+0x5a>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	6863      	ldr	r3, [r4, #4]
 800cfe0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cfe4:	6063      	str	r3, [r4, #4]
 800cfe6:	e793      	b.n	800cf10 <__ieee754_rem_pio2f+0x1bc>
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e7e6      	b.n	800cfba <__ieee754_rem_pio2f+0x266>
 800cfec:	3f490fd8 	.word	0x3f490fd8
 800cff0:	4016cbe3 	.word	0x4016cbe3
 800cff4:	3fc90f80 	.word	0x3fc90f80
 800cff8:	3fc90fd0 	.word	0x3fc90fd0
 800cffc:	37354443 	.word	0x37354443
 800d000:	37354400 	.word	0x37354400
 800d004:	2e85a308 	.word	0x2e85a308
 800d008:	43490f80 	.word	0x43490f80
 800d00c:	3f22f984 	.word	0x3f22f984
 800d010:	0800df88 	.word	0x0800df88
 800d014:	2e85a300 	.word	0x2e85a300
 800d018:	248d3132 	.word	0x248d3132
 800d01c:	0800e008 	.word	0x0800e008

0800d020 <fabsf>:
 800d020:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d024:	4770      	bx	lr
	...

0800d028 <__kernel_rem_pio2f>:
 800d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02c:	b0db      	sub	sp, #364	@ 0x16c
 800d02e:	9202      	str	r2, [sp, #8]
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800d034:	4bad      	ldr	r3, [pc, #692]	@ (800d2ec <__kernel_rem_pio2f+0x2c4>)
 800d036:	9005      	str	r0, [sp, #20]
 800d038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d03c:	9100      	str	r1, [sp, #0]
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	9b04      	ldr	r3, [sp, #16]
 800d042:	3b01      	subs	r3, #1
 800d044:	9303      	str	r3, [sp, #12]
 800d046:	9b02      	ldr	r3, [sp, #8]
 800d048:	1d1a      	adds	r2, r3, #4
 800d04a:	f2c0 8099 	blt.w	800d180 <__kernel_rem_pio2f+0x158>
 800d04e:	1edc      	subs	r4, r3, #3
 800d050:	bf48      	it	mi
 800d052:	1d1c      	addmi	r4, r3, #4
 800d054:	10e4      	asrs	r4, r4, #3
 800d056:	2500      	movs	r5, #0
 800d058:	f04f 0b00 	mov.w	fp, #0
 800d05c:	1c67      	adds	r7, r4, #1
 800d05e:	00fb      	lsls	r3, r7, #3
 800d060:	9306      	str	r3, [sp, #24]
 800d062:	9b02      	ldr	r3, [sp, #8]
 800d064:	9a03      	ldr	r2, [sp, #12]
 800d066:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	eba4 0802 	sub.w	r8, r4, r2
 800d070:	eb03 0902 	add.w	r9, r3, r2
 800d074:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800d076:	ae1e      	add	r6, sp, #120	@ 0x78
 800d078:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800d07c:	454d      	cmp	r5, r9
 800d07e:	f340 8081 	ble.w	800d184 <__kernel_rem_pio2f+0x15c>
 800d082:	9a04      	ldr	r2, [sp, #16]
 800d084:	ab1e      	add	r3, sp, #120	@ 0x78
 800d086:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800d08a:	f04f 0900 	mov.w	r9, #0
 800d08e:	2300      	movs	r3, #0
 800d090:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 800d094:	9a01      	ldr	r2, [sp, #4]
 800d096:	4591      	cmp	r9, r2
 800d098:	f340 809c 	ble.w	800d1d4 <__kernel_rem_pio2f+0x1ac>
 800d09c:	4613      	mov	r3, r2
 800d09e:	aa0a      	add	r2, sp, #40	@ 0x28
 800d0a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0a4:	9308      	str	r3, [sp, #32]
 800d0a6:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800d0a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d0ac:	9c01      	ldr	r4, [sp, #4]
 800d0ae:	9307      	str	r3, [sp, #28]
 800d0b0:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800d0b4:	4646      	mov	r6, r8
 800d0b6:	4625      	mov	r5, r4
 800d0b8:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800d0bc:	ab5a      	add	r3, sp, #360	@ 0x168
 800d0be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d0c2:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800d0c6:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800d0ca:	2d00      	cmp	r5, #0
 800d0cc:	f300 8087 	bgt.w	800d1de <__kernel_rem_pio2f+0x1b6>
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	4658      	mov	r0, fp
 800d0d4:	f000 fa48 	bl	800d568 <scalbnf>
 800d0d8:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800d0dc:	4605      	mov	r5, r0
 800d0de:	f7f3 fd83 	bl	8000be8 <__aeabi_fmul>
 800d0e2:	f000 fa8d 	bl	800d600 <floorf>
 800d0e6:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800d0ea:	f7f3 fd7d 	bl	8000be8 <__aeabi_fmul>
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	f7f3 fc6f 	bl	80009d4 <__aeabi_fsub>
 800d0f6:	4605      	mov	r5, r0
 800d0f8:	f7f3 ff52 	bl	8000fa0 <__aeabi_f2iz>
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	f7f3 fd1f 	bl	8000b40 <__aeabi_i2f>
 800d102:	4601      	mov	r1, r0
 800d104:	4628      	mov	r0, r5
 800d106:	f7f3 fc65 	bl	80009d4 <__aeabi_fsub>
 800d10a:	2f00      	cmp	r7, #0
 800d10c:	4681      	mov	r9, r0
 800d10e:	f340 8083 	ble.w	800d218 <__kernel_rem_pio2f+0x1f0>
 800d112:	1e62      	subs	r2, r4, #1
 800d114:	ab0a      	add	r3, sp, #40	@ 0x28
 800d116:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d11a:	f1c7 0108 	rsb	r1, r7, #8
 800d11e:	fa45 f301 	asr.w	r3, r5, r1
 800d122:	441e      	add	r6, r3
 800d124:	408b      	lsls	r3, r1
 800d126:	1aed      	subs	r5, r5, r3
 800d128:	ab0a      	add	r3, sp, #40	@ 0x28
 800d12a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d12e:	f1c7 0307 	rsb	r3, r7, #7
 800d132:	411d      	asrs	r5, r3
 800d134:	2d00      	cmp	r5, #0
 800d136:	dd7c      	ble.n	800d232 <__kernel_rem_pio2f+0x20a>
 800d138:	2200      	movs	r2, #0
 800d13a:	4692      	mov	sl, r2
 800d13c:	3601      	adds	r6, #1
 800d13e:	4294      	cmp	r4, r2
 800d140:	f300 80ac 	bgt.w	800d29c <__kernel_rem_pio2f+0x274>
 800d144:	2f00      	cmp	r7, #0
 800d146:	dd05      	ble.n	800d154 <__kernel_rem_pio2f+0x12c>
 800d148:	2f01      	cmp	r7, #1
 800d14a:	f000 80b8 	beq.w	800d2be <__kernel_rem_pio2f+0x296>
 800d14e:	2f02      	cmp	r7, #2
 800d150:	f000 80bf 	beq.w	800d2d2 <__kernel_rem_pio2f+0x2aa>
 800d154:	2d02      	cmp	r5, #2
 800d156:	d16c      	bne.n	800d232 <__kernel_rem_pio2f+0x20a>
 800d158:	4649      	mov	r1, r9
 800d15a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d15e:	f7f3 fc39 	bl	80009d4 <__aeabi_fsub>
 800d162:	4681      	mov	r9, r0
 800d164:	f1ba 0f00 	cmp.w	sl, #0
 800d168:	d063      	beq.n	800d232 <__kernel_rem_pio2f+0x20a>
 800d16a:	4639      	mov	r1, r7
 800d16c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d170:	f000 f9fa 	bl	800d568 <scalbnf>
 800d174:	4601      	mov	r1, r0
 800d176:	4648      	mov	r0, r9
 800d178:	f7f3 fc2c 	bl	80009d4 <__aeabi_fsub>
 800d17c:	4681      	mov	r9, r0
 800d17e:	e058      	b.n	800d232 <__kernel_rem_pio2f+0x20a>
 800d180:	2400      	movs	r4, #0
 800d182:	e768      	b.n	800d056 <__kernel_rem_pio2f+0x2e>
 800d184:	eb18 0f05 	cmn.w	r8, r5
 800d188:	d407      	bmi.n	800d19a <__kernel_rem_pio2f+0x172>
 800d18a:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800d18e:	f7f3 fcd7 	bl	8000b40 <__aeabi_i2f>
 800d192:	f846 0b04 	str.w	r0, [r6], #4
 800d196:	3501      	adds	r5, #1
 800d198:	e770      	b.n	800d07c <__kernel_rem_pio2f+0x54>
 800d19a:	4658      	mov	r0, fp
 800d19c:	e7f9      	b.n	800d192 <__kernel_rem_pio2f+0x16a>
 800d19e:	9307      	str	r3, [sp, #28]
 800d1a0:	9b05      	ldr	r3, [sp, #20]
 800d1a2:	f8da 1000 	ldr.w	r1, [sl]
 800d1a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d1aa:	f7f3 fd1d 	bl	8000be8 <__aeabi_fmul>
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7f3 fc11 	bl	80009d8 <__addsf3>
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	9b07      	ldr	r3, [sp, #28]
 800d1ba:	f108 0801 	add.w	r8, r8, #1
 800d1be:	9a03      	ldr	r2, [sp, #12]
 800d1c0:	f1aa 0a04 	sub.w	sl, sl, #4
 800d1c4:	4590      	cmp	r8, r2
 800d1c6:	ddea      	ble.n	800d19e <__kernel_rem_pio2f+0x176>
 800d1c8:	f84b 6b04 	str.w	r6, [fp], #4
 800d1cc:	f109 0901 	add.w	r9, r9, #1
 800d1d0:	3504      	adds	r5, #4
 800d1d2:	e75f      	b.n	800d094 <__kernel_rem_pio2f+0x6c>
 800d1d4:	46aa      	mov	sl, r5
 800d1d6:	461e      	mov	r6, r3
 800d1d8:	f04f 0800 	mov.w	r8, #0
 800d1dc:	e7ef      	b.n	800d1be <__kernel_rem_pio2f+0x196>
 800d1de:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800d1e2:	4658      	mov	r0, fp
 800d1e4:	f7f3 fd00 	bl	8000be8 <__aeabi_fmul>
 800d1e8:	f7f3 feda 	bl	8000fa0 <__aeabi_f2iz>
 800d1ec:	f7f3 fca8 	bl	8000b40 <__aeabi_i2f>
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	9009      	str	r0, [sp, #36]	@ 0x24
 800d1f4:	f7f3 fcf8 	bl	8000be8 <__aeabi_fmul>
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	4658      	mov	r0, fp
 800d1fc:	f7f3 fbea 	bl	80009d4 <__aeabi_fsub>
 800d200:	f7f3 fece 	bl	8000fa0 <__aeabi_f2iz>
 800d204:	3d01      	subs	r5, #1
 800d206:	f846 0b04 	str.w	r0, [r6], #4
 800d20a:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800d20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d210:	f7f3 fbe2 	bl	80009d8 <__addsf3>
 800d214:	4683      	mov	fp, r0
 800d216:	e758      	b.n	800d0ca <__kernel_rem_pio2f+0xa2>
 800d218:	d105      	bne.n	800d226 <__kernel_rem_pio2f+0x1fe>
 800d21a:	1e63      	subs	r3, r4, #1
 800d21c:	aa0a      	add	r2, sp, #40	@ 0x28
 800d21e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800d222:	11ed      	asrs	r5, r5, #7
 800d224:	e786      	b.n	800d134 <__kernel_rem_pio2f+0x10c>
 800d226:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800d22a:	f7f3 fe8f 	bl	8000f4c <__aeabi_fcmpge>
 800d22e:	4605      	mov	r5, r0
 800d230:	bb90      	cbnz	r0, 800d298 <__kernel_rem_pio2f+0x270>
 800d232:	2100      	movs	r1, #0
 800d234:	4648      	mov	r0, r9
 800d236:	f7f3 fe6b 	bl	8000f10 <__aeabi_fcmpeq>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	f000 8090 	beq.w	800d360 <__kernel_rem_pio2f+0x338>
 800d240:	2200      	movs	r2, #0
 800d242:	1e63      	subs	r3, r4, #1
 800d244:	9901      	ldr	r1, [sp, #4]
 800d246:	428b      	cmp	r3, r1
 800d248:	da4a      	bge.n	800d2e0 <__kernel_rem_pio2f+0x2b8>
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	d076      	beq.n	800d33c <__kernel_rem_pio2f+0x314>
 800d24e:	3c01      	subs	r4, #1
 800d250:	ab0a      	add	r3, sp, #40	@ 0x28
 800d252:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d256:	3f08      	subs	r7, #8
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d0f8      	beq.n	800d24e <__kernel_rem_pio2f+0x226>
 800d25c:	4639      	mov	r1, r7
 800d25e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d262:	f000 f981 	bl	800d568 <scalbnf>
 800d266:	46a2      	mov	sl, r4
 800d268:	4607      	mov	r7, r0
 800d26a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800d26e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800d272:	f1ba 0f00 	cmp.w	sl, #0
 800d276:	f280 80a1 	bge.w	800d3bc <__kernel_rem_pio2f+0x394>
 800d27a:	4627      	mov	r7, r4
 800d27c:	2200      	movs	r2, #0
 800d27e:	2f00      	cmp	r7, #0
 800d280:	f2c0 80cb 	blt.w	800d41a <__kernel_rem_pio2f+0x3f2>
 800d284:	a946      	add	r1, sp, #280	@ 0x118
 800d286:	4690      	mov	r8, r2
 800d288:	f04f 0a00 	mov.w	sl, #0
 800d28c:	4b18      	ldr	r3, [pc, #96]	@ (800d2f0 <__kernel_rem_pio2f+0x2c8>)
 800d28e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800d292:	eba4 0907 	sub.w	r9, r4, r7
 800d296:	e0b4      	b.n	800d402 <__kernel_rem_pio2f+0x3da>
 800d298:	2502      	movs	r5, #2
 800d29a:	e74d      	b.n	800d138 <__kernel_rem_pio2f+0x110>
 800d29c:	f858 3b04 	ldr.w	r3, [r8], #4
 800d2a0:	f1ba 0f00 	cmp.w	sl, #0
 800d2a4:	d108      	bne.n	800d2b8 <__kernel_rem_pio2f+0x290>
 800d2a6:	b123      	cbz	r3, 800d2b2 <__kernel_rem_pio2f+0x28a>
 800d2a8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800d2ac:	f848 3c04 	str.w	r3, [r8, #-4]
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	469a      	mov	sl, r3
 800d2b4:	3201      	adds	r2, #1
 800d2b6:	e742      	b.n	800d13e <__kernel_rem_pio2f+0x116>
 800d2b8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d2bc:	e7f6      	b.n	800d2ac <__kernel_rem_pio2f+0x284>
 800d2be:	1e62      	subs	r2, r4, #1
 800d2c0:	ab0a      	add	r3, sp, #40	@ 0x28
 800d2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2ca:	a90a      	add	r1, sp, #40	@ 0x28
 800d2cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d2d0:	e740      	b.n	800d154 <__kernel_rem_pio2f+0x12c>
 800d2d2:	1e62      	subs	r2, r4, #1
 800d2d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800d2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2de:	e7f4      	b.n	800d2ca <__kernel_rem_pio2f+0x2a2>
 800d2e0:	a90a      	add	r1, sp, #40	@ 0x28
 800d2e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	e7ab      	b.n	800d244 <__kernel_rem_pio2f+0x21c>
 800d2ec:	0800e34c 	.word	0x0800e34c
 800d2f0:	0800e320 	.word	0x0800e320
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d2fa:	2900      	cmp	r1, #0
 800d2fc:	d0fa      	beq.n	800d2f4 <__kernel_rem_pio2f+0x2cc>
 800d2fe:	9a04      	ldr	r2, [sp, #16]
 800d300:	a91e      	add	r1, sp, #120	@ 0x78
 800d302:	18a2      	adds	r2, r4, r2
 800d304:	1c66      	adds	r6, r4, #1
 800d306:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800d30a:	441c      	add	r4, r3
 800d30c:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800d310:	42b4      	cmp	r4, r6
 800d312:	f6ff aecd 	blt.w	800d0b0 <__kernel_rem_pio2f+0x88>
 800d316:	9b07      	ldr	r3, [sp, #28]
 800d318:	46ab      	mov	fp, r5
 800d31a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d31e:	f7f3 fc0f 	bl	8000b40 <__aeabi_i2f>
 800d322:	f04f 0a00 	mov.w	sl, #0
 800d326:	f04f 0800 	mov.w	r8, #0
 800d32a:	6028      	str	r0, [r5, #0]
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	459a      	cmp	sl, r3
 800d330:	dd07      	ble.n	800d342 <__kernel_rem_pio2f+0x31a>
 800d332:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800d336:	3504      	adds	r5, #4
 800d338:	3601      	adds	r6, #1
 800d33a:	e7e9      	b.n	800d310 <__kernel_rem_pio2f+0x2e8>
 800d33c:	2301      	movs	r3, #1
 800d33e:	9a08      	ldr	r2, [sp, #32]
 800d340:	e7d9      	b.n	800d2f6 <__kernel_rem_pio2f+0x2ce>
 800d342:	9b05      	ldr	r3, [sp, #20]
 800d344:	f85b 0904 	ldr.w	r0, [fp], #-4
 800d348:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800d34c:	f7f3 fc4c 	bl	8000be8 <__aeabi_fmul>
 800d350:	4601      	mov	r1, r0
 800d352:	4640      	mov	r0, r8
 800d354:	f7f3 fb40 	bl	80009d8 <__addsf3>
 800d358:	f10a 0a01 	add.w	sl, sl, #1
 800d35c:	4680      	mov	r8, r0
 800d35e:	e7e5      	b.n	800d32c <__kernel_rem_pio2f+0x304>
 800d360:	9b06      	ldr	r3, [sp, #24]
 800d362:	9a02      	ldr	r2, [sp, #8]
 800d364:	4648      	mov	r0, r9
 800d366:	1a99      	subs	r1, r3, r2
 800d368:	f000 f8fe 	bl	800d568 <scalbnf>
 800d36c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800d370:	4680      	mov	r8, r0
 800d372:	f7f3 fdeb 	bl	8000f4c <__aeabi_fcmpge>
 800d376:	b1f8      	cbz	r0, 800d3b8 <__kernel_rem_pio2f+0x390>
 800d378:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800d37c:	4640      	mov	r0, r8
 800d37e:	f7f3 fc33 	bl	8000be8 <__aeabi_fmul>
 800d382:	f7f3 fe0d 	bl	8000fa0 <__aeabi_f2iz>
 800d386:	f7f3 fbdb 	bl	8000b40 <__aeabi_i2f>
 800d38a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800d38e:	4681      	mov	r9, r0
 800d390:	f7f3 fc2a 	bl	8000be8 <__aeabi_fmul>
 800d394:	4601      	mov	r1, r0
 800d396:	4640      	mov	r0, r8
 800d398:	f7f3 fb1c 	bl	80009d4 <__aeabi_fsub>
 800d39c:	f7f3 fe00 	bl	8000fa0 <__aeabi_f2iz>
 800d3a0:	ab0a      	add	r3, sp, #40	@ 0x28
 800d3a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d3a6:	4648      	mov	r0, r9
 800d3a8:	3401      	adds	r4, #1
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	f7f3 fdf8 	bl	8000fa0 <__aeabi_f2iz>
 800d3b0:	ab0a      	add	r3, sp, #40	@ 0x28
 800d3b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d3b6:	e751      	b.n	800d25c <__kernel_rem_pio2f+0x234>
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	e7f7      	b.n	800d3ac <__kernel_rem_pio2f+0x384>
 800d3bc:	ab0a      	add	r3, sp, #40	@ 0x28
 800d3be:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d3c2:	f7f3 fbbd 	bl	8000b40 <__aeabi_i2f>
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	f7f3 fc0e 	bl	8000be8 <__aeabi_fmul>
 800d3cc:	4649      	mov	r1, r9
 800d3ce:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	f7f3 fc08 	bl	8000be8 <__aeabi_fmul>
 800d3d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d3dc:	4607      	mov	r7, r0
 800d3de:	e748      	b.n	800d272 <__kernel_rem_pio2f+0x24a>
 800d3e0:	f853 0b04 	ldr.w	r0, [r3], #4
 800d3e4:	f85b 1b04 	ldr.w	r1, [fp], #4
 800d3e8:	9203      	str	r2, [sp, #12]
 800d3ea:	9302      	str	r3, [sp, #8]
 800d3ec:	f7f3 fbfc 	bl	8000be8 <__aeabi_fmul>
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	4640      	mov	r0, r8
 800d3f4:	f7f3 faf0 	bl	80009d8 <__addsf3>
 800d3f8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d3fc:	4680      	mov	r8, r0
 800d3fe:	f10a 0a01 	add.w	sl, sl, #1
 800d402:	9901      	ldr	r1, [sp, #4]
 800d404:	458a      	cmp	sl, r1
 800d406:	dc01      	bgt.n	800d40c <__kernel_rem_pio2f+0x3e4>
 800d408:	45d1      	cmp	r9, sl
 800d40a:	dae9      	bge.n	800d3e0 <__kernel_rem_pio2f+0x3b8>
 800d40c:	ab5a      	add	r3, sp, #360	@ 0x168
 800d40e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800d412:	f849 8ca0 	str.w	r8, [r9, #-160]
 800d416:	3f01      	subs	r7, #1
 800d418:	e731      	b.n	800d27e <__kernel_rem_pio2f+0x256>
 800d41a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	dc07      	bgt.n	800d430 <__kernel_rem_pio2f+0x408>
 800d420:	2b00      	cmp	r3, #0
 800d422:	dc4e      	bgt.n	800d4c2 <__kernel_rem_pio2f+0x49a>
 800d424:	d02e      	beq.n	800d484 <__kernel_rem_pio2f+0x45c>
 800d426:	f006 0007 	and.w	r0, r6, #7
 800d42a:	b05b      	add	sp, #364	@ 0x16c
 800d42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d430:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800d432:	2b03      	cmp	r3, #3
 800d434:	d1f7      	bne.n	800d426 <__kernel_rem_pio2f+0x3fe>
 800d436:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800d43a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800d43e:	46b8      	mov	r8, r7
 800d440:	46a2      	mov	sl, r4
 800d442:	f1ba 0f00 	cmp.w	sl, #0
 800d446:	dc49      	bgt.n	800d4dc <__kernel_rem_pio2f+0x4b4>
 800d448:	46a1      	mov	r9, r4
 800d44a:	f1b9 0f01 	cmp.w	r9, #1
 800d44e:	dc60      	bgt.n	800d512 <__kernel_rem_pio2f+0x4ea>
 800d450:	2000      	movs	r0, #0
 800d452:	2c01      	cmp	r4, #1
 800d454:	dc76      	bgt.n	800d544 <__kernel_rem_pio2f+0x51c>
 800d456:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800d458:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	d178      	bne.n	800d550 <__kernel_rem_pio2f+0x528>
 800d45e:	9900      	ldr	r1, [sp, #0]
 800d460:	600a      	str	r2, [r1, #0]
 800d462:	460a      	mov	r2, r1
 800d464:	604b      	str	r3, [r1, #4]
 800d466:	6090      	str	r0, [r2, #8]
 800d468:	e7dd      	b.n	800d426 <__kernel_rem_pio2f+0x3fe>
 800d46a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800d46e:	f7f3 fab3 	bl	80009d8 <__addsf3>
 800d472:	3c01      	subs	r4, #1
 800d474:	2c00      	cmp	r4, #0
 800d476:	daf8      	bge.n	800d46a <__kernel_rem_pio2f+0x442>
 800d478:	b10d      	cbz	r5, 800d47e <__kernel_rem_pio2f+0x456>
 800d47a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800d47e:	9b00      	ldr	r3, [sp, #0]
 800d480:	6018      	str	r0, [r3, #0]
 800d482:	e7d0      	b.n	800d426 <__kernel_rem_pio2f+0x3fe>
 800d484:	2000      	movs	r0, #0
 800d486:	af32      	add	r7, sp, #200	@ 0xc8
 800d488:	e7f4      	b.n	800d474 <__kernel_rem_pio2f+0x44c>
 800d48a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800d48e:	f7f3 faa3 	bl	80009d8 <__addsf3>
 800d492:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d496:	f1b8 0f00 	cmp.w	r8, #0
 800d49a:	daf6      	bge.n	800d48a <__kernel_rem_pio2f+0x462>
 800d49c:	b1ad      	cbz	r5, 800d4ca <__kernel_rem_pio2f+0x4a2>
 800d49e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800d4a2:	9a00      	ldr	r2, [sp, #0]
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800d4aa:	f7f3 fa93 	bl	80009d4 <__aeabi_fsub>
 800d4ae:	f04f 0801 	mov.w	r8, #1
 800d4b2:	4544      	cmp	r4, r8
 800d4b4:	da0b      	bge.n	800d4ce <__kernel_rem_pio2f+0x4a6>
 800d4b6:	b10d      	cbz	r5, 800d4bc <__kernel_rem_pio2f+0x494>
 800d4b8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800d4bc:	9b00      	ldr	r3, [sp, #0]
 800d4be:	6058      	str	r0, [r3, #4]
 800d4c0:	e7b1      	b.n	800d426 <__kernel_rem_pio2f+0x3fe>
 800d4c2:	46a0      	mov	r8, r4
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	af32      	add	r7, sp, #200	@ 0xc8
 800d4c8:	e7e5      	b.n	800d496 <__kernel_rem_pio2f+0x46e>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	e7e9      	b.n	800d4a2 <__kernel_rem_pio2f+0x47a>
 800d4ce:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800d4d2:	f7f3 fa81 	bl	80009d8 <__addsf3>
 800d4d6:	f108 0801 	add.w	r8, r8, #1
 800d4da:	e7ea      	b.n	800d4b2 <__kernel_rem_pio2f+0x48a>
 800d4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d4e0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	9302      	str	r3, [sp, #8]
 800d4ea:	9201      	str	r2, [sp, #4]
 800d4ec:	f7f3 fa74 	bl	80009d8 <__addsf3>
 800d4f0:	9a01      	ldr	r2, [sp, #4]
 800d4f2:	4601      	mov	r1, r0
 800d4f4:	4681      	mov	r9, r0
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f7f3 fa6c 	bl	80009d4 <__aeabi_fsub>
 800d4fc:	9b02      	ldr	r3, [sp, #8]
 800d4fe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d502:	4619      	mov	r1, r3
 800d504:	f7f3 fa68 	bl	80009d8 <__addsf3>
 800d508:	f848 0904 	str.w	r0, [r8], #-4
 800d50c:	f8c8 9000 	str.w	r9, [r8]
 800d510:	e797      	b.n	800d442 <__kernel_rem_pio2f+0x41a>
 800d512:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800d516:	f8d7 a000 	ldr.w	sl, [r7]
 800d51a:	4618      	mov	r0, r3
 800d51c:	4651      	mov	r1, sl
 800d51e:	9301      	str	r3, [sp, #4]
 800d520:	f7f3 fa5a 	bl	80009d8 <__addsf3>
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	4601      	mov	r1, r0
 800d528:	4680      	mov	r8, r0
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7f3 fa52 	bl	80009d4 <__aeabi_fsub>
 800d530:	4651      	mov	r1, sl
 800d532:	f7f3 fa51 	bl	80009d8 <__addsf3>
 800d536:	f847 0904 	str.w	r0, [r7], #-4
 800d53a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800d53e:	f8c7 8000 	str.w	r8, [r7]
 800d542:	e782      	b.n	800d44a <__kernel_rem_pio2f+0x422>
 800d544:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800d548:	f7f3 fa46 	bl	80009d8 <__addsf3>
 800d54c:	3c01      	subs	r4, #1
 800d54e:	e780      	b.n	800d452 <__kernel_rem_pio2f+0x42a>
 800d550:	9900      	ldr	r1, [sp, #0]
 800d552:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800d556:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d55a:	600a      	str	r2, [r1, #0]
 800d55c:	604b      	str	r3, [r1, #4]
 800d55e:	460a      	mov	r2, r1
 800d560:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800d564:	e77f      	b.n	800d466 <__kernel_rem_pio2f+0x43e>
 800d566:	bf00      	nop

0800d568 <scalbnf>:
 800d568:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4603      	mov	r3, r0
 800d570:	460d      	mov	r5, r1
 800d572:	4604      	mov	r4, r0
 800d574:	d02e      	beq.n	800d5d4 <scalbnf+0x6c>
 800d576:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d57a:	d304      	bcc.n	800d586 <scalbnf+0x1e>
 800d57c:	4601      	mov	r1, r0
 800d57e:	f7f3 fa2b 	bl	80009d8 <__addsf3>
 800d582:	4603      	mov	r3, r0
 800d584:	e026      	b.n	800d5d4 <scalbnf+0x6c>
 800d586:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800d58a:	d118      	bne.n	800d5be <scalbnf+0x56>
 800d58c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800d590:	f7f3 fb2a 	bl	8000be8 <__aeabi_fmul>
 800d594:	4a17      	ldr	r2, [pc, #92]	@ (800d5f4 <scalbnf+0x8c>)
 800d596:	4603      	mov	r3, r0
 800d598:	4295      	cmp	r5, r2
 800d59a:	db0c      	blt.n	800d5b6 <scalbnf+0x4e>
 800d59c:	4604      	mov	r4, r0
 800d59e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d5a2:	3a19      	subs	r2, #25
 800d5a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d5a8:	428d      	cmp	r5, r1
 800d5aa:	dd0a      	ble.n	800d5c2 <scalbnf+0x5a>
 800d5ac:	4912      	ldr	r1, [pc, #72]	@ (800d5f8 <scalbnf+0x90>)
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f361 001e 	bfi	r0, r1, #0, #31
 800d5b4:	e000      	b.n	800d5b8 <scalbnf+0x50>
 800d5b6:	4911      	ldr	r1, [pc, #68]	@ (800d5fc <scalbnf+0x94>)
 800d5b8:	f7f3 fb16 	bl	8000be8 <__aeabi_fmul>
 800d5bc:	e7e1      	b.n	800d582 <scalbnf+0x1a>
 800d5be:	0dd2      	lsrs	r2, r2, #23
 800d5c0:	e7f0      	b.n	800d5a4 <scalbnf+0x3c>
 800d5c2:	1951      	adds	r1, r2, r5
 800d5c4:	29fe      	cmp	r1, #254	@ 0xfe
 800d5c6:	dcf1      	bgt.n	800d5ac <scalbnf+0x44>
 800d5c8:	2900      	cmp	r1, #0
 800d5ca:	dd05      	ble.n	800d5d8 <scalbnf+0x70>
 800d5cc:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800d5d0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
 800d5d8:	f111 0f16 	cmn.w	r1, #22
 800d5dc:	da01      	bge.n	800d5e2 <scalbnf+0x7a>
 800d5de:	4907      	ldr	r1, [pc, #28]	@ (800d5fc <scalbnf+0x94>)
 800d5e0:	e7e5      	b.n	800d5ae <scalbnf+0x46>
 800d5e2:	f101 0019 	add.w	r0, r1, #25
 800d5e6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800d5ea:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800d5ee:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800d5f2:	e7e1      	b.n	800d5b8 <scalbnf+0x50>
 800d5f4:	ffff3cb0 	.word	0xffff3cb0
 800d5f8:	7149f2ca 	.word	0x7149f2ca
 800d5fc:	0da24260 	.word	0x0da24260

0800d600 <floorf>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800d606:	3d7f      	subs	r5, #127	@ 0x7f
 800d608:	2d16      	cmp	r5, #22
 800d60a:	4601      	mov	r1, r0
 800d60c:	4604      	mov	r4, r0
 800d60e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800d612:	dc26      	bgt.n	800d662 <floorf+0x62>
 800d614:	2d00      	cmp	r5, #0
 800d616:	da0f      	bge.n	800d638 <floorf+0x38>
 800d618:	4917      	ldr	r1, [pc, #92]	@ (800d678 <floorf+0x78>)
 800d61a:	f7f3 f9dd 	bl	80009d8 <__addsf3>
 800d61e:	2100      	movs	r1, #0
 800d620:	f7f3 fc9e 	bl	8000f60 <__aeabi_fcmpgt>
 800d624:	b130      	cbz	r0, 800d634 <floorf+0x34>
 800d626:	2c00      	cmp	r4, #0
 800d628:	da23      	bge.n	800d672 <floorf+0x72>
 800d62a:	2e00      	cmp	r6, #0
 800d62c:	4c13      	ldr	r4, [pc, #76]	@ (800d67c <floorf+0x7c>)
 800d62e:	bf08      	it	eq
 800d630:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d634:	4621      	mov	r1, r4
 800d636:	e01a      	b.n	800d66e <floorf+0x6e>
 800d638:	4e11      	ldr	r6, [pc, #68]	@ (800d680 <floorf+0x80>)
 800d63a:	412e      	asrs	r6, r5
 800d63c:	4230      	tst	r0, r6
 800d63e:	d016      	beq.n	800d66e <floorf+0x6e>
 800d640:	490d      	ldr	r1, [pc, #52]	@ (800d678 <floorf+0x78>)
 800d642:	f7f3 f9c9 	bl	80009d8 <__addsf3>
 800d646:	2100      	movs	r1, #0
 800d648:	f7f3 fc8a 	bl	8000f60 <__aeabi_fcmpgt>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d0f1      	beq.n	800d634 <floorf+0x34>
 800d650:	2c00      	cmp	r4, #0
 800d652:	bfbe      	ittt	lt
 800d654:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800d658:	412b      	asrlt	r3, r5
 800d65a:	18e4      	addlt	r4, r4, r3
 800d65c:	ea24 0406 	bic.w	r4, r4, r6
 800d660:	e7e8      	b.n	800d634 <floorf+0x34>
 800d662:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d666:	d302      	bcc.n	800d66e <floorf+0x6e>
 800d668:	f7f3 f9b6 	bl	80009d8 <__addsf3>
 800d66c:	4601      	mov	r1, r0
 800d66e:	4608      	mov	r0, r1
 800d670:	bd70      	pop	{r4, r5, r6, pc}
 800d672:	2400      	movs	r4, #0
 800d674:	e7de      	b.n	800d634 <floorf+0x34>
 800d676:	bf00      	nop
 800d678:	7149f2ca 	.word	0x7149f2ca
 800d67c:	bf800000 	.word	0xbf800000
 800d680:	007fffff 	.word	0x007fffff

0800d684 <_init>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	bf00      	nop
 800d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68a:	bc08      	pop	{r3}
 800d68c:	469e      	mov	lr, r3
 800d68e:	4770      	bx	lr

0800d690 <_fini>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr
